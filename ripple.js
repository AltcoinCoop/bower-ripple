var ripple =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var core = __webpack_require__(1);
	var RippleAPI = __webpack_require__(2);

	module.exports = {
	  RippleAPI: RippleAPI,
	  _DEPRECATED: core // WARNING: this will be removed soon
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	exports.Remote = __webpack_require__(3).Remote;
	exports.Request = __webpack_require__(4).Request;
	exports.Amount = __webpack_require__(5).Amount;
	exports.Account = __webpack_require__(6).Account;
	exports.Transaction = __webpack_require__(7).Transaction;
	exports.Currency = __webpack_require__(8).Currency;
	exports.Base = __webpack_require__(9).Base;
	exports.UInt128 = __webpack_require__(10).UInt128;
	exports.UInt160 = __webpack_require__(11).UInt160;
	exports.UInt256 = __webpack_require__(12).UInt256;
	exports.Seed = __webpack_require__(13).Seed;
	exports.Meta = __webpack_require__(14).Meta;
	exports.SerializedObject = __webpack_require__(15).SerializedObject;
	exports.RippleError = __webpack_require__(16).RippleError;
	exports.binformat = __webpack_require__(17);
	exports.utils = __webpack_require__(18);
	exports.Server = __webpack_require__(19).Server;
	exports.Ledger = __webpack_require__(20).Ledger;
	exports.TransactionQueue = __webpack_require__(21).TransactionQueue;
	exports.convertBase = __webpack_require__(22);

	exports._test = {
	  Log: __webpack_require__(23),
	  PathFind: __webpack_require__(24).PathFind,
	  TransactionManager: __webpack_require__(25).TransactionManager,
	  RangeSet: __webpack_require__(26).RangeSet
	};

	exports.types = __webpack_require__(27);

	// This patches remote with legacy support for positional arguments
	__webpack_require__(28)(exports);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	

	'use strict';
	var _ = __webpack_require__(51);
	var common = __webpack_require__(50);
	var server = __webpack_require__(29);
	var connect = server.connect;
	var disconnect = server.disconnect;
	var getServerInfo = server.getServerInfo;
	var getFee = server.getFee;
	var isConnected = server.isConnected;
	var getLedgerVersion = server.getLedgerVersion;
	var getTransaction = __webpack_require__(30);
	var getTransactions = __webpack_require__(31);
	var getTrustlines = __webpack_require__(32);
	var getBalances = __webpack_require__(33);
	var getPaths = __webpack_require__(34);
	var getOrders = __webpack_require__(35);
	var getOrderbook = __webpack_require__(36);
	var getSettings = __webpack_require__(37);
	var getAccountInfo = __webpack_require__(38);
	var preparePayment = __webpack_require__(39);
	var prepareTrustline = __webpack_require__(40);
	var prepareOrder = __webpack_require__(41);
	var prepareOrderCancellation = __webpack_require__(42);
	var prepareSettings = __webpack_require__(43);
	var sign = __webpack_require__(44);
	var submit = __webpack_require__(45);
	var errors = __webpack_require__(50).errors;
	var convertExceptions = __webpack_require__(50).convertExceptions;
	var generateAddress = convertExceptions(common.generateAddress);
	var computeLedgerHash = __webpack_require__(46);
	var getLedger = __webpack_require__(47);
	var isValidAddress = common.isValidAddress;

	function RippleAPI(options) {
	  common.validate.remoteOptions(options);
	  var _options = _.assign({}, options, { automatic_resubmission: false });
	  this.remote = new common.core.Remote(_options);
	}

	RippleAPI.prototype = {
	  connect: connect,
	  disconnect: disconnect,
	  isConnected: isConnected,
	  getServerInfo: getServerInfo,
	  getFee: getFee,
	  getLedgerVersion: getLedgerVersion,

	  getTransaction: getTransaction,
	  getTransactions: getTransactions,
	  getTrustlines: getTrustlines,
	  getBalances: getBalances,
	  getPaths: getPaths,
	  getOrders: getOrders,
	  getOrderbook: getOrderbook,
	  getSettings: getSettings,
	  getAccountInfo: getAccountInfo,
	  getLedger: getLedger,

	  preparePayment: preparePayment,
	  prepareTrustline: prepareTrustline,
	  prepareOrder: prepareOrder,
	  prepareOrderCancellation: prepareOrderCancellation,
	  prepareSettings: prepareSettings,
	  sign: sign,
	  submit: submit,

	  computeLedgerHash: computeLedgerHash,
	  isValidAddress: isValidAddress,
	  generateAddress: generateAddress,
	  errors: errors
	};

	// these are exposed only for use by unit tests; they are not part of the API
	RippleAPI._PRIVATE = {
	  common: common,
	  ledgerUtils: __webpack_require__(48),
	  schemaValidator: __webpack_require__(49)
	};

	module.exports = RippleAPI;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Interface to manage connections to rippled servers
	//
	// - We never send binary data.
	// - We use the W3C interface for node and browser compatibility:
	//   http://www.w3.org/TR/websockets/#the-websocket-interface
	//
	// This class is intended for both browser and Node.js use.
	//
	// This class is designed to work via peer protocol via either the public or
	// private WebSocket interfaces. The JavaScript class for the peer protocol
	// has not yet been implemented. However, this class has been designed for it
	// to be a very simple drop option.

	var _toConsumableArray = __webpack_require__(84)['default'];

	var _Object$keys = __webpack_require__(89)['default'];

	var util = __webpack_require__(81);
	var assert = __webpack_require__(75);
	var _ = __webpack_require__(51);
	var LRU = __webpack_require__(90);
	var async = __webpack_require__(91);
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var Server = __webpack_require__(19).Server;
	var Request = __webpack_require__(4).Request;
	var Amount = __webpack_require__(5).Amount;
	var Currency = __webpack_require__(8).Currency;
	var UInt160 = __webpack_require__(11).UInt160;
	var UInt256 = __webpack_require__(12).UInt256;
	var Transaction = __webpack_require__(7).Transaction;
	var Account = __webpack_require__(6).Account;
	var Meta = __webpack_require__(14).Meta;
	var OrderBook = __webpack_require__(52).OrderBook;
	var PathFind = __webpack_require__(24).PathFind;
	var SerializedObject = __webpack_require__(15).SerializedObject;
	var RippleError = __webpack_require__(16).RippleError;
	var utils = __webpack_require__(18);
	var hashprefixes = __webpack_require__(53);
	var log = __webpack_require__(23).internal.sub('remote');

	/**
	 * Interface to manage connections to rippled servers
	 *
	 * @param {Object} Options
	 */

	function Remote() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  EventEmitter.call(this);

	  var self = this;

	  _.merge(this, _.defaults(options, Remote.DEFAULTS));

	  this.state = 'offline'; // 'online', 'offline'
	  this._server_fatal = false; // server exited
	  this._stand_alone = undefined;
	  this._testnet = undefined;

	  this._ledger_current_index = undefined;
	  this._ledger_hash = undefined;
	  this._ledger_time = undefined;

	  this._connection_count = 0;
	  this._connected = false;
	  this._should_connect = true;

	  this._transaction_listeners = 0;
	  this._received_tx = new LRU({ max: 100 });
	  this._cur_path_find = null;
	  this._queued_path_finds = [];

	  if (this.local_signing) {
	    // Local signing implies local fees and sequences
	    this.local_sequence = true;
	    this.local_fee = true;
	  }

	  this._servers = [];
	  this._primary_server = undefined;

	  // Cache information for accounts.
	  // DEPRECATED, will be removed
	  // Consider sequence numbers stable if you know you're not generating bad
	  // transactions.
	  // Otherwise, clear it to have it automatically refreshed from the network.
	  // account : { seq : __ }
	  this.accounts = {};

	  // Account objects by AccountId.
	  this._accounts = {};

	  // OrderBook objects
	  this._books = {};

	  // Secrets that we know about.
	  // Secrets can be set by calling setSecret(account, secret).
	  // account : secret
	  this.secrets = {};

	  // Cache for various ledgers.
	  // XXX Clear when ledger advances.
	  this.ledgers = {
	    current: {
	      account_root: {}
	    }
	  };

	  if (typeof this.trusted !== 'boolean') {
	    throw new TypeError('trusted must be a boolean');
	  }
	  if (typeof this.trace !== 'boolean') {
	    throw new TypeError('trace must be a boolean');
	  }
	  if (typeof this.allow_partial_history !== 'boolean') {
	    throw new TypeError('allow_partial_history must be a boolean');
	  }
	  if (typeof this.max_fee !== 'number') {
	    throw new TypeError('max_fee must be a number');
	  }
	  if (typeof this.max_attempts !== 'number') {
	    throw new TypeError('max_attempts must be a number');
	  }
	  if (typeof this.fee_cushion !== 'number') {
	    throw new TypeError('fee_cushion must be a number');
	  }
	  if (typeof this.local_signing !== 'boolean') {
	    throw new TypeError('local_signing must be a boolean');
	  }
	  if (typeof this.local_fee !== 'boolean') {
	    throw new TypeError('local_fee must be a boolean');
	  }
	  if (typeof this.local_sequence !== 'boolean') {
	    throw new TypeError('local_sequence must be a boolean');
	  }
	  if (typeof this.canonical_signing !== 'boolean') {
	    throw new TypeError('canonical_signing must be a boolean');
	  }
	  if (typeof this.submission_timeout !== 'number') {
	    throw new TypeError('submission_timeout must be a number');
	  }
	  if (typeof this.automatic_resubmission !== 'boolean') {
	    throw new TypeError('automatic_resubmission must be a boolean');
	  }
	  if (typeof this.last_ledger_offset !== 'number') {
	    throw new TypeError('last_ledger_offset must be a number');
	  }
	  if (!Array.isArray(this.servers)) {
	    throw new TypeError('servers must be an array');
	  }

	  this.setMaxListeners(this.max_listeners);

	  this.servers.forEach(function (serverOptions) {
	    var server = self.addServer(serverOptions);
	    server.setMaxListeners(self.max_listeners);
	  });

	  function listenersModified(action, event) {
	    // Automatically subscribe and unsubscribe to orderbook
	    // on the basis of existing event listeners
	    if (_.contains(Remote.TRANSACTION_EVENTS, event)) {
	      switch (action) {
	        case 'add':
	          if (++self._transaction_listeners === 1) {
	            self.requestSubscribe('transactions').request();
	          }
	          break;
	        case 'remove':
	          if (--self._transaction_listeners === 0) {
	            self.requestUnsubscribe('transactions').request();
	          }
	          break;
	      }
	    }
	  }

	  this.on('newListener', function (event) {
	    listenersModified('add', event);
	  });

	  this.on('removeListener', function (event) {
	    listenersModified('remove', event);
	  });
	}

	util.inherits(Remote, EventEmitter);

	Remote.DEFAULTS = {
	  trusted: false,
	  trace: false,
	  allow_partial_history: true,
	  local_sequence: true,
	  local_fee: true,
	  local_signing: true,
	  canonical_signing: true,
	  fee_cushion: 1.2,
	  max_fee: 1000000, // 1 XRP
	  max_attempts: 10,
	  submission_timeout: 1000 * 20,
	  automatic_resubmission: true,
	  last_ledger_offset: 3,
	  servers: [],
	  max_listeners: 0 // remove Node EventEmitter warnings
	};

	Remote.TRANSACTION_EVENTS = ['transaction', 'transaction_all'];

	// Flags for ledger entries. In support of accountRoot().
	Remote.flags = {
	  // AccountRoot
	  account_root: {
	    PasswordSpent: 0x00010000, // password set fee is spent
	    RequireDestTag: 0x00020000, // require a DestinationTag for payments
	    RequireAuth: 0x00040000, // require a authorization to hold IOUs
	    DisallowXRP: 0x00080000, // disallow sending XRP
	    DisableMaster: 0x00100000, // force regular key
	    NoFreeze: 0x00200000, // permanently disallowed freezing trustlines
	    GlobalFreeze: 0x00400000, // trustlines globally frozen
	    DefaultRipple: 0x00800000
	  },
	  // Offer
	  offer: {
	    Passive: 0x00010000,
	    Sell: 0x00020000 // offer was placed as a sell
	  },
	  // Ripple tate
	  state: {
	    LowReserve: 0x00010000, // entry counts toward reserve
	    HighReserve: 0x00020000,
	    LowAuth: 0x00040000,
	    HighAuth: 0x00080000,
	    LowNoRipple: 0x00100000,
	    HighNoRipple: 0x00200000
	  }
	};

	/**
	 * Check that server message is valid
	 *
	 * @param {Object} message
	 * @return Boolean
	 */

	Remote.isValidMessage = function (message) {
	  return typeof message === 'object' && typeof message.type === 'string';
	};

	/**
	 * Check that server message contains valid
	 * ledger data
	 *
	 * @param {Object} message
	 * @return {Boolean}
	 */

	Remote.isValidLedgerData = function (message) {
	  return typeof message === 'object' && typeof message.fee_base === 'number' && typeof message.fee_ref === 'number' && typeof message.ledger_hash === 'string' && typeof message.ledger_index === 'number' && typeof message.ledger_time === 'number' && typeof message.reserve_base === 'number' && typeof message.reserve_inc === 'number';
	};

	/**
	 * Check that server message contains valid
	 * load status data
	 *
	 * @param {Object} message
	 * @return {Boolean}
	 */

	Remote.isValidLoadStatus = function (message) {
	  return typeof message.load_base === 'number' && typeof message.load_factor === 'number';
	};

	/**
	 * Check that provided ledger is validated
	 *
	 * @param {Object} ledger
	 * @return {Boolean}
	 */

	Remote.isValidated = function (message) {
	  return message && typeof message === 'object' && message.validated === true;
	};

	/**
	 * Set the emitted state: 'online' or 'offline'
	 *
	 * @param {String} state
	 */

	Remote.prototype._setState = function (state) {
	  if (this.state !== state) {
	    if (this.trace) {
	      log.info('set_state:', state);
	    }

	    this.state = state;
	    this.emit('state', state);

	    switch (state) {
	      case 'online':
	        this._online_state = 'open';
	        this._connected = true;
	        this.emit('connect');
	        this.emit('connected');
	        break;
	      case 'offline':
	        this._online_state = 'closed';
	        this._connected = false;
	        this.emit('disconnect');
	        this.emit('disconnected');
	        break;
	    }
	  }
	};

	/**
	 * Inform remote that the remote server is not comming back.
	 */

	Remote.prototype.setServerFatal = function () {
	  this._server_fatal = true;
	};

	/**
	 * Enable debug output
	 *
	 * @param {Boolean} trace
	 */

	Remote.prototype.setTrace = function (trace) {
	  this.trace = trace === undefined || trace;
	  return this;
	};

	Remote.prototype._trace = function () {
	  if (this.trace) {
	    log.info.apply(log, arguments);
	  }
	};

	/**
	 * Store a secret - allows the Remote to automatically fill
	 * out auth information.
	 *
	 * @param {String} account
	 * @param {String} secret
	 */

	Remote.prototype.setSecret = function (account, secret) {
	  this.secrets[account] = secret;
	};

	Remote.prototype.addServer = function (options) {
	  var self = this;
	  var server = new Server(this, options);

	  function serverMessage(data) {
	    self._handleMessage(data, server);
	  }

	  server.on('message', serverMessage);

	  function serverConnect() {
	    self._connection_count += 1;

	    if (options.primary) {
	      self._setPrimaryServer(server);
	    }
	    if (self._connection_count === 1) {
	      self._setState('online');
	    }
	    if (self._connection_count === self._servers.length) {
	      self.emit('ready');
	    }
	  }

	  server.on('connect', serverConnect);

	  function serverDisconnect() {
	    self._connection_count--;
	    if (self._connection_count === 0) {
	      self._setState('offline');
	    }
	  }

	  server.on('disconnect', serverDisconnect);

	  this._servers.push(server);

	  return server;
	};

	/**
	 * Reconnect to Ripple network
	 */

	Remote.prototype.reconnect = function () {
	  if (!this._should_connect) {
	    return;
	  }

	  log.info('reconnecting');

	  this._servers.forEach(function (server) {
	    server.reconnect();
	  });
	};

	/**
	 * Connect to the Ripple network
	 *
	 * @param {Function} callback
	 * @api public
	 */

	Remote.prototype.connect = function (callback) {
	  if (!this._servers.length) {
	    throw new Error('No servers available.');
	  }

	  if (typeof callback === 'function') {
	    this.once('connect', callback);
	  }

	  this._should_connect = true;

	  this._servers.forEach(function (server) {
	    server.connect();
	  });

	  return this;
	};

	/**
	 * Disconnect from the Ripple network.
	 *
	 * @param {Function} callback
	 * @api public
	 */

	Remote.prototype.disconnect = function (callback_) {
	  if (!this._servers.length) {
	    throw new Error('No servers available, not disconnecting');
	  }

	  var callback = _.isFunction(callback_) ? callback_ : function () {};

	  this._should_connect = false;

	  if (!this.isConnected()) {
	    callback();
	    return this;
	  }

	  this.once('disconnect', callback);

	  this._servers.forEach(function (server) {
	    server.disconnect();
	  });

	  this._setState('offline');

	  return this;
	};

	/**
	 * Handle server message. Server messages are proxied to
	 * the Remote, such that global events can be handled
	 *
	 * It is possible for messages to be dispatched after the
	 * connection is closed.
	 *
	 * @param {JSON} message
	 * @param {Server} server
	 */

	Remote.prototype._handleMessage = function (message, server) {
	  if (!Remote.isValidMessage(message)) {
	    // Unexpected response from remote.
	    var error = new RippleError('remoteUnexpected', 'Unexpected response from remote: ' + JSON.stringify(message));

	    this.emit('error', error);
	    log.error(error);
	    return;
	  }

	  switch (message.type) {
	    case 'ledgerClosed':
	      this._handleLedgerClosed(message, server);
	      break;
	    case 'serverStatus':
	      this._handleServerStatus(message, server);
	      break;
	    case 'transaction':
	      this._handleTransaction(message, server);
	      break;
	    case 'path_find':
	      this._handlePathFind(message, server);
	      break;
	    case 'validationReceived':
	      this._handleValidationReceived(message, server);
	      break;
	    default:
	      if (this.trace) {
	        log.info(message.type + ': ', message);
	      }
	      break;
	  }
	};

	Remote.prototype.getLedgerSequence = function () {
	  if (!this._ledger_current_index) {
	    throw new Error('Ledger sequence has not yet been initialized');
	  }
	  // the "current" ledger is the one after the most recently closed ledger
	  return this._ledger_current_index - 1;
	};

	/**
	 * Handle server ledger_closed event
	 *
	 * @param {Object} message
	 */

	Remote.prototype._handleLedgerClosed = function (message, server) {
	  var self = this;

	  // XXX If not trusted, need to verify we consider ledger closed.
	  // XXX Also need to consider a slow server or out of order response.
	  // XXX Be more defensive fields could be missing or of wrong type.
	  // YYY Might want to do some cache management.
	  if (!Remote.isValidLedgerData(message)) {
	    return;
	  }

	  var ledgerAdvanced = message.ledger_index >= this._ledger_current_index;

	  if (isNaN(this._ledger_current_index) || ledgerAdvanced) {
	    this._ledger_time = message.ledger_time;
	    this._ledger_hash = message.ledger_hash;
	    this._ledger_current_index = message.ledger_index + 1;

	    if (this.isConnected()) {
	      this.emit('ledger_closed', message, server);
	    } else {
	      this.once('connect', function () {
	        // Delay until server is 'online'
	        self.emit('ledger_closed', message, server);
	      });
	    }
	  }
	};

	/**
	 * Handle server validation_received event
	 *
	 * @param {Object} message
	 */

	Remote.prototype._handleValidationReceived = function (message, server) {
	  this.emit('validation_received', message, server);
	};

	/**
	 * Handle server server_status event
	 *
	 * @param {Object} message
	 */

	Remote.prototype._handleServerStatus = function (message, server) {
	  this.emit('server_status', message, server);
	};

	/**
	 * Handle server transaction event
	 *
	 * @param {Object} message
	 */

	Remote.prototype._handleTransaction = function (message, server) {
	  // XXX If not trusted, need proof.
	  var transactionHash = message.transaction.hash;

	  if (this._received_tx.get(transactionHash)) {
	    // De-duplicate transactions
	    return;
	  }

	  if (message.validated) {
	    this._received_tx.set(transactionHash, true);
	  }

	  if (this.trace) {
	    log.info('tx:', message);
	  }

	  var metadata = message.meta || message.metadata;

	  if (metadata) {
	    // Process metadata
	    message.mmeta = new Meta(metadata);

	    // Pass the event on to any related Account objects
	    message.mmeta.getAffectedAccounts().forEach(function (account) {
	      if (this._accounts[account]) {
	        this._accounts[account].notify(message);
	      }
	    }, this);

	    // Pass the event on to any related OrderBooks
	    message.mmeta.getAffectedBooks().forEach(function (book) {
	      if (this._books[book]) {
	        this._books[book].notify(message);
	      }
	    }, this);
	  } else {
	    // Transaction could be from proposed transaction stream
	    // XX
	    ['Account', 'Destination'].forEach(function (prop) {
	      if (this._accounts[message.transaction[prop]]) {
	        this._accounts[message.transaction[prop]].notify(message);
	      }
	    }, this);
	  }

	  this.emit('transaction', message, server);
	  this.emit('transaction_all', message, server);
	};

	/**
	 * Handle server path_find event
	 *
	 * @param {Object} message
	 */

	Remote.prototype._handlePathFind = function (message, server) {
	  // Pass the event to the currently open PathFind object
	  if (this._cur_path_find) {
	    this._cur_path_find.notify_update(message);
	  }

	  this.emit('path_find_all', message, server);
	};

	/**
	 * Returns the current ledger hash
	 *
	 * @return {String} ledger hash
	 */

	Remote.prototype.getLedgerHash = function () {
	  return this._ledger_hash;
	};

	/**
	 * Set primary server. Primary server will be selected
	 * to handle requested regardless of its internally-tracked
	 * priority score
	 *
	 * @param {Server} server
	 */

	Remote.prototype._setPrimaryServer = Remote.prototype.setPrimaryServer = function (server) {
	  if (this._primary_server) {
	    this._primary_server._primary = false;
	  }
	  this._primary_server = server;
	  this._primary_server._primary = true;
	};

	/**
	 * Get connected state
	 *
	 * @return {Boolean} connected
	 */

	Remote.prototype.isConnected = function () {
	  return this._connected;
	};

	/**
	 * Get array of connected servers
	 */

	Remote.prototype.getConnectedServers = function () {
	  return this._servers.filter(function (server) {
	    return server.isConnected();
	  });
	};

	/**
	 * Select a server to handle a request. Servers are
	 * automatically prioritized
	 */

	Remote.prototype._getServer = Remote.prototype.getServer = function () {
	  if (this._primary_server && this._primary_server.isConnected()) {
	    return this._primary_server;
	  }

	  if (!this._servers.length) {
	    return null;
	  }

	  var connectedServers = this.getConnectedServers();
	  if (connectedServers.length === 0 || !connectedServers[0]) {
	    return null;
	  }

	  var server = connectedServers[0];
	  var cScore = server._score + server._fee;

	  for (var i = 1; i < connectedServers.length; i++) {
	    var _server = connectedServers[i];
	    var bScore = _server._score + _server._fee;
	    if (bScore < cScore) {
	      server = _server;
	      cScore = bScore;
	    }
	  }

	  return server;
	};

	/**
	 * Send a request. This method is called internally by Request
	 * objects. Each Request contains a reference to Remote, and
	 * Request.request calls Request.remote.request
	 *
	 * @param {Request} request
	 */

	Remote.prototype.request = function (request) {
	  if (typeof request === 'string') {
	    var prefix = /^request_/.test(request) ? '' : 'request_';
	    var requestName = prefix + request;
	    var methodName = requestName.replace(/(\_\w)/g, function (m) {
	      return m[1].toUpperCase();
	    });

	    if (typeof this[methodName] === 'function') {
	      var args = _.slice(arguments, 1);
	      return this[methodName].apply(this, args);
	    }

	    throw new Error('Command does not exist: ' + requestName);
	  }

	  if (!(request instanceof Request)) {
	    throw new Error('Argument is not a Request');
	  }

	  if (!this._servers.length) {
	    return request.emit('error', new Error('No servers available'));
	  }
	  if (!this.isConnected()) {
	    return this.once('connect', this.request.bind(this, request));
	  }
	  if (request.server === null) {
	    return request.emit('error', new Error('Server does not exist'));
	  }

	  var server = request.server || this.getServer();
	  if (server) {
	    server._request(request);
	  } else {
	    request.emit('error', new Error('No servers available'));
	  }
	};

	/**
	 * Request ping
	 *
	 * @param [String] server host
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.ping = Remote.prototype.requestPing = function (host, callback_) {
	  var request = new Request(this, 'ping');
	  var callback = callback_;

	  switch (typeof host) {
	    case 'function':
	      callback = host;
	      break;
	    case 'string':
	      request.setServer(host);
	      break;
	  }

	  var then = Date.now();

	  request.once('success', function () {
	    request.emit('pong', Date.now() - then);
	  });

	  request.callback(callback, 'pong');

	  return request;
	};

	/**
	 * Request server_info
	 *
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestServerInfo = function (callback) {
	  return new Request(this, 'server_info').callback(callback);
	};

	/**
	 * Request ledger
	 *
	 * @return {Request} request
	 */

	Remote.prototype.requestLedger = function (options, callback_) {
	  // XXX This is a bad command. Some variants don't scale.
	  // XXX Require the server to be trusted.
	  // utils.assert(this.trusted);

	  var request = new Request(this, 'ledger');
	  var callback = callback_;

	  switch (typeof options) {
	    case 'undefined':
	      break;
	    case 'function':
	      callback = options;
	      break;

	    case 'object':
	      if (!options) {
	        break;
	      }

	      _Object$keys(options).forEach(function (o) {
	        switch (o) {
	          case 'full':
	          case 'expand':
	          case 'transactions':
	          case 'accounts':
	            request.message[o] = options[o] ? true : false;
	            break;
	          case 'ledger':
	            request.selectLedger(options.ledger);
	            break;
	          case 'ledger_index':
	          case 'ledger_hash':
	            request.message[o] = options[o];
	            break;
	          case 'closed':
	          case 'current':
	          case 'validated':
	            request.message.ledger_index = o;
	            break;
	        }
	      }, options);
	      break;

	    default:
	      request.selectLedger(options);
	      break;
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Request ledger_closed
	 *
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestLedgerClosed = Remote.prototype.requestLedgerHash = function (callback) {
	  // utils.assert(this.trusted);   // If not trusted, need to check proof.
	  return new Request(this, 'ledger_closed').callback(callback);
	};

	/**
	 * Request ledger_header
	 *
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestLedgerHeader = function (callback) {
	  return new Request(this, 'ledger_header').callback(callback);
	};

	/**
	 * Request ledger_current
	 *
	 * Get the current proposed ledger entry. May be closed (and revised)
	 * at any time (even before returning).
	 *
	 * Only for unit testing.
	 *
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestLedgerCurrent = function (callback) {
	  return new Request(this, 'ledger_current').callback(callback);
	};

	/**
	 * Request ledger_data
	 *
	 * Get the contents of a specified ledger
	 *
	 * @param {Object} options
	 * @property {Boolean} [options.binary]- Flag which determines if rippled
	 * returns binary or parsed JSON
	 * @property {String|Number} [options.ledger] - Hash or sequence of a ledger
	 * to get contents for
	 * @property {Number} [options.limit] - Number of contents to retrieve
	 * from the ledger
	 * @property {Function} callback
	 *
	 * @callback
	 * @param {Error} error
	 * @param {LedgerData} ledgerData
	 *
	 * @return {Request} request
	 */

	Remote.prototype.requestLedgerData = function (options, callback) {
	  var request = new Request(this, 'ledger_data');

	  request.message.binary = options.binary !== false;
	  request.selectLedger(options.ledger);
	  request.message.limit = options.limit;

	  request.once('success', function (res) {
	    if (options.binary === false) {
	      request.emit('state', res);
	      return;
	    }

	    function iterator(ledgerData, next) {
	      async.setImmediate(function () {
	        next(null, Remote.parseBinaryLedgerData(ledgerData));
	      });
	    }

	    function complete(err, state) {
	      if (err) {
	        request.emit('error', err);
	      } else {
	        res.state = state;
	        request.emit('state', res);
	      }
	    }

	    async.mapSeries(res.state, iterator, complete);
	  });

	  request.callback(callback, 'state');

	  return request;
	};

	/**
	 * Request ledger_entry
	 *
	 * @param [String] type
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestLedgerEntry = function (type, callback_) {
	  // utils.assert(this.trusted);
	  // If not trusted, need to check proof, maybe talk packet protocol.

	  var self = this;

	  var request = new Request(this, 'ledger_entry');
	  var callback = _.isFunction(type) ? type : callback_;

	  // Transparent caching. When .request() is invoked, look in the Remote object
	  // for the result.  If not found, listen, cache result, and emit it.
	  //
	  // Transparent caching:
	  if (type === 'account_root') {
	    request.request_default = request.request;

	    request.request = function () {
	      // Intercept default request.
	      var bDefault = true;

	      if (!self._ledger_hash && type === 'account_root') {
	        var cache = self.ledgers.current.account_root;

	        if (!cache) {
	          cache = self.ledgers.current.account_root = {};
	        }

	        var node = self.ledgers.current.account_root[request.message.account_root];

	        if (node) {
	          // Emulate fetch of ledger entry.
	          // YYY Missing lots of fields.
	          request.emit('success', { node: node });
	          bDefault = false;
	        } else {
	          // Was not cached.
	          // XXX Only allow with trusted mode.  Must sync response with advance
	          switch (type) {
	            case 'account_root':
	              request.once('success', function (message) {
	                // Cache node.
	                self.ledgers.current.account_root[message.node.Account] = message.node;
	              });
	              break;

	            default:
	            // This type not cached.
	          }
	        }
	      }

	      if (bDefault) {
	        request.request_default();
	      }
	    };
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Request subscribe
	 *
	 * @param {Array} streams
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestSubscribe = function (streams, callback) {
	  var request = new Request(this, 'subscribe');

	  if (streams) {
	    request.message.streams = Array.isArray(streams) ? streams : [streams];
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Request usubscribe
	 *
	 * @param {Array} streams
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestUnsubscribe = function (streams, callback) {
	  var request = new Request(this, 'unsubscribe');

	  if (streams) {
	    request.message.streams = Array.isArray(streams) ? streams : [streams];
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Request transaction_entry
	 *
	 * @param {Object} options -
	 * @param {String} [options.transaction] -  hash
	 * @param {String|Number} [options.ledger='validated'] - hash or sequence
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestTransactionEntry = function (options, callback) {
	  var request = new Request(this, 'transaction_entry');
	  request.txHash(options.hash);
	  request.selectLedger(options.ledger, 'validated');
	  request.callback(callback);
	  return request;
	};

	/**
	 * Request tx
	 *
	 * @param {Object|String} hash
	 * @property {String} hash.hash           - Transaction hash
	 * @property {Boolean} [hash.binary=true] - Flag which determines if rippled
	 * returns binary or parsed JSON
	 * @param [Function] callback
	 * @return {Request} request
	 */

	Remote.prototype.requestTransaction = function (options, callback) {
	  var request = new Request(this, 'tx');
	  request.message.binary = options.binary !== false;
	  request.message.transaction = options.hash;

	  request.once('success', function (res) {
	    if (options.binary === false) {
	      request.emit('transaction', res);
	    } else {
	      request.emit('transaction', Remote.parseBinaryTransaction(res));
	    }
	  });

	  request.callback(callback, 'transaction');

	  return request;
	};

	/**
	 * Account Request
	 *
	 * Optional paging with limit and marker options
	 * supported in rippled for 'account_lines' and 'account_offers'
	 *
	 * The paged responses aren't guaranteed to be reliable between
	 * ledger closes. You have to supply a ledger_index or ledger_hash
	 * when paging to ensure a complete response
	 *
	 * @param {String} command - request command, e.g. 'account_lines'
	 * @param {Object} options - all optional
	 *   @param {String} account - ripple address
	 *   @param {String} peer - ripple address
	 *   @param [String|Number] ledger identifier
	 *   @param [Number] limit - max results per response
	 *   @param {String} marker - start position in response paging
	 * @param [Function] callback
	 * @return {Request}
	 * @throws {Error} if a marker is provided, but no ledger_index or ledger_hash
	 */

	Remote.accountRequest = function (command, options, callback) {
	  if (options.marker) {
	    if (!(Number(options.ledger) > 0) && !UInt256.is_valid(options.ledger)) {
	      throw new Error('A ledger_index or ledger_hash must be provided when using a marker');
	    }
	  }

	  var request = new Request(this, command);

	  request.message.account = UInt160.json_rewrite(options.account);
	  request.selectLedger(options.ledger);

	  if (UInt160.is_valid(options.peer)) {
	    request.message.peer = UInt160.json_rewrite(options.peer);
	  }

	  if (!isNaN(options.limit)) {
	    var _limit = Number(options.limit);

	    // max for 32-bit unsigned int is 4294967295
	    // we'll clamp to 1e9
	    if (_limit > 1e9) {
	      _limit = 1e9;
	    }
	    // min for 32-bit unsigned int is 0
	    // we'll clamp to 0
	    if (_limit < 0) {
	      _limit = 0;
	    }

	    request.message.limit = _limit;
	  }

	  if (options.marker) {
	    request.message.marker = options.marker;
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Request account_info
	 *
	 * @param {Object} options
	 *   @param {String} account - ripple address
	 *   @param {String} peer - ripple address
	 *   @param [String|Number] ledger identifier
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestAccountInfo = function () {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var options = ['account_info'].concat(args);
	  return Remote.accountRequest.apply(this, options);
	};

	/**
	 * Request account_currencies
	 *
	 * @param {Object} options
	 *   @param {String} account - ripple address
	 *   @param {String} peer - ripple address
	 *   @param [String|Number] ledger identifier
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestAccountCurrencies = function () {
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  var options = ['account_currencies'].concat(args);
	  return Remote.accountRequest.apply(this, options);
	};

	/**
	 * Request account_lines
	 *
	 * Requests for account_lines support paging, provide a limit and marker
	 * to page through responses.
	 *
	 * The paged responses aren't guaranteed to be reliable between
	 * ledger closes. You have to supply a ledger_index or ledger_hash
	 * when paging to ensure a complete response
	 *
	 * @param {Object} options
	 *   @param {String} account - ripple address
	 *   @param {String} peer - ripple address
	 *   @param [String|Number] ledger identifier
	 *   @param [Number] limit - max results per response
	 *   @param {String} marker - start position in response paging
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestAccountLines = function () {
	  // XXX Does this require the server to be trusted?
	  // utils.assert(this.trusted);
	  var options = ['account_lines'];

	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }

	  if (_.isPlainObject(args[0])) {
	    options = options.concat(args);
	  } else {
	    var account = args[0];
	    var peer = args[1];
	    var ledger = args[2];

	    options = options.concat([account, ledger, peer].concat(_toConsumableArray(args.slice(3))));
	  }

	  return Remote.accountRequest.apply(this, options);
	};

	/**
	 * Request account_offers
	 *
	 * Requests for account_offers support paging, provide a limit and marker
	 * to page through responses.
	 *
	 * The paged responses aren't guaranteed to be reliable between
	 * ledger closes. You have to supply a ledger_index or ledger_hash
	 * when paging to ensure a complete response
	 *
	 * @param {Object} options
	 *   @param {String} account - ripple address
	 *   @param [String|Number] ledger identifier
	 *   @param [Number] limit - max results per response
	 *   @param {String} marker - start position in response paging
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestAccountOffers = function () {
	  for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    args[_key4] = arguments[_key4];
	  }

	  var options = ['account_offers'].concat(args);
	  return Remote.accountRequest.apply(this, options);
	};

	/**
	 * Request account_tx
	 *
	 * @param {Object} options
	 *
	 *    @param {String} account
	 *    @param [Number] ledger_index_min defaults to -1
	 *    @param [Number] ledger_index_max defaults to -1
	 *    @param [Boolean] binary, defaults to true
	 *    @param [Boolean] parseBinary, defaults to true
	 *    @param [Boolean] count, defaults to false
	 *    @param [Boolean] descending, defaults to false
	 *    @param [Number] offset, defaults to 0
	 *    @param [Number] limit
	 *
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestAccountTransactions = Remote.prototype.requestAccountTx = function (options, callback) {
	  // XXX Does this require the server to be trusted?
	  // utils.assert(this.trusted);

	  var request = new Request(this, 'account_tx');

	  options.binary = options.binary !== false;

	  if (options.min_ledger !== undefined) {
	    options.ledger_index_min = options.min_ledger;
	  }

	  if (options.max_ledger !== undefined) {
	    options.ledger_index_max = options.max_ledger;
	  }

	  if (options.binary && options.parseBinary === undefined) {
	    options.parseBinary = true;
	  }

	  _Object$keys(options).forEach(function (o) {
	    switch (o) {
	      case 'account':
	      case 'ledger_index_min': // earliest
	      case 'ledger_index_max': // latest
	      case 'binary': // false
	      case 'count': // false
	      case 'descending': // false
	      case 'offset': // 0
	      case 'limit':

	      // extended account_tx
	      case 'forward': // false
	      case 'marker':
	        request.message[o] = this[o];
	        break;
	    }
	  }, options);

	  request.once('success', function (res) {
	    if (!options.parseBinary) {
	      request.emit('transactions', res);
	      return;
	    }

	    function iterator(transaction, next) {
	      async.setImmediate(function () {
	        next(null, Remote.parseBinaryAccountTransaction(transaction));
	      });
	    }

	    function complete(err, transactions) {
	      if (err) {
	        request.emit('error', err);
	      } else {
	        res.transactions = transactions;
	        request.emit('transactions', res);
	      }
	    }

	    async.mapSeries(res.transactions, iterator, complete);
	  });

	  request.callback(callback, 'transactions');

	  return request;
	};

	/**
	 * @param {Object} transaction
	 * @return {Transaction}
	 */

	Remote.parseBinaryAccountTransaction = function (transaction) {
	  var tx_obj = new SerializedObject(transaction.tx_blob);
	  var tx_obj_json = tx_obj.to_json();
	  var meta = new SerializedObject(transaction.meta).to_json();

	  var tx_result = {
	    validated: transaction.validated
	  };

	  tx_result.meta = meta;
	  tx_result.tx = tx_obj_json;
	  tx_result.tx.hash = tx_obj.hash(hashprefixes.HASH_TX_ID).to_hex();
	  tx_result.tx.ledger_index = transaction.ledger_index;
	  tx_result.tx.inLedger = transaction.ledger_index;

	  if (typeof meta.DeliveredAmount === 'object') {
	    tx_result.meta.delivered_amount = meta.DeliveredAmount;
	  } else {
	    switch (typeof tx_obj_json.Amount) {
	      case 'string':
	      case 'object':
	        tx_result.meta.delivered_amount = tx_obj_json.Amount;
	        break;
	    }
	  }

	  return tx_result;
	};

	Remote.parseBinaryTransaction = function (transaction) {
	  var tx_obj = new SerializedObject(transaction.tx).to_json();
	  var meta = new SerializedObject(transaction.meta).to_json();

	  var tx_result = tx_obj;

	  tx_result.date = transaction.date;
	  tx_result.hash = transaction.hash;
	  tx_result.inLedger = transaction.inLedger;
	  tx_result.ledger_index = transaction.ledger_index;
	  tx_result.meta = meta;
	  tx_result.validated = transaction.validated;

	  switch (typeof meta.DeliveredAmount) {
	    case 'string':
	    case 'object':
	      tx_result.meta.delivered_amount = meta.DeliveredAmount;
	      break;
	    default:
	      switch (typeof tx_obj.Amount) {
	        case 'string':
	        case 'object':
	          tx_result.meta.delivered_amount = tx_obj.Amount;
	          break;
	      }
	  }

	  return tx_result;
	};

	/**
	 * Parse binary ledger state data
	 *
	 * @param {Object} ledgerData
	 * @property {String} ledgerData.data
	 * @property {String} ledgerData.index
	 *
	 * @return {State}
	 */

	Remote.parseBinaryLedgerData = function (ledgerData) {
	  var data = new SerializedObject(ledgerData.data).to_json();
	  data.index = ledgerData.index;
	  return data;
	};

	/**
	 * Request the overall transaction history.
	 *
	 * Returns a list of transactions that happened recently on the network. The
	 * default number of transactions to be returned is 20.
	 *
	 * @param [Number] start
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestTransactionHistory = function (options, callback) {
	  // XXX Does this require the server to be trusted?
	  // utils.assert(this.trusted);
	  var request = new Request(this, 'tx_history');
	  request.message.start = options.start;
	  request.callback(callback);

	  return request;
	};

	/**
	 * Request book_offers
	 *
	 * @param {Object} options
	 *   @param {Object} options.gets - taker_gets with issuer and currency
	 *   @param {Object} options.pays - taker_pays with issuer and currency
	 *   @param {String} [options.taker]
	 *   @param {String} [options.ledger]
	 *   @param {String|Number} [options.limit]
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestBookOffers = function (options, callback) {
	  var gets = options.gets;
	  var pays = options.pays;
	  var taker = options.taker;
	  var ledger = options.ledger;
	  var limit = options.limit;

	  var request = new Request(this, 'book_offers');

	  request.message.taker_gets = {
	    currency: Currency.json_rewrite(gets.currency, { force_hex: true })
	  };

	  if (!Currency.from_json(request.message.taker_gets.currency).is_native()) {
	    request.message.taker_gets.issuer = UInt160.json_rewrite(gets.issuer);
	  }

	  request.message.taker_pays = {
	    currency: Currency.json_rewrite(pays.currency, { force_hex: true })
	  };

	  if (!Currency.from_json(request.message.taker_pays.currency).is_native()) {
	    request.message.taker_pays.issuer = UInt160.json_rewrite(pays.issuer);
	  }

	  request.message.taker = taker ? taker : UInt160.ACCOUNT_ONE;
	  request.selectLedger(ledger);

	  if (!isNaN(limit)) {
	    var _limit = Number(limit);

	    // max for 32-bit unsigned int is 4294967295
	    // we'll clamp to 1e9
	    if (_limit > 1e9) {
	      _limit = 1e9;
	    }
	    // min for 32-bit unsigned int is 0
	    // we'll clamp to 0
	    if (_limit < 0) {
	      _limit = 0;
	    }

	    request.message.limit = _limit;
	  }

	  request.callback(callback);
	  return request;
	};

	/**
	 * Request wallet_accounts
	 *
	 * @param {String} seed
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestWalletAccounts = function (options, callback) {
	  utils.assert(this.trusted); // Don't send secrets.
	  var request = new Request(this, 'wallet_accounts');
	  request.message.seed = options.seed;
	  request.callback(callback);

	  return request;
	};

	/**
	 * Request sign
	 *
	 * @param {String} secret
	 * @param {Object} tx_json
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestSign = function (options, callback) {
	  utils.assert(this.trusted); // Don't send secrets.

	  var request = new Request(this, 'sign');
	  request.message.secret = options.secret;
	  request.message.tx_json = options.tx_json;
	  request.callback(callback);

	  return request;
	};

	/**
	 * Request submit
	 *
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestSubmit = function (callback) {
	  return new Request(this, 'submit').callback(callback);
	};

	/**
	 * Create a subscribe request with current subscriptions.
	 *
	 * Other classes can add their own subscriptions to this request by listening
	 * to the server_subscribe event.
	 *
	 * This function will create and return the request, but not submit it.
	 *
	 * @param [Function] callback
	 * @api private
	 */

	Remote.prototype._serverPrepareSubscribe = function (server, callback_) {
	  var self = this;
	  var feeds = ['ledger', 'server'];
	  var callback = _.isFunction(server) ? server : callback_;

	  if (this._transaction_listeners) {
	    feeds.push('transactions');
	  }

	  var request = this.requestSubscribe(feeds);

	  function serverSubscribed(message) {
	    self._stand_alone = Boolean(message.stand_alone);
	    self._testnet = Boolean(message.testnet);
	    self._handleLedgerClosed(message, server);
	    self.emit('subscribed');
	  }

	  request.on('error', function (err) {
	    if (self.trace) {
	      log.info('Initial server subscribe failed', err);
	    }
	  });

	  request.once('success', serverSubscribed);

	  self.emit('prepare_subscribe', request);

	  request.callback(callback, 'subscribed');

	  return request;
	};

	/**
	 * For unit testing: ask the remote to accept the current ledger.
	 * To be notified when the ledger is accepted, server_subscribe() then listen
	 * to 'ledger_hash' events. A good way to be notified of the result of this is:
	 * remote.on('ledger_closed', function(ledger_closed, ledger_index) { ... } );
	 *
	 * @param [Function] callback
	 */

	Remote.prototype.ledgerAccept = Remote.prototype.requestLedgerAccept = function (callback) {
	  /* eslint-disable consistent-return */
	  var request = new Request(this, 'ledger_accept');

	  if (!this._stand_alone) {
	    // XXX This should emit error on the request
	    this.emit('error', new RippleError('notStandAlone'));
	    return;
	  }

	  this.once('ledger_closed', function (ledger) {
	    request.emit('ledger_closed', ledger);
	  });

	  request.callback(callback, 'ledger_closed');
	  request.request();

	  return request;
	  /* eslint-enable consistent-return */
	};

	/**
	 * Account root request abstraction
	 *
	 * @this Remote
	 * @api private
	 */

	Remote.accountRootRequest = function (command, filter, options, callback) {
	  var request = this.requestLedgerEntry('account_root');
	  request.accountRoot(options.account);
	  request.selectLedger(options.ledger);

	  request.once('success', function (message) {
	    request.emit(command, filter(message));
	  });

	  request.callback(callback, command);

	  return request;
	};

	/**
	 * Request account balance
	 *
	 * @param {String} account
	 * @param [String|Number] ledger
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestAccountBalance = function () {
	  function responseFilter(message) {
	    return Amount.from_json(message.node.Balance);
	  }

	  for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	    args[_key5] = arguments[_key5];
	  }

	  var options = ['account_balance', responseFilter].concat(args);
	  return Remote.accountRootRequest.apply(this, options);
	};

	/**
	 * Request account flags
	 *
	 * @param {String} account
	 * @param [String|Number] ledger
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestAccountFlags = function () {
	  function responseFilter(message) {
	    return message.node.Flags;
	  }

	  for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	    args[_key6] = arguments[_key6];
	  }

	  var options = ['account_flags', responseFilter].concat(args);
	  return Remote.accountRootRequest.apply(this, options);
	};

	/**
	 * Request owner count
	 *
	 * @param {String} account
	 * @param [String|Number] ledger
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestOwnerCount = function () {
	  function responseFilter(message) {
	    return message.node.OwnerCount;
	  }

	  for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	    args[_key7] = arguments[_key7];
	  }

	  var options = ['owner_count', responseFilter].concat(args);
	  return Remote.accountRootRequest.apply(this, options);
	};

	/**
	 * Get an account by accountID (address)
	 *
	 *
	 * @param {String} account
	 * @return {Account}
	 */

	Remote.prototype.getAccount = function (accountID) {
	  return this._accounts[UInt160.json_rewrite(accountID)];
	};

	/**
	 * Add an account by accountID (address)
	 *
	 * @param {String} account
	 * @return {Account}
	 */

	Remote.prototype.addAccount = function (accountID) {
	  var account = new Account(this, accountID);

	  if (account.isValid()) {
	    this._accounts[accountID] = account;
	  }

	  return account;
	};

	/**
	 * Add an account if it does not exist, return the
	 * account by accountID (address)
	 *
	 * @param {String} account
	 * @return {Account}
	 */

	Remote.prototype.account = Remote.prototype.findAccount = function (accountID) {
	  var account = this.getAccount(accountID);
	  return account ? account : this.addAccount(accountID);
	};

	/**
	 * Create a pathfind
	 *
	 * @param {Object} options -
	 * @param {Function} callback -
	 * @return {PathFind} -
	 */
	Remote.prototype.createPathFind = function (options, callback) {
	  if (this._cur_path_find !== null) {
	    this._queued_path_finds.push({ options: options, callback: callback });
	    return null;
	  }

	  var pathFind = new PathFind(this, options.src_account, options.dst_account, options.dst_amount, options.src_currencies);

	  if (this._cur_path_find) {
	    this._cur_path_find.notify_superceded();
	  }

	  if (callback) {
	    pathFind.on('update', function (data) {
	      if (data.full_reply) {
	        pathFind.close();
	        callback(null, data);
	      }
	    });
	    pathFind.on('error', callback);
	  }

	  this._cur_path_find = pathFind;
	  pathFind.create();
	  return pathFind;
	};

	Remote.prepareTrade = function (currency, issuer) {
	  var suffix = Currency.from_json(currency).is_native() ? '' : '/' + issuer;
	  return currency + suffix;
	};

	/**
	 * Create an OrderBook if it does not exist, return
	 * the order book
	 *
	 * @param {Object} options
	 * @return {OrderBook}
	 */

	Remote.prototype.book = Remote.prototype.createOrderBook = function (options) {
	  var gets = Remote.prepareTrade(options.currency_gets, options.issuer_gets);
	  var pays = Remote.prepareTrade(options.currency_pays, options.issuer_pays);
	  var key = gets + ':' + pays;

	  if (this._books.hasOwnProperty(key)) {
	    return this._books[key];
	  }

	  var book = new OrderBook(this, options.currency_gets, options.issuer_gets, options.currency_pays, options.issuer_pays, key);

	  if (book.is_valid()) {
	    this._books[key] = book;
	  }

	  return book;
	};

	/**
	 * Return the next account sequence
	 *
	 * @param {String} account
	 * @param {String} sequence modifier (ADVANCE or REWIND)
	 * @return {Number} sequence
	 */

	Remote.prototype.accountSeq = Remote.prototype.getAccountSequence = function (account_, advance) {
	  var account = UInt160.json_rewrite(account_);
	  var accountInfo = this.accounts[account];

	  if (!accountInfo) {
	    return NaN;
	  }

	  var seq = accountInfo.seq;
	  var change = ({ ADVANCE: 1, REWIND: -1 })[advance.toUpperCase()] || 0;

	  accountInfo.seq += change;

	  return seq;
	};

	/**
	 * Set account sequence
	 *
	 * @param {String} account
	 * @param {Number} sequence
	 */

	Remote.prototype.setAccountSequence = Remote.prototype.setAccountSeq = function (account_, sequence) {
	  var account = UInt160.json_rewrite(account_);

	  if (!this.accounts.hasOwnProperty(account)) {
	    this.accounts[account] = {};
	  }

	  this.accounts[account].seq = sequence;
	};

	/**
	 * Refresh an account's sequence from server
	 *
	 * @param {String} account
	 * @param [String|Number] ledger
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.accountSeqCache = function (options, callback) {
	  if (!this.accounts.hasOwnProperty(options.account)) {
	    this.accounts[options.account] = {};
	  }

	  var account_info = this.accounts[options.account];
	  var request = account_info.caching_seq_request;

	  function accountRootSuccess(message) {
	    delete account_info.caching_seq_request;

	    var seq = message.node.Sequence;
	    account_info.seq = seq;

	    request.emit('success_cache', message);
	  }

	  function accountRootError(message) {
	    delete account_info.caching_seq_request;

	    request.emit('error_cache', message);
	  }

	  if (!request) {
	    request = this.requestLedgerEntry('account_root');
	    request.accountRoot(options.account);

	    if (!_.isUndefined(options.ledger)) {
	      request.selectLedger(options.ledger);
	    }

	    request.once('success', accountRootSuccess);
	    request.once('error', accountRootError);

	    account_info.caching_seq_request = request;
	  }

	  request.callback(callback, 'success_cache', 'error_cache');

	  return request;
	};

	/**
	 * Mark an account's root node as dirty.
	 *
	 * @param {String} account
	 */

	Remote.prototype.dirtyAccountRoot = function (account_) {
	  var account = UInt160.json_rewrite(account_);
	  delete this.ledgers.current.account_root[account];
	};

	/**
	 * Get an Offer from the ledger
	 *
	 * @param {Object} options
	 *   @param {String|Number} options.ledger
	 *   @param {String} [options.account]  - Required unless using options.index
	 *   @param {Number} [options.sequence] - Required unless using options.index
	 *   @param {String} [options.index]    - Required only if options.account and
	 *   options.sequence not provided
	 *
	 * @callback
	 * @param {Error} error
	 * @param {Object} message
	 *
	 * @return {Request}
	 */

	Remote.prototype.requestOffer = function (options, callback) {
	  var request = this.requestLedgerEntry('offer');

	  if (options.account && options.sequence) {
	    request.offerId(options.account, options.sequence);
	  } else if (options.index) {
	    request.offerIndex(options.index);
	  }

	  request.ledgerSelect(options.ledger);

	  request.once('success', function (res) {
	    request.emit('offer', res);
	  });

	  request.callback(callback, 'offer');

	  return request;
	};

	/**
	 * Get an account's balance
	 *
	 * @param {String} account
	 * @param [String] issuer
	 * @param [String] currency
	 * @param [String|Number] ledger
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestRippleBalance = function (options, callback) {
	  // YYY Could be cached per ledger.
	  var request = this.requestLedgerEntry('ripple_state');
	  request.rippleState(options.account, options.issuer, options.currency);

	  if (!_.isUndefined(options.ledger)) {
	    request.selectLedger(options.ledger);
	  }

	  function rippleState(message) {
	    var node = message.node;
	    var lowLimit = Amount.from_json(node.LowLimit);
	    var highLimit = Amount.from_json(node.HighLimit);

	    // The amount the low account holds of issuer.
	    var balance = Amount.from_json(node.Balance);

	    // accountHigh implies for account: balance is negated.  highLimit is the
	    // limit set by account.
	    var accountHigh = UInt160.from_json(options.account).equals(highLimit.issuer());

	    request.emit('ripple_state', {
	      account_balance: (accountHigh ? balance.negate() : balance.clone()).parse_issuer(options.account),
	      peer_balance: (!accountHigh ? balance.negate() : balance.clone()).parse_issuer(options.issuer),
	      account_limit: (accountHigh ? highLimit : lowLimit).clone().parse_issuer(options.issuer),
	      peer_limit: (!accountHigh ? highLimit : lowLimit).clone().parse_issuer(options.account),
	      account_quality_in: accountHigh ? node.HighQualityIn : node.LowQualityIn,
	      peer_quality_in: !accountHigh ? node.HighQualityIn : node.LowQualityIn,
	      account_quality_out: accountHigh ? node.HighQualityOut : node.LowQualityOut,
	      peer_quality_out: !accountHigh ? node.HighQualityOut : node.LowQualityOut
	    });
	  }

	  request.once('success', rippleState);
	  request.callback(callback, 'ripple_state');

	  return request;
	};

	Remote.prepareCurrency = Remote.prepareCurrencies = function (currency) {
	  var newCurrency = {};

	  if (currency.hasOwnProperty('issuer')) {
	    newCurrency.issuer = UInt160.json_rewrite(currency.issuer);
	  }

	  if (currency.hasOwnProperty('currency')) {
	    newCurrency.currency = Currency.json_rewrite(currency.currency, { force_hex: true });
	  }

	  return newCurrency;
	};

	/**
	 * Request ripple_path_find
	 *
	 * @param {Object} options
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestRipplePathFind = function (options, callback) {
	  var request = new Request(this, 'ripple_path_find');

	  request.message.source_account = UInt160.json_rewrite(options.source_account);

	  request.message.destination_account = UInt160.json_rewrite(options.destination_account);

	  request.message.destination_amount = Amount.json_rewrite(options.destination_amount);

	  if (Array.isArray(options.source_currencies)) {
	    request.message.source_currencies = options.source_currencies.map(Remote.prepareCurrency);
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Request path_find/create
	 *
	 * @param {Object} options
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestPathFindCreate = function (options, callback) {
	  var request = new Request(this, 'path_find');
	  request.message.subcommand = 'create';

	  request.message.source_account = UInt160.json_rewrite(options.source_account);

	  request.message.destination_account = UInt160.json_rewrite(options.destination_account);

	  request.message.destination_amount = Amount.json_rewrite(options.destination_amount);

	  if (Array.isArray(options.source_currencies)) {
	    request.message.source_currencies = options.source_currencies.map(Remote.prepareCurrency);
	  }

	  request.callback(callback);
	  return request;
	};

	/**
	 * Request path_find/close
	 *
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestPathFindClose = function (callback) {
	  var request = new Request(this, 'path_find');

	  request.message.subcommand = 'close';
	  request.callback(callback);
	  this._cur_path_find = null;
	  if (this._queued_path_finds.length > 0) {
	    var pathfind = this._queued_path_finds.shift();
	    this.createPathFind(pathfind.options, pathfind.callback);
	  }

	  return request;
	};

	/**
	 * Request unl_list
	 *
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestUnlList = function (callback) {
	  return new Request(this, 'unl_list').callback(callback);
	};

	/**
	 * Request unl_add
	 *
	 * @param {String} address
	 * @param {String} comment
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestUnlAdd = function (address, comment, callback) {
	  var request = new Request(this, 'unl_add');

	  request.message.node = address;

	  if (comment) {
	    // note is not specified anywhere, should remove?
	    request.message.comment = undefined;
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Request unl_delete
	 *
	 * @param {String} node
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestUnlDelete = function (node, callback) {
	  var request = new Request(this, 'unl_delete');

	  request.message.node = node;
	  request.callback(callback);

	  return request;
	};

	/**
	 * Request peers
	 *
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestPeers = function (callback) {
	  return new Request(this, 'peers').callback(callback);
	};

	/**
	 * Request connect
	 *
	 * @param {String} ip
	 * @param {Number} port
	 * @param [Function] callback
	 * @return {Request}
	 */

	Remote.prototype.requestConnect = function (ip, port, callback) {
	  var request = new Request(this, 'connect');

	  request.message.ip = ip;

	  if (port) {
	    request.message.port = port;
	  }

	  request.callback(callback);

	  return request;
	};

	/**
	 * Create a Transaction
	 *
	 * @param {String} TransactionType
	 * @param {Object} options
	 * @return {Transaction}
	 */

	Remote.prototype.transaction = Remote.prototype.createTransaction = function (type) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var transaction = new Transaction(this);

	  if (arguments.length === 0) {
	    // Fallback
	    return transaction;
	  }

	  assert.strictEqual(typeof type, 'string', 'TransactionType must be a string');

	  var constructorMap = {
	    Payment: transaction.payment,
	    AccountSet: transaction.accountSet,
	    TrustSet: transaction.trustSet,
	    OfferCreate: transaction.offerCreate,
	    OfferCancel: transaction.offerCancel,
	    SetRegularKey: transaction.setRegularKey
	  };

	  var transactionConstructor = constructorMap[type];

	  if (!transactionConstructor) {
	    throw new Error('TransactionType must be a valid transaction type');
	  }

	  return transactionConstructor.call(transaction, options);
	};

	/**
	 * Calculate a transaction fee for a number of tx fee units.
	 *
	 * This takes into account the last known network and local load fees.
	 *
	 * @param {Number} fee units
	 * @return {Amount} Final fee in XRP for specified number of fee units.
	 */

	Remote.prototype.feeTx = function (units) {
	  var server = this.getServer();

	  if (!server) {
	    throw new Error('No connected servers');
	  }

	  return server._feeTx(units);
	};

	/**
	 * Get the current recommended transaction fee unit.
	 *
	 * Multiply this value with the number of fee units in order to calculate the
	 * recommended fee for the transaction you are trying to submit.
	 *
	 * @return {Number} Recommended amount for one fee unit as float.
	 */

	Remote.prototype.feeTxUnit = function () {
	  var server = this.getServer();

	  if (!server) {
	    throw new Error('No connected servers');
	  }

	  return server._feeTxUnit();
	};

	/**
	 * Get the current recommended reserve base.
	 *
	 * Returns the base reserve with load fees and safety margin applied.
	 *
	 * @param {Number} owner count
	 * @return {Amount}
	 */

	Remote.prototype.reserve = function (owner_count) {
	  var server = this.getServer();

	  if (!server) {
	    throw new Error('No connected servers');
	  }

	  return server._reserve(owner_count);
	};

	exports.Remote = Remote;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(51);
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var util = __webpack_require__(81);
	var async = __webpack_require__(91);
	var UInt160 = __webpack_require__(11).UInt160;
	var Currency = __webpack_require__(8).Currency;
	var RippleError = __webpack_require__(16).RippleError;

	// Request events emitted:
	//  'success' : Request successful.
	//  'error'   : Request failed.
	//  'remoteError'
	//  'remoteUnexpected'
	//  'remoteDisconnected'

	/**
	 * Request
	 *
	 * @param {Remote} remote
	 * @param {String} command
	 */

	function Request(remote, command) {
	  EventEmitter.call(this);

	  this.remote = remote;
	  this.requested = false;
	  this.reconnectTimeout = 1000 * 3;
	  this.successEvent = 'success';
	  this.errorEvent = 'error';
	  this.message = {
	    command: command,
	    id: undefined
	  };
	}

	util.inherits(Request, EventEmitter);

	// Send the request to a remote.
	Request.prototype.request = function (servers, callback) {
	  this.emit('before');
	  this.callback(callback);

	  if (this.requested) {
	    return this;
	  }

	  this.requested = true;
	  this.on('error', function () {});
	  this.emit('request', this.remote);

	  if (Array.isArray(servers)) {
	    servers.forEach(function (server) {
	      this.setServer(server);
	      this.remote.request(this);
	    }, this);
	  } else {
	    this.remote.request(this);
	  }

	  return this;
	};

	function isResponseNotError(res) {
	  return typeof res === 'object' && !res.hasOwnProperty('error');
	}

	/**
	 * Broadcast request to all servers, filter responses if a function is
	 * provided. Return first response that satisfies the filter. Pre-filter
	 * requests by ledger_index (if a ledger_index is set on the request), and
	 * automatically retry servers when they reconnect--if they are expected to
	 *
	 * Whew
	 *
	 * @param [Function] fn
	 */

	Request.prototype.filter = Request.prototype.addFilter = Request.prototype.broadcast = function () {
	  var isResponseSuccess = arguments.length <= 0 || arguments[0] === undefined ? isResponseNotError : arguments[0];

	  var self = this;

	  if (!this.requested) {
	    // Defer until requested, and prevent the normal request() from executing
	    this.once('before', function () {
	      self.requested = true;
	      self.broadcast(isResponseSuccess);
	    });
	    return this;
	  }

	  var lastResponse = new Error('No servers available');
	  var connectTimeouts = {};
	  var emit = this.emit;

	  this.emit = function (event, a, b) {
	    // Proxy success/error events
	    switch (event) {
	      case 'success':
	      case 'error':
	        emit.call(self, 'proposed', a, b);
	        break;
	      default:
	        emit.apply(self, arguments);
	    }
	  };

	  function iterator(server, callback) {
	    // Iterator is called in parallel

	    if (server.isConnected()) {
	      // Listen for proxied success/error event and apply filter
	      self.once('proposed', function (res) {
	        lastResponse = res;
	        callback(isResponseSuccess(res));
	      });

	      return server._request(self);
	    }

	    // Server is disconnected but should reconnect. Wait for it to reconnect,
	    // and abort after a timeout
	    var serverID = server.getServerID();

	    function serverReconnected() {
	      clearTimeout(connectTimeouts[serverID]);
	      connectTimeouts[serverID] = null;
	      iterator(server, callback);
	    }

	    connectTimeouts[serverID] = setTimeout(function () {
	      server.removeListener('connect', serverReconnected);
	      callback(false);
	    }, self.reconnectTimeout);

	    server.once('connect', serverReconnected);
	  }

	  function complete(success) {
	    // Emit success if the filter is satisfied by any server
	    // Emit error if the filter is not satisfied by any server
	    // Include the last response
	    emit.call(self, success ? 'success' : 'error', lastResponse);
	  }

	  var servers = this.remote._servers.filter(function (server) {
	    // Pre-filter servers that are disconnected and should not reconnect
	    return (server.isConnected() || server._shouldConnect) && (
	    // Pre-filter servers that do not contain the ledger in request
	    !self.message.hasOwnProperty('ledger_index') || server.hasLedger(self.message.ledger_index)) && (!self.message.hasOwnProperty('ledger_index_min') || self.message.ledger_index_min === -1 || server.hasLedger(self.message.ledger_index_min)) && (!self.message.hasOwnProperty('ledger_index_max') || self.message.ledger_index_max === -1 || server.hasLedger(self.message.ledger_index_max));
	  });

	  // Apply iterator in parallel to connected servers, complete when the
	  // supplied filter function is satisfied once by a server's response
	  async.some(servers, iterator, complete);

	  return this;
	};

	Request.prototype.cancel = function () {
	  this.removeAllListeners();
	  this.on('error', function () {});

	  return this;
	};

	Request.prototype.setCallback = function (fn) {
	  if (typeof fn === 'function') {
	    this.callback(fn);
	  }

	  return this;
	};

	Request.prototype.setReconnectTimeout = function (timeout) {
	  if (typeof timeout === 'number' && !isNaN(timeout)) {
	    this.reconnectTimeout = timeout;
	  }

	  return this;
	};

	Request.prototype.callback = function (callback, successEvent, errorEvent) {
	  var self = this;

	  if (typeof callback !== 'function') {
	    return this;
	  }

	  if (typeof successEvent === 'string') {
	    this.successEvent = successEvent;
	  }
	  if (typeof errorEvent === 'string') {
	    this.errorEvent = errorEvent;
	  }

	  var called = false;

	  function requestSuccess(message) {
	    if (!called) {
	      called = true;
	      callback.call(self, null, message);
	    }
	  }

	  function requestError(error) {
	    if (!called) {
	      called = true;

	      if (!(error instanceof RippleError)) {
	        callback.call(self, new RippleError(error));
	      } else {
	        callback.call(self, error);
	      }
	    }
	  }

	  this.once(this.successEvent, requestSuccess);
	  this.once(this.errorEvent, requestError);
	  this.request();

	  return this;
	};

	Request.prototype.timeout = function (duration, callback) {
	  var self = this;

	  function requested() {
	    self.timeout(duration, callback);
	  }

	  if (!this.requested) {
	    // Defer until requested
	    return this.once('request', requested);
	  }

	  var emit = this.emit;
	  var timed_out = false;

	  var timeout = setTimeout(function () {
	    timed_out = true;

	    if (typeof callback === 'function') {
	      callback();
	    }

	    emit.call(self, 'timeout');
	    self.cancel();
	  }, duration);

	  this.emit = function () {
	    if (!timed_out) {
	      clearTimeout(timeout);
	      emit.apply(self, arguments);
	    }
	  };

	  return this;
	};

	Request.prototype.setServer = function (server) {
	  var selected = null;

	  if (_.isString(server)) {
	    selected = _.find(this.remote._servers, function (s) {
	      return s._url === server;
	    }) || null;
	  } else if (_.isObject(server)) {
	    selected = server;
	  }

	  this.server = selected;
	  return this;
	};

	Request.prototype.buildPath = function (build) {
	  if (this.remote.local_signing) {
	    throw new Error('`build_path` is completely ignored when doing local signing as ' + '`Paths` is a component of the signed blob. The `tx_blob` is signed,' + 'sealed and delivered, and the txn unmodified after');
	  }

	  if (build) {
	    this.message.build_path = true;
	  } else {
	    // ND: rippled currently intreprets the mere presence of `build_path` as the
	    // value being `truthy`
	    delete this.message.build_path;
	  }

	  return this;
	};

	Request.prototype.ledgerChoose = function (current) {
	  if (current) {
	    this.message.ledger_index = this.remote._ledger_current_index;
	  } else {
	    this.message.ledger_hash = this.remote._ledger_hash;
	  }

	  return this;
	};

	// Set the ledger for a request.
	// - ledger_entry
	// - transaction_entry
	Request.prototype.ledgerHash = function (hash) {
	  this.message.ledger_hash = hash;
	  return this;
	};

	// Set the ledger_index for a request.
	// - ledger_entry
	Request.prototype.ledgerIndex = function (ledger_index) {
	  this.message.ledger_index = ledger_index;
	  return this;
	};

	/**
	 * Set either ledger_index or ledger_hash based on heuristic
	 *
	 * @param {Number|String} ledger - identifier
	 * @param {Object} options -
	 * @param {Number|String} defaultValue - default if `ledger` unspecifed
	 */
	Request.prototype.ledgerSelect = Request.prototype.selectLedger = function (ledger, defaultValue) {
	  var selected = ledger || defaultValue;

	  switch (selected) {
	    case 'current':
	    case 'closed':
	    case 'validated':
	      this.message.ledger_index = selected;
	      break;
	    default:
	      if (Number(selected) && isFinite(Number(selected))) {
	        this.message.ledger_index = Number(selected);
	      } else if (/^[A-F0-9]{64}$/.test(selected)) {
	        this.message.ledger_hash = selected;
	      } else if (selected !== undefined) {
	        throw new Error('unknown ledger format: ' + selected);
	      }
	      break;
	  }
	  return this;
	};

	Request.prototype.accountRoot = function (account) {
	  this.message.account_root = UInt160.json_rewrite(account);
	  return this;
	};

	Request.prototype.index = function (index) {
	  this.message.index = index;
	  return this;
	};

	// Provide the information id an offer.
	// --> account
	// --> seq : sequence number of transaction creating offer (integer)
	Request.prototype.offerId = function (account, sequence) {
	  this.message.offer = {
	    account: UInt160.json_rewrite(account),
	    seq: sequence
	  };
	  return this;
	};

	// --> index : ledger entry index.
	Request.prototype.offerIndex = function (index) {
	  this.message.offer = index;
	  return this;
	};

	Request.prototype.secret = function (secret) {
	  if (secret) {
	    this.message.secret = secret;
	  }
	  return this;
	};

	Request.prototype.txHash = function (hash) {
	  this.message.tx_hash = hash;
	  return this;
	};

	Request.prototype.txJson = function (json) {
	  this.message.tx_json = json;
	  return this;
	};

	Request.prototype.txBlob = function (json) {
	  this.message.tx_blob = json;
	  return this;
	};

	Request.prototype.rippleState = function (account, issuer, currency) {
	  this.message.ripple_state = {
	    currency: currency,
	    accounts: [UInt160.json_rewrite(account), UInt160.json_rewrite(issuer)]
	  };
	  return this;
	};

	Request.prototype.setAccounts = Request.prototype.accounts = function (accountsIn, proposed) {
	  var accounts = Array.isArray(accountsIn) ? accountsIn : [accountsIn];

	  // Process accounts parameters
	  var processedAccounts = accounts.map(function (account) {
	    return UInt160.json_rewrite(account);
	  });

	  if (proposed) {
	    this.message.accounts_proposed = processedAccounts;
	  } else {
	    this.message.accounts = processedAccounts;
	  }

	  return this;
	};

	Request.prototype.addAccount = function (account, proposed) {
	  if (Array.isArray(account)) {
	    account.forEach(this.addAccount, this);
	    return this;
	  }

	  var processedAccount = UInt160.json_rewrite(account);
	  var prop = proposed === true ? 'accounts_proposed' : 'accounts';
	  this.message[prop] = (this.message[prop] || []).concat(processedAccount);

	  return this;
	};

	Request.prototype.setAccountsProposed = Request.prototype.rtAccounts = Request.prototype.accountsProposed = function (accounts) {
	  return this.accounts(accounts, true);
	};

	Request.prototype.addAccountProposed = function (account) {
	  if (Array.isArray(account)) {
	    account.forEach(this.addAccountProposed, this);
	    return this;
	  }

	  return this.addAccount(account, true);
	};

	Request.prototype.setBooks = Request.prototype.books = function (books, snapshot) {
	  // Reset list of books (this method overwrites the current list)
	  this.message.books = [];

	  for (var i = 0, l = books.length; i < l; i++) {
	    var book = books[i];
	    this.addBook(book, snapshot);
	  }

	  return this;
	};

	Request.prototype.addBook = function (book, snapshot) {
	  if (Array.isArray(book)) {
	    book.forEach(this.addBook, this);
	    return this;
	  }

	  var json = {};

	  function processSide(side) {
	    if (!book[side]) {
	      throw new Error('Missing ' + side);
	    }

	    var obj = json[side] = {
	      currency: Currency.json_rewrite(book[side].currency, {
	        force_hex: true
	      })
	    };

	    if (!Currency.from_json(obj.currency).is_native()) {
	      obj.issuer = UInt160.json_rewrite(book[side].issuer);
	    }
	  }

	  ['taker_gets', 'taker_pays'].forEach(processSide);

	  if (typeof snapshot !== 'boolean') {
	    json.snapshot = true;
	  } else if (snapshot) {
	    json.snapshot = true;
	  } else {
	    delete json.snapshot;
	  }

	  if (book.both) {
	    json.both = true;
	  }

	  this.message.books = (this.message.books || []).concat(json);

	  return this;
	};

	Request.prototype.addStream = function (stream, values) {
	  if (Array.isArray(values)) {
	    switch (stream) {
	      case 'accounts':
	        this.addAccount(values);
	        break;
	      case 'accounts_proposed':
	        this.addAccountProposed(values);
	        break;
	      case 'books':
	        this.addBook(values);
	        break;
	    }
	  } else if (arguments.length > 1) {
	    for (var arg in arguments) {
	      this.addStream(arguments[arg]);
	    }
	    return this;
	  }

	  if (!Array.isArray(this.message.streams)) {
	    this.message.streams = [];
	  }

	  if (this.message.streams.indexOf(stream) === -1) {
	    this.message.streams.push(stream);
	  }

	  return this;
	};

	exports.Request = Request;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// Represent Ripple amounts and currencies.
	// - Numbers in hex are big-endian.

	var assert = __webpack_require__(75);
	var extend = __webpack_require__(77);
	var utils = __webpack_require__(18);
	var UInt160 = __webpack_require__(11).UInt160;
	var Seed = __webpack_require__(13).Seed;
	var Currency = __webpack_require__(8).Currency;
	var Value = __webpack_require__(54).Value;
	var IOUValue = __webpack_require__(55).IOUValue;
	var XRPValue = __webpack_require__(56).XRPValue;

	function Amount() {
	  var value = arguments.length <= 0 || arguments[0] === undefined ? new XRPValue(NaN) : arguments[0];

	  // Json format:
	  //  integer : XRP
	  //  { 'value' : ..., 'currency' : ..., 'issuer' : ...}
	  assert(value instanceof Value);

	  this._value = value;
	  this._is_native = true; // Default to XRP. Only valid if value is not NaN.
	  this._currency = new Currency();
	  this._issuer = new UInt160();
	}

	/**
	 * Set strict_mode = false to disable amount range checking
	 */

	Amount.strict_mode = true;

	var consts = {
	  currency_xns: 0,
	  currency_one: 1,
	  xns_precision: 6,

	  // bi_ prefix refers to "big integer"
	  // man refers to mantissa
	  bi_man_max_value: '9999999999999999',
	  bi_man_min_value: Number(1e15).toString(),
	  bi_xns_max: Number(1e17).toString(),
	  bi_xns_min: Number(-1e17).toString(),

	  cMinOffset: -96,
	  cMaxOffset: 80,

	  // Maximum possible amount for non-XRP currencies using the maximum mantissa
	  // with maximum exponent. Corresponds to hex 0xEC6386F26FC0FFFF.
	  max_value: '9999999999999999e80',
	  // Minimum possible amount for non-XRP currencies.
	  min_value: '-1000000000000000e-96'
	};

	var MAX_XRP_VALUE = new XRPValue(1e11);
	var MAX_IOU_VALUE = new IOUValue(consts.max_value);
	var MIN_IOU_VALUE = new IOUValue(consts.min_value).abs();

	var bi_xns_unit = new IOUValue(1e6);

	// Add constants to Amount class
	extend(Amount, consts);

	// DEPRECATED: Use Amount instead, e.g. Amount.currency_xns
	exports.consts = consts;

	// Given '100/USD/ISSUER' return the a string with ISSUER remapped.
	Amount.text_full_rewrite = function (j) {
	  return Amount.from_json(j).to_text_full();
	};

	// Given '100/USD/ISSUER' return the json.
	Amount.json_rewrite = function (j) {
	  return Amount.from_json(j).to_json();
	};

	Amount.from_number = function (n) {
	  return new Amount().parse_number(n);
	};

	Amount.from_json = function (j) {
	  return new Amount().parse_json(j);
	};

	Amount.from_quality = function (quality, currency, issuer, opts) {
	  return new Amount().parse_quality(quality, currency, issuer, opts);
	};

	Amount.from_human = function (j, opts) {
	  return new Amount().parse_human(j, opts);
	};

	Amount.is_valid = function (j) {
	  return Amount.from_json(j).is_valid();
	};

	Amount.is_valid_full = function (j) {
	  return Amount.from_json(j).is_valid_full();
	};

	Amount.NaN = function () {
	  var result = new Amount();
	  result._value = new IOUValue(NaN); // should have no effect
	  return result; // but let's be careful
	};

	// be sure that _is_native is set properly BEFORE calling _set_value
	Amount.prototype._set_value = function (value) {

	  this._value = value.isZero() && value.isNegative() ? value.negate() : value;
	  this._check_limits();
	};

	// Returns a new value which is the absolute value of this.
	Amount.prototype.abs = function () {

	  return this._copy(this._value.abs());
	};

	Amount.prototype.add = function (addend) {
	  var addendAmount = Amount.from_json(addend);

	  if (!this.is_comparable(addendAmount)) {
	    return new Amount();
	  }

	  return this._copy(this._value.add(addendAmount._value));
	};

	Amount.prototype.subtract = function (subtrahend) {
	  // Correctness over speed, less code has less bugs, reuse add code.
	  return this.add(Amount.from_json(subtrahend).negate());
	};

	// XXX Diverges from cpp.
	Amount.prototype.multiply = function (multiplicand) {

	  var multiplicandAmount = Amount.from_json(multiplicand);

	  return this._copy(this._value.multiply(multiplicandAmount._value));
	};

	Amount.prototype.scale = function (scaleFactor) {
	  return this.multiply(scaleFactor);
	};

	Amount.prototype.divide = function (divisor) {
	  var divisorAmount = Amount.from_json(divisor);

	  return this._copy(this._value.divide(divisorAmount._value));
	};

	/**
	 * This function calculates a ratio - such as a price - between two Amount
	 * objects.
	 *
	 * The return value will have the same type (currency) as the numerator. This is
	 * a simplification, which should be sane in most cases. For example, a USD/XRP
	 * price would be rendered as USD.
	 *
	 * @example
	 *   const price = buy_amount.ratio_human(sell_amount);
	 *
	 * @this {Amount} The numerator (top half) of the fraction.
	 * @param {Amount} denominator The denominator (bottom half) of the fraction.
	 * @param opts Options for the calculation.
	 * @param opts.reference_date {Date|Number} Date based on which
	 * demurrage/interest should be applied. Can be given as JavaScript Date or int
	 * for Ripple epoch.
	 * @return {Amount} The resulting ratio. Unit will be the same as numerator.
	 */

	Amount.prototype.ratio_human = function (denom, opts) {
	  var options = extend({}, opts);

	  var numerator = this.clone();

	  var denominator = Amount.from_json(denom);

	  // If either operand is NaN, the result is NaN.
	  if (!numerator.is_valid() || !denominator.is_valid()) {
	    return new Amount(NaN);
	  }

	  if (denominator.is_zero()) {
	    return new Amount(NaN);
	  }

	  // Apply interest/demurrage
	  //
	  // We only need to apply it to the second factor, because the currency unit of
	  // the first factor will carry over into the result.
	  if (options.reference_date) {
	    denominator = denominator.applyInterest(options.reference_date);
	  }

	  // Special case: The denominator is a native (XRP) amount.
	  //
	  // In that case, it's going to be expressed as base units (1 XRP =
	  // 10^xns_precision base units).
	  //
	  // However, the unit of the denominator is lost, so when the resulting ratio
	  // is printed, the ratio is going to be too small by a factor of
	  // 10^xns_precision.
	  //
	  // To compensate, we multiply the numerator by 10^xns_precision.
	  if (denominator._is_native) {
	    numerator._set_value(numerator.multiply(bi_xns_unit));
	  }

	  return numerator.divide(denominator);
	};

	/**
	 * Calculate a product of two amounts.
	 *
	 * This function allows you to calculate a product between two amounts which
	 * retains XRPs human/external interpretation (i.e. 1 XRP = 1,000,000 base
	 * units).
	 *
	 * Intended use is to calculate something like: 10 USD * 10 XRP/USD = 100 XRP
	 *
	 * @example
	 *   let sell_amount = buy_amount.product_human(price);
	 *
	 * @see Amount#ratio_human
	 *
	 * @param {Amount} factor The second factor of the product.
	 * @param {Object} opts Options for the calculation.
	 * @param {Date|Number} opts.reference_date Date based on which
	 * demurrage/interest should be applied. Can be given as JavaScript Date or int
	 * for Ripple epoch.
	 * @return {Amount} The product. Unit will be the same as the first factor.
	 */
	Amount.prototype.product_human = function (factor) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var fac = Amount.from_json(factor);

	  // If either operand is NaN, the result is NaN.
	  if (!this.is_valid() || !fac.is_valid()) {
	    return new Amount();
	  }

	  // Apply interest/demurrage
	  //
	  // We only need to apply it to the second factor, because the currency unit of
	  // the first factor will carry over into the result.
	  if (options.reference_date) {
	    fac = fac.applyInterest(options.reference_date);
	  }

	  var product = this.multiply(fac);

	  // Special case: The second factor is a native (XRP) amount expressed as base
	  // units (1 XRP = 10^xns_precision base units).
	  //
	  // See also Amount#ratio_human.
	  if (fac._is_native) {
	    var quotient = product.divide(bi_xns_unit.toString());
	    product._set_value(quotient._value);
	  }

	  return product;
	};

	/**
	 * Turn this amount into its inverse.
	 *
	 * @return {Amount} self
	 * @private
	 */
	Amount.prototype._invert = function () {
	  this._set_value(this._value.invert());
	  return this;
	};

	/**
	 * Return the inverse of this amount.
	 *
	 * @return {Amount} New Amount object with same currency and issuer, but the
	 *   inverse of the value.
	 */
	Amount.prototype.invert = function () {
	  return this.clone()._invert();
	};

	/**
	 * Canonicalize amount value is now taken care of in the Value classes
	 *
	 * Mirrors rippled's internal Amount representation
	 * From https://github.com/ripple/rippled/blob/develop/src/ripple/data
	 * /protocol/STAmount.h#L31-L40
	 *
	 * Internal form:
	 * 1: If amount is zero, then value is zero and offset is -100
	 * 2: Otherwise:
	 *    legal offset range is -96 to +80 inclusive
	 *    value range is 10^15 to (10^16 - 1) inclusive
	 *    amount = value * [10 ^ offset]
	 *
	 * -------------------
	 *
	 * The amount can be epxresses as A x 10^B
	 * Where:
	 * - A must be an integer between 10^15 and (10^16)-1 inclusive
	 * - B must be between -96 and 80 inclusive
	 *
	 * This results
	 * - minumum: 10^15 x 10^-96 -> 10^-81 -> -1e-81
	 * - maximum: (10^16)-1 x 10^80 -> 9999999999999999e80
	 *
	 * @returns {Amount}
	 * @throws {Error} if offset exceeds legal ranges, meaning the amount value is
	 * bigger than supported
	 */

	Amount.prototype._check_limits = function () {
	  if (!Amount.strict_mode) {
	    return this;
	  }
	  if (this._value.isNaN() || this._value.isZero()) {
	    return this;
	  }
	  var absval = this._value.abs();
	  if (this._is_native) {
	    if (absval.greaterThan(MAX_XRP_VALUE)) {
	      throw new Error('Exceeding max value of ' + MAX_XRP_VALUE.toString());
	    }
	  } else {
	    if (absval.lessThan(MIN_IOU_VALUE)) {
	      throw new Error('Exceeding min value of ' + MIN_IOU_VALUE.toString());
	    }
	    if (absval.greaterThan(MAX_IOU_VALUE)) {
	      throw new Error('Exceeding max value of ' + MAX_IOU_VALUE.toString());
	    }
	  }
	  return this;
	};

	Amount.prototype.clone = function (negate) {
	  return this.copyTo(new Amount(), negate);
	};

	Amount.prototype._copy = function (value) {
	  var copy = this.clone();
	  copy._set_value(value);
	  return copy;
	};

	Amount.prototype.compareTo = function (to) {
	  var toAmount = Amount.from_json(to);
	  if (!this.is_comparable(toAmount)) {
	    return new Amount();
	  }
	  return this._value.comparedTo(toAmount._value);
	};

	// Make d a copy of this. Returns d.
	// Modification of objects internally refered to is not allowed.
	Amount.prototype.copyTo = function (d, negate) {
	  d._value = negate ? this._value.negate() : this._value;
	  d._is_native = this._is_native;
	  d._currency = this._currency;
	  d._issuer = this._issuer;
	  return d;
	};

	Amount.prototype.currency = function () {
	  return this._currency;
	};

	Amount.prototype.equals = function (d, ignore_issuer) {
	  if (!(d instanceof Amount)) {
	    return this.equals(Amount.from_json(d));
	  }

	  return this.is_valid() && d.is_valid() && this._is_native === d._is_native && this._value.equals(d._value) && (this._is_native || this._currency.equals(d._currency) && (ignore_issuer || this._issuer.equals(d._issuer)));
	};

	// True if Amounts are valid and both native or non-native.
	Amount.prototype.is_comparable = function (v) {
	  return this.is_valid() && v.is_valid() && this._is_native === v._is_native;
	};

	Amount.prototype.is_native = function () {
	  return this._is_native;
	};

	Amount.prototype.is_negative = function () {
	  return this._value.isNegative();
	};

	Amount.prototype.is_positive = function () {
	  return !this.is_zero() && !this.is_negative();
	};

	// Only checks the value. Not the currency and issuer.
	Amount.prototype.is_valid = function () {
	  return !this._value.isNaN();
	};

	Amount.prototype.is_valid_full = function () {
	  return this.is_valid() && this._currency.is_valid() && this._issuer.is_valid();
	};

	Amount.prototype.is_zero = function () {
	  return this._value.isZero();
	};

	Amount.prototype.issuer = function () {
	  return this._issuer;
	};

	// Return a new value.
	Amount.prototype.negate = function () {
	  return this.clone('NEGATE');
	};

	/**
	 * Tries to correctly interpret an amount as entered by a user.
	 *
	 * Examples:
	 *
	 *   XRP 250     => 250000000/XRP
	 *   25.2 XRP    => 25200000/XRP
	 *   USD 100.40  => 100.4/USD/?
	 *   100         => 100000000/XRP
	 *
	 *
	 * The regular expression below matches above cases, broken down for better
	 * understanding:
	 *
	 * // either 3 letter alphabetic currency-code or 3 digit numeric currency-code.
	 * // See ISO 4217
	 * ([A-z]{3}|[0-9]{3})
	 *
	 * // end of string
	 * $
	 */

	Amount.prototype.parse_human = function (j, options) {
	  var opts = options || {};

	  var hex_RE = /^[a-fA-F0-9]{40}$/;
	  var currency_RE = /^([a-zA-Z]{3}|[0-9]{3})$/;

	  var value = undefined;
	  var currency = undefined;

	  var words = j.split(' ').filter(function (word) {
	    return word !== '';
	  });

	  function isNumber(s) {
	    return isFinite(s) && s !== '' && s !== null;
	  }

	  if (words.length === 1) {
	    if (isNumber(words[0])) {
	      value = words[0];
	      currency = 'XRP';
	    } else {
	      value = words[0].slice(0, -3);
	      currency = words[0].slice(-3);
	      if (!(isNumber(value) && currency.match(currency_RE))) {
	        return new Amount();
	      }
	    }
	  } else if (words.length === 2) {
	    if (isNumber(words[0]) && words[1].match(hex_RE)) {
	      value = words[0];
	      currency = words[1];
	    } else if (words[0].match(currency_RE) && isNumber(words[1])) {
	      value = words[1];
	      currency = words[0];
	    } else if (isNumber(words[0]) && words[1].match(currency_RE)) {
	      value = words[0];
	      currency = words[1];
	    } else {
	      return new Amount();
	    }
	  } else {
	    return new Amount();
	  }

	  currency = currency.toUpperCase();
	  this.set_currency(currency);
	  this._is_native = currency === 'XRP';
	  var newValue = this._is_native ? new XRPValue(value) : new IOUValue(value);
	  this._set_value(newValue);

	  // Apply interest/demurrage
	  if (opts.reference_date && this._currency.has_interest()) {
	    var interest = this._currency.get_interest_at(opts.reference_date);
	    this._set_value(this._value.divide(new IOUValue(interest.toString())));
	  }

	  return this;
	};

	Amount.prototype.parse_issuer = function (issuer) {
	  this._issuer = UInt160.from_json(issuer);
	  return this;
	};

	/**
	 * Decode a price from a BookDirectory index.
	 *
	 * BookDirectory ledger entries each encode the offer price in their index. This
	 * method can decode that information and populate an Amount object with it.
	 *
	 * It is possible not to provide a currency or issuer, but be aware that Amount
	 * objects behave differently based on the currency, so you may get incorrect
	 * results.
	 *
	 * Prices involving demurraging currencies are tricky, since they depend on the
	 * base and counter currencies.
	 *
	 * @param {String} quality 8 hex bytes quality or 32 hex bytes BookDirectory
	 *   index.
	 * @param {Currency|String} counterCurrency currency of the resulting Amount
	 *   object.
	 * @param {Issuer|String} counterIssuer Issuer of the resulting Amount object.
	 * @param {Object} opts Additional options
	 * @param {Boolean} opts.inverse If true, return the inverse of the price
	 *   encoded in the quality.
	 * @param {Currency|String} opts.base_currency The other currency. This plays a
	 *   role with interest-bearing or demurrage currencies. In that case the
	 *   demurrage has to be applied when the quality is decoded, otherwise the
	 *   price will be false.
	 * @param {Date|Number} opts.reference_date Date based on which
	 * demurrage/interest should be applied. Can be given as JavaScript Date or int
	 * for Ripple epoch.
	 * @param {Boolean} opts.xrp_as_drops Whether XRP amount should be treated as
	 *   drops. When the base currency is XRP, the quality is calculated in drops.
	 *   For human use however, we want to think of 1000000 drops as 1 XRP and
	 *   prices as per-XRP instead of per-drop.
	 * @return {Amount} self
	 */
	Amount.prototype.parse_quality = function (quality, counterCurrency, counterIssuer, opts) {
	  var options = opts || {};

	  var baseCurrency = Currency.from_json(options.base_currency);

	  var mantissa_hex = quality.substring(quality.length - 14);
	  var offset_hex = quality.substring(quality.length - 16, quality.length - 14);
	  var mantissa = new IOUValue(mantissa_hex, null, 16);
	  var offset = parseInt(offset_hex, 16) - 100;

	  this._currency = Currency.from_json(counterCurrency);
	  this._issuer = UInt160.from_json(counterIssuer);
	  this._is_native = this._currency.is_native();

	  if (this._is_native && baseCurrency.is_native()) {
	    throw new Error('XRP/XRP quality is not allowed');
	  }

	  /*
	  The quality, as stored in the last 64 bits of a directory index, is stored as
	  the quotient of TakerPays/TakerGets.
	   When `opts.inverse` is true we are looking at a quality used for determining a
	  `bid` price and it must first be inverted, before our declared base/counter
	  currencies are in line with the price.
	   For example:
	     quality as stored :  5 USD          /  3000000 drops
	    inverted          :  3000000 drops  /          5 USD
	  */
	  var valueStr = mantissa.toString() + 'e' + offset.toString();
	  var nativeAdjusted = new IOUValue(valueStr);
	  nativeAdjusted = options.inverse ? nativeAdjusted.invert() : nativeAdjusted;

	  if (!options.xrp_as_drops) {
	    // `In a currency exchange, the exchange rate is quoted as the units of the
	    //  counter currency in terms of a single unit of a base currency`. A
	    //  quality is how much taker must `pay` to get ONE `gets` unit thus:
	    //    pays ~= counterCurrency
	    //    gets ~= baseCurrency.
	    if (this._is_native) {
	      // pay:$price              drops  get:1 X
	      // pay:($price / 1,000,000)  XRP  get:1 X
	      nativeAdjusted = nativeAdjusted.divide(bi_xns_unit);
	    } else if (baseCurrency.is_valid() && baseCurrency.is_native()) {
	      // pay:$price X                   get:1 drop
	      // pay:($price * 1,000,000) X     get:1 XRP
	      nativeAdjusted = nativeAdjusted.multiply(bi_xns_unit);
	    }
	  }
	  if (this._is_native) {
	    this._set_value(new XRPValue(nativeAdjusted.round(6, Value.getBNRoundDown()).toString()));
	  } else {
	    this._set_value(nativeAdjusted);
	  }

	  if (options.reference_date && baseCurrency.is_valid() && baseCurrency.has_interest()) {
	    var interest = baseCurrency.get_interest_at(options.reference_date);
	    this._set_value(this._value.divide(new IOUValue(interest.toString())));
	  }
	  return this;
	};

	Amount.prototype.parse_number = function (n) {
	  this._is_native = false;
	  this._currency = Currency.from_json(1);
	  this._issuer = UInt160.from_json(1);
	  this._set_value(new IOUValue(n));
	  return this;
	};

	// <-> j
	Amount.prototype.parse_json = function (j) {
	  switch (typeof j) {
	    case 'string':
	      // .../.../... notation is not a wire format.  But allowed for easier
	      // testing.
	      var m = j.match(/^([^/]+)\/([^/]+)(?:\/(.+))?$/);

	      if (m) {
	        this._currency = Currency.from_json(m[2]);
	        if (m[3]) {
	          this._issuer = UInt160.from_json(m[3]);
	        } else {
	          this._issuer = UInt160.from_json('1');
	        }
	        this.parse_value(m[1]);
	      } else {
	        this.parse_native(j);
	        this._currency = Currency.from_json('0');
	        this._issuer = UInt160.from_json('0');
	      }
	      break;

	    case 'number':
	      this.parse_json(String(j));
	      break;

	    case 'object':
	      if (j === null) {
	        break;
	      }

	      if (j instanceof Amount) {
	        j.copyTo(this);
	      } else if (j.hasOwnProperty('value')) {
	        // Parse the passed value to sanitize and copy it.
	        this._currency.parse_json(j.currency, true); // Never XRP.

	        if (typeof j.issuer === 'string') {
	          this._issuer.parse_json(j.issuer);
	        }

	        this.parse_value(j.value);
	      }
	      break;

	    default:
	      this._set_value(new IOUValue(NaN));
	  }

	  return this;
	};

	// Parse a XRP value from untrusted input.
	// - integer = raw units
	// - float = with precision 6
	// XXX Improvements: disallow leading zeros.
	Amount.prototype.parse_native = function (j) {
	  if (j && typeof j === 'string' && !isNaN(j)) {
	    if (j.indexOf('.') >= 0) {
	      throw new Error('Native amounts must be specified in integer drops');
	    }
	    var value = new XRPValue(j);
	    this._is_native = true;
	    this._set_value(value.divide(bi_xns_unit));
	  } else {
	    this._set_value(new IOUValue(NaN));
	  }

	  return this;
	};

	// Parse a non-native value for the json wire format.
	// Requires _currency to be set!
	Amount.prototype.parse_value = function (j) {
	  this._is_native = false;
	  var newValue = new IOUValue(j, Value.getBNRoundDown());
	  this._set_value(newValue);
	  return this;
	};

	Amount.prototype.set_currency = function (c) {
	  this._currency = Currency.from_json(c);
	  this._is_native = this._currency.is_native();
	  return this;
	};

	Amount.prototype.set_issuer = function (issuer) {
	  if (issuer instanceof UInt160) {
	    this._issuer = issuer;
	  } else {
	    this._issuer = UInt160.from_json(issuer);
	  }

	  return this;
	};

	Amount.prototype.to_number = function () {
	  return Number(this.to_text());
	};

	// Convert only value to JSON wire format.
	Amount.prototype.to_text = function () {
	  if (!this.is_valid()) {
	    return 'NaN';
	  }

	  if (this._is_native) {
	    return this._value.multiply(bi_xns_unit).toString();
	  }

	  // not native
	  var offset = this._value.getExponent() - 15;
	  var sign = this._value.isNegative() ? '-' : '';
	  var mantissa = utils.getMantissa16FromString(this._value.abs().toString());
	  if (offset !== 0 && (offset < -25 || offset > -4)) {
	    // Use e notation.
	    // XXX Clamp output.
	    return sign + mantissa.toString() + 'e' + offset.toString();
	  }

	  var val = '000000000000000000000000000' + mantissa.toString() + '00000000000000000000000';
	  var pre = val.substring(0, offset + 43);
	  var post = val.substring(offset + 43);
	  var s_pre = pre.match(/[1-9].*$/); // Everything but leading zeros.
	  var s_post = post.match(/[1-9]0*$/); // Last non-zero plus trailing zeros.

	  return sign + (s_pre ? s_pre[0] : '0') + (s_post ? '.' + post.substring(0, 1 + post.length - s_post[0].length) : '');
	};

	/**
	 * Calculate present value based on currency and a reference date.
	 *
	 * This only affects demurraging and interest-bearing currencies.
	 *
	 * User should not store amount objects after the interest is applied. This is
	 * intended by display functions such as toHuman().
	 *
	 * @param {Date|Number} referenceDate Date based on which demurrage/interest
	 *   should be applied. Can be given as JavaScript Date or int for Ripple epoch.
	 * @return {Amount} The amount with interest applied.
	 */
	Amount.prototype.applyInterest = function (referenceDate) {
	  if (!this._currency.has_interest()) {
	    return this;
	  }
	  var interest = this._currency.get_interest_at(referenceDate);
	  return this._copy(this._value.multiply(new IOUValue(interest.toString())));
	};

	/**
	 * Format only value in a human-readable format.
	 *
	 * @example
	 *   let pretty = amount.to_human({precision: 2});
	 *
	 * @param {Object} options Options for formatter.
	 * @param {Number} options.precision Max. number of digits after decimal point.
	 * @param {Number} options.min_precision Min. number of digits after dec. point.
	 * @param {Boolean} options.skip_empty_fraction Don't show fraction if it
	 *   is zero, even if min_precision is set.
	 * @param {Number} options.max_sig_digits Maximum number of significant digits.
	 *   Will cut fractional part, but never integer part.
	 * @param {Boolean|String} options.group_sep Whether to show a separator every n
	 *   digits, if a string, that value will be used as the separator. Default: ','
	 * @param {Number} options.group_width How many numbers will be grouped
	 *   together, default: 3.
	 * @param {Boolean|String} options.signed Whether negative numbers will have a
	 *   prefix. If String, that string will be used as the prefix. Default: '-'
	 * @param {Date|Number} options.reference_date Date based on which
	 * demurrage/interest should be applied. Can be given as JavaScript Date or int
	 * for Ripple epoch.
	 * @return {String} amount string
	 */
	Amount.prototype.to_human = function (options) {
	  var opts = options || {};

	  if (!this.is_valid()) {
	    return 'NaN';
	  }

	  /* eslint-disable consistent-this */
	  // Apply demurrage/interest
	  var ref = this;
	  /* eslint-enable consistent-this */

	  if (opts.reference_date) {
	    ref = this.applyInterest(opts.reference_date);
	  }

	  var isNegative = ref._value.isNegative();
	  var valueString = ref._value.abs().toFixed();
	  var parts = valueString.split('.');
	  var int_part = parts[0];
	  var fraction_part = parts.length === 2 ? parts[1] : '';

	  int_part = int_part.replace(/^0*/, '');
	  fraction_part = fraction_part.replace(/0*$/, '');

	  if (fraction_part.length || !opts.skip_empty_fraction) {
	    // Enforce the maximum number of decimal digits (precision)
	    if (typeof opts.precision === 'number') {
	      var precision = Math.max(0, opts.precision);
	      precision = Math.min(precision, fraction_part.length);
	      var rounded = Number('0.' + fraction_part).toFixed(precision);

	      if (rounded < 1) {
	        fraction_part = rounded.substring(2);
	      } else {
	        int_part = (Number(int_part) + 1).toString();
	        fraction_part = '';
	      }

	      while (fraction_part.length < precision) {
	        fraction_part = '0' + fraction_part;
	      }
	    }

	    // Limit the number of significant digits (max_sig_digits)
	    if (typeof opts.max_sig_digits === 'number') {
	      // First, we count the significant digits we have.
	      // A zero in the integer part does not count.
	      var int_is_zero = Number(int_part) === 0;
	      var digits = int_is_zero ? 0 : int_part.length;

	      // Don't count leading zeros in the fractional part if the integer part is
	      // zero.
	      var sig_frac = int_is_zero ? fraction_part.replace(/^0*/, '') : fraction_part;
	      digits += sig_frac.length;

	      // Now we calculate where we are compared to the maximum
	      var rounding = digits - opts.max_sig_digits;

	      // If we're under the maximum we want to cut no (=0) digits
	      rounding = Math.max(rounding, 0);

	      // If we're over the maximum we still only want to cut digits from the
	      // fractional part, not from the integer part.
	      rounding = Math.min(rounding, fraction_part.length);

	      // Now we cut `rounding` digits off the right.
	      if (rounding > 0) {
	        fraction_part = fraction_part.slice(0, -rounding);
	      }
	    }

	    // Enforce the minimum number of decimal digits (min_precision)
	    if (typeof opts.min_precision === 'number') {
	      opts.min_precision = Math.max(0, opts.min_precision);
	      while (fraction_part.length < opts.min_precision) {
	        fraction_part += '0';
	      }
	    }
	  }

	  if (opts.group_sep !== false) {
	    var sep = typeof opts.group_sep === 'string' ? opts.group_sep : ',';
	    var groups = utils.chunkString(int_part, opts.group_width || 3, true);
	    int_part = groups.join(sep);
	  }

	  var formatted = '';
	  if (isNegative && opts.signed !== false) {
	    formatted += '-';
	  }

	  formatted += int_part.length ? int_part : '0';
	  formatted += fraction_part.length ? '.' + fraction_part : '';

	  return formatted;
	};

	Amount.prototype.to_human_full = function (options) {
	  var opts = options || {};
	  var value = this.to_human(opts);
	  var currency = this._currency.to_human();
	  var issuer = this._issuer.to_json(opts);
	  var base = value + '/' + currency;
	  return this.is_native() ? base : base + '/' + issuer;
	};

	Amount.prototype.to_json = function () {
	  if (this._is_native) {
	    return this.to_text();
	  }

	  var amount_json = {
	    value: this.to_text(),
	    currency: this._currency.has_interest() ? this._currency.to_hex() : this._currency.to_json()
	  };

	  if (this._issuer.is_valid()) {
	    amount_json.issuer = this._issuer.to_json();
	  }

	  return amount_json;
	};

	Amount.prototype.to_text_full = function (opts) {
	  if (!this.is_valid()) {
	    return 'NaN';
	  }
	  return this._is_native ? this.to_human() + '/XRP' : this.to_text() + '/' + this._currency.to_json() + '/' + this._issuer.to_json(opts);
	};

	// For debugging.
	Amount.prototype.not_equals_why = function (d, ignore_issuer) {
	  if (typeof d === 'string') {
	    return this.not_equals_why(Amount.from_json(d));
	  }
	  if (!(d instanceof Amount)) {
	    return 'Not an Amount';
	  }
	  if (!this.is_valid() || !d.is_valid()) {
	    return 'Invalid amount.';
	  }
	  if (this._is_native !== d._is_native) {
	    return 'Native mismatch.';
	  }

	  var type = this._is_native ? 'XRP' : 'Non-XRP';
	  if (!this._value.isZero() && this._value.negate().equals(d._value)) {
	    return type + ' sign differs.';
	  }
	  if (!this._value.equals(d._value)) {
	    return type + ' value differs.';
	  }
	  if (!this._is_native) {
	    if (!this._currency.equals(d._currency)) {
	      return 'Non-XRP currency differs.';
	    }
	    if (!ignore_issuer && !this._issuer.equals(d._issuer)) {
	      return 'Non-XRP issuer differs: ' + d._issuer.to_json() + '/' + this._issuer.to_json();
	    }
	  }
	};

	exports.Amount = Amount;

	// DEPRECATED: Include the corresponding files instead.
	exports.Currency = Currency;
	exports.Seed = Seed;
	exports.UInt160 = UInt160;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Routines for working with an account.
	//
	// You should not instantiate this class yourself, instead use Remote#account.
	//
	// Events:
	//   wallet_clean :  True, iff the wallet has been updated.
	//   wallet_dirty :  True, iff the wallet needs to be updated.
	//   balance:        The current stamp balance.
	//   balance_proposed
	//

	var _ = __webpack_require__(51);
	var async = __webpack_require__(91);
	var extend = __webpack_require__(77);
	var util = __webpack_require__(81);

	var _require = __webpack_require__(99);

	var createAccountID = _require.createAccountID;

	var _require2 = __webpack_require__(92);

	var encodeAccountID = _require2.encodeAccountID;

	var _require3 = __webpack_require__(76);

	var EventEmitter = _require3.EventEmitter;

	var _require4 = __webpack_require__(18);

	var hexToArray = _require4.hexToArray;

	var _require5 = __webpack_require__(25);

	var TransactionManager = _require5.TransactionManager;

	var _require6 = __webpack_require__(11);

	var UInt160 = _require6.UInt160;

	/**
	 * @constructor Account
	 * @param {Remote} remote
	 * @param {String} account
	 */

	function Account(remote, account) {
	  EventEmitter.call(this);

	  var self = this;

	  this._remote = remote;
	  this._account = UInt160.from_json(account);
	  this._account_id = this._account.to_json();
	  this._subs = 0;

	  // Ledger entry object
	  // Important: This must never be overwritten, only extend()-ed
	  this._entry = {};

	  function listenerAdded(type) {
	    if (_.includes(Account.subscribeEvents, type)) {
	      if (!self._subs && self._remote._connected) {
	        self._remote.requestSubscribe().addAccount(self._account_id).broadcast().request();
	      }
	      self._subs += 1;
	    }
	  }

	  this.on('newListener', listenerAdded);

	  function listenerRemoved(type) {
	    if (_.includes(Account.subscribeEvents, type)) {
	      self._subs -= 1;
	      if (!self._subs && self._remote._connected) {
	        self._remote.requestUnsubscribe().addAccount(self._account_id).broadcast().request();
	      }
	    }
	  }

	  this.on('removeListener', listenerRemoved);

	  function attachAccount(request) {
	    if (self._account.is_valid() && self._subs) {
	      request.addAccount(self._account_id);
	    }
	  }

	  this._remote.on('prepare_subscribe', attachAccount);

	  function handleTransaction(transaction) {
	    if (!transaction.mmeta) {
	      return;
	    }

	    var changed = false;

	    transaction.mmeta.each(function (an) {
	      var isAccount = an.fields.Account === self._account_id;
	      var isAccountRoot = isAccount && an.entryType === 'AccountRoot';

	      if (isAccountRoot) {
	        extend(self._entry, an.fieldsNew, an.fieldsFinal);
	        changed = true;
	      }
	    });

	    if (changed) {
	      self.emit('entry', self._entry);
	    }
	  }

	  this.on('transaction', handleTransaction);

	  this._transactionManager = new TransactionManager(this);

	  return this;
	}

	util.inherits(Account, EventEmitter);

	/**
	 * List of events that require a remote subscription to the account.
	 */

	Account.subscribeEvents = ['transaction', 'entry'];

	Account.prototype.toJson = function () {
	  return this._account.to_json();
	};

	/**
	 * Whether the AccountId is valid.
	 *
	 * Note: This does not tell you whether the account exists in the ledger.
	 */

	Account.prototype.isValid = function () {
	  return this._account.is_valid();
	};

	/**
	 * Request account info
	 *
	 * @param {Function} callback
	 */

	Account.prototype.getInfo = function (callback) {
	  return this._remote.requestAccountInfo({ account: this._account_id }, callback);
	};

	/**
	 * Retrieve the current AccountRoot entry.
	 *
	 * To keep up-to-date with changes to the AccountRoot entry, subscribe to the
	 * 'entry' event.
	 *
	 * @param {Function} callback
	 */

	Account.prototype.entry = function (callback_) {
	  var self = this;
	  var callback = typeof callback_ === 'function' ? callback_ : _.noop;

	  function accountInfo(err, info) {
	    if (err) {
	      callback(err);
	    } else {
	      extend(self._entry, info.account_data);
	      self.emit('entry', self._entry);
	      callback(null, info);
	    }
	  }

	  this.getInfo(accountInfo);

	  return this;
	};

	Account.prototype.getNextSequence = function (callback_) {
	  var callback = typeof callback_ === 'function' ? callback_ : _.noop;

	  function isNotFound(err) {
	    return err && typeof err === 'object' && typeof err.remote === 'object' && err.remote.error === 'actNotFound';
	  }

	  function accountInfo(err, info) {
	    if (isNotFound(err)) {
	      // New accounts will start out as sequence one
	      callback(null, 1);
	    } else if (err) {
	      callback(err);
	    } else {
	      callback(null, info.account_data.Sequence);
	    }
	  }

	  this.getInfo(accountInfo);

	  return this;
	};

	/**
	 * Retrieve this account's Ripple trust lines.
	 *
	 * To keep up-to-date with changes to the AccountRoot entry, subscribe to the
	 * 'lines' event. (Not yet implemented.)
	 *
	 * @param {function(err, lines)} callback Called with the result
	 */

	Account.prototype.lines = function (callback_) {
	  var self = this;
	  var callback = typeof callback_ === 'function' ? callback_ : _.noop;

	  function accountLines(err, res) {
	    if (err) {
	      callback(err);
	    } else {
	      self._lines = res.lines;
	      self.emit('lines', self._lines);
	      callback(null, res);
	    }
	  }

	  this._remote.requestAccountLines({ account: this._account_id }, accountLines);

	  return this;
	};

	/**
	 * Retrieve this account's single trust line.
	 *
	 * @param {string} currency Currency
	 * @param {string} address Ripple address
	 * @param {function(err, line)} callback Called with the result
	 * @returns {Account}
	 */

	Account.prototype.line = function (currency, address, callback_) {
	  var self = this;
	  var callback = typeof callback_ === 'function' ? callback_ : _.noop;

	  self.lines(function (err, data) {
	    if (err) {
	      return callback(err);
	    }

	    var line = undefined;

	    for (var i = 0; i < data.lines.length; i++) {
	      var l = data.lines[i];
	      if (l.account === address && l.currency === currency) {
	        line = l;
	        break;
	      }
	    }

	    callback(null, line);
	  });

	  return this;
	};

	/**
	 * Notify object of a relevant transaction.
	 *
	 * This is only meant to be called by the Remote class. You should never have to
	 * call this yourself.
	 *
	 * @param {Object} message
	 */

	Account.prototype.notify = Account.prototype.notifyTx = function (transaction) {
	  // Only trigger the event if the account object is actually
	  // subscribed - this prevents some weird phantom events from
	  // occurring.
	  if (!this._subs) {
	    return;
	  }

	  this.emit('transaction', transaction);

	  var account = transaction.transaction.Account;

	  if (!account) {
	    return;
	  }

	  var isThisAccount = account === this._account_id;

	  this.emit(isThisAccount ? 'transaction-outbound' : 'transaction-inbound', transaction);
	};

	/**
	 * Submit a transaction to an account's
	 * transaction manager
	 *
	 * @param {Transaction} transaction
	 */

	Account.prototype.submit = function (transaction) {
	  this._transactionManager.submit(transaction);
	};

	/**
	 *  Check whether the given public key is valid for this account
	 *
	 *  @param {Hex-encoded_String|RippleAddress} public_key Public key
	 *  @param {Function} callback Is a callback
	 *  @returns {void}
	 *
	 *  @callback
	 *  param {Error} err
	 *  param {Boolean} true if the public key is valid and active, false otherwise
	 */
	Account.prototype.publicKeyIsActive = function (public_key, callback) {
	  var self = this;
	  var public_key_as_uint160 = undefined;

	  try {
	    public_key_as_uint160 = Account._publicKeyToAddress(public_key);
	  } catch (err) {
	    return callback(err);
	  }

	  function getAccountInfo(async_callback) {
	    self.getInfo(function (err, account_info_res) {

	      // If the remote responds with an Account Not Found error then the account
	      // is unfunded and thus we can assume that the master key is active
	      if (err && err.remote && err.remote.error === 'actNotFound') {
	        async_callback(null, null);
	      } else {
	        async_callback(err, account_info_res);
	      }
	    });
	  }

	  function publicKeyIsValid(account_info_res, async_callback) {
	    // Catch the case of unfunded accounts
	    if (!account_info_res) {

	      if (public_key_as_uint160 === self._account_id) {
	        async_callback(null, true);
	      } else {
	        async_callback(null, false);
	      }

	      return;
	    }

	    var account_info = account_info_res.account_data;

	    // Respond with true if the RegularKey is set and matches the given
	    // public key or if the public key matches the account address and
	    // the lsfDisableMaster is not set
	    if (account_info.RegularKey && account_info.RegularKey === public_key_as_uint160) {
	      async_callback(null, true);
	    } else if (account_info.Account === public_key_as_uint160 && (account_info.Flags & 0x00100000) === 0) {
	      async_callback(null, true);
	    } else {
	      async_callback(null, false);
	    }
	  }

	  var steps = [getAccountInfo, publicKeyIsValid];

	  async.waterfall(steps, callback);
	};

	/**
	 *  Convert a hex-encoded public key to a Ripple Address
	 *
	 *  @static
	 *
	 *  @param {Hex-encoded_string|RippleAddress} public_key Public key
	 *  @returns {RippleAddress} Ripple Address
	 */
	Account._publicKeyToAddress = function (public_key) {
	  // Based on functions in /src/js/ripple/keypair.js
	  function hexToUInt160(publicKey) {
	    return encodeAccountID(createAccountID(hexToArray(publicKey)));
	  }

	  if (UInt160.is_valid(public_key)) {
	    return public_key;
	  } else if (/^[0-9a-fA-F]+$/.test(public_key)) {
	    return hexToUInt160(public_key);
	  } else {
	    // eslint-disable-line no-else-return
	    throw new Error('Public key is invalid. Must be a UInt160 or a hex string');
	  }
	};

	exports.Account = Account;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(81);
	var lodash = __webpack_require__(51);
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var utils = __webpack_require__(18);
	var sjclcodec = __webpack_require__(78);
	var Amount = __webpack_require__(5).Amount;
	var Currency = __webpack_require__(5).Currency;
	var UInt160 = __webpack_require__(5).UInt160;
	var Seed = __webpack_require__(13).Seed;
	var SerializedObject = __webpack_require__(15).SerializedObject;
	var RippleError = __webpack_require__(16).RippleError;
	var hashprefixes = __webpack_require__(53);
	var log = __webpack_require__(23).internal.sub('transaction');

	/**
	 * @constructor Transaction
	 *
	 * Notes:
	 * All transactions including those with local and malformed errors may be
	 * forwarded anyway.
	 *
	 * A malicous server can:
	 *  - may or may not forward
	 *  - give any result
	 *    + it may declare something correct as incorrect or something incorrect
	 *      as correct
	 *    + it may not communicate with the rest of the network
	 */

	function Transaction(remote) {
	  EventEmitter.call(this);

	  var self = this;
	  var remoteExists = typeof remote === 'object';

	  this.remote = remote;
	  this.tx_json = { Flags: 0 };
	  this._secret = undefined;
	  this._build_path = false;
	  this._should_resubmit = remoteExists ? this.remote.automatic_resubmission : true;
	  this._maxFee = remoteExists ? this.remote.max_fee : undefined;
	  this.state = 'unsubmitted';
	  this.finalized = false;
	  this.previousSigningHash = undefined;
	  this.submitIndex = undefined;
	  this.canonical = remoteExists ? this.remote.canonical_signing : true;
	  this.submittedIDs = [];
	  this.attempts = 0;
	  this.submissions = 0;
	  this.responses = 0;

	  this.once('success', function (message) {
	    // Transaction definitively succeeded
	    self.setState('validated');
	    self.finalize(message);
	    if (self._successHandler) {
	      self._successHandler(message);
	    }
	  });

	  this.once('error', function (message) {
	    // Transaction definitively failed
	    self.setState('failed');
	    self.finalize(message);
	    if (self._errorHandler) {
	      self._errorHandler(message);
	    }
	  });

	  this.once('submitted', function () {
	    // Transaction was submitted to the network
	    self.setState('submitted');
	  });

	  this.once('proposed', function () {
	    // Transaction was submitted successfully to the network
	    self.setState('pending');
	  });
	}

	util.inherits(Transaction, EventEmitter);

	// This is currently a constant in rippled known as the "base reference"
	// https://wiki.ripple.com/Transaction_Fee#Base_Fees
	Transaction.fee_units = {
	  'default': 10
	};

	Transaction.flags = {
	  // Universal flags can apply to any transaction type
	  Universal: {
	    FullyCanonicalSig: 0x80000000
	  },

	  AccountSet: {
	    RequireDestTag: 0x00010000,
	    OptionalDestTag: 0x00020000,
	    RequireAuth: 0x00040000,
	    OptionalAuth: 0x00080000,
	    DisallowXRP: 0x00100000,
	    AllowXRP: 0x00200000
	  },

	  TrustSet: {
	    SetAuth: 0x00010000,
	    NoRipple: 0x00020000,
	    SetNoRipple: 0x00020000,
	    ClearNoRipple: 0x00040000,
	    SetFreeze: 0x00100000,
	    ClearFreeze: 0x00200000
	  },

	  OfferCreate: {
	    Passive: 0x00010000,
	    ImmediateOrCancel: 0x00020000,
	    FillOrKill: 0x00040000,
	    Sell: 0x00080000
	  },

	  Payment: {
	    NoRippleDirect: 0x00010000,
	    PartialPayment: 0x00020000,
	    LimitQuality: 0x00040000
	  }
	};

	// The following are integer (as opposed to bit) flags
	// that can be set for particular transactions in the
	// SetFlag or ClearFlag field
	Transaction.set_clear_flags = {
	  AccountSet: {
	    asfRequireDest: 1,
	    asfRequireAuth: 2,
	    asfDisallowXRP: 3,
	    asfDisableMaster: 4,
	    asfAccountTxnID: 5,
	    asfNoFreeze: 6,
	    asfGlobalFreeze: 7,
	    asfDefaultRipple: 8
	  }
	};

	Transaction.MEMO_TYPES = {};

	/* eslint-disable max-len */

	// URL characters per RFC 3986
	Transaction.MEMO_REGEX = /^[0-9a-zA-Z-\.\_\~\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\%]+$/;
	/* eslint-enable max-len */

	Transaction.formats = __webpack_require__(17).tx;

	Transaction.prototype.consts = {
	  telLOCAL_ERROR: -399,
	  temMALFORMED: -299,
	  tefFAILURE: -199,
	  terRETRY: -99,
	  tesSUCCESS: 0,
	  tecCLAIMED: 100
	};

	Transaction.prototype.isTelLocal = function (ter) {
	  return ter >= this.consts.telLOCAL_ERROR && ter < this.consts.temMALFORMED;
	};

	Transaction.prototype.isTemMalformed = function (ter) {
	  return ter >= this.consts.temMALFORMED && ter < this.consts.tefFAILURE;
	};

	Transaction.prototype.isTefFailure = function (ter) {
	  return ter >= this.consts.tefFAILURE && ter < this.consts.terRETRY;
	};

	Transaction.prototype.isTerRetry = function (ter) {
	  return ter >= this.consts.terRETRY && ter < this.consts.tesSUCCESS;
	};

	Transaction.prototype.isTepSuccess = function (ter) {
	  return ter >= this.consts.tesSUCCESS;
	};

	Transaction.prototype.isTecClaimed = function (ter) {
	  return ter >= this.consts.tecCLAIMED;
	};

	Transaction.prototype.isRejected = function (ter) {
	  return this.isTelLocal(ter) || this.isTemMalformed(ter) || this.isTefFailure(ter);
	};

	Transaction.from_json = function (j) {
	  return new Transaction().setJson(j);
	};

	Transaction.prototype.setJson = Transaction.prototype.parseJson = function (v) {
	  this.tx_json = v;
	  return this;
	};

	/**
	 * Set state on the condition that the state is different
	 *
	 * @param {String} state
	 */

	Transaction.prototype.setState = function (state) {
	  if (this.state !== state) {
	    this.state = state;
	    this.emit('state', state);
	  }
	};

	Transaction.prototype.setResubmittable = function (v) {
	  if (typeof v === 'boolean') {
	    this._should_resubmit = v;
	  }
	};
	Transaction.prototype.isResubmittable = function () {
	  return this._should_resubmit;
	};

	/**
	 * Finalize transaction. This will prevent future activity
	 *
	 * @param {Object} message
	 * @api private
	 */

	Transaction.prototype.finalize = function (message) {
	  this.finalized = true;

	  if (this.result) {
	    this.result.ledger_index = message.ledger_index;
	    this.result.ledger_hash = message.ledger_hash;
	  } else {
	    this.result = message;
	    this.result.tx_json = this.tx_json;
	  }

	  this.emit('cleanup');
	  this.emit('final', message);

	  if (this.remote && this.remote.trace) {
	    log.info('transaction finalized:', this.tx_json, this.getManager()._pending.getLength());
	  }

	  return this;
	};

	/**
	 * Get transaction Account
	 *
	 * @return {Account}
	 */

	Transaction.prototype.getAccount = function () {
	  return this.tx_json.Account;
	};

	/**
	 * Get TransactionType
	 *
	 * @return {String}
	 */

	Transaction.prototype.getType = Transaction.prototype.getTransactionType = function () {
	  return this.tx_json.TransactionType;
	};

	/**
	 * Get transaction TransactionManager
	 *
	 * @param [String] account
	 * @return {TransactionManager]
	 */

	Transaction.prototype.getManager = function (account) {
	  if (!this.remote) {
	    return undefined;
	  }

	  return this.remote.account(account || this.getAccount())._transactionManager;
	};

	/**
	 * Get transaction secret
	 *
	 * @param [String] account
	 */

	Transaction.prototype.getSecret = Transaction.prototype._accountSecret = function (account) {
	  if (!this.remote) {
	    return undefined;
	  }

	  return this.remote.secrets[account || this.getAccount()];
	};

	/**
	 * Returns the number of fee units this transaction will cost.
	 *
	 * Each Ripple transaction based on its type and makeup costs a certain number
	 * of fee units. The fee units are calculated on a per-server basis based on the
	 * current load on both the network and the server.
	 *
	 * @see https://ripple.com/wiki/Transaction_Fee
	 *
	 * @return {Number} Number of fee units for this transaction.
	 */

	Transaction.prototype._getFeeUnits = Transaction.prototype.feeUnits = function () {
	  return Transaction.fee_units['default'];
	};

	/**
	 * Compute median server fee
	 *
	 * @return {String} median fee
	 */

	Transaction.prototype._computeFee = function () {
	  if (!this.remote) {
	    return undefined;
	  }

	  var servers = this.remote._servers;
	  var fees = [];

	  for (var i = 0; i < servers.length; i++) {
	    var server = servers[i];
	    if (server.isConnected()) {
	      fees.push(Number(server._computeFee(this._getFeeUnits())));
	    }
	  }

	  switch (fees.length) {
	    case 0:
	      return undefined;
	    case 1:
	      return String(fees[0]);
	  }

	  fees.sort(function ascending(a, b) {
	    if (a > b) {
	      return 1;
	    } else if (a < b) {
	      return -1;
	    }
	    return 0;
	  });

	  var midInd = Math.floor(fees.length / 2);

	  var median = fees.length % 2 === 0 ? Math.floor(0.5 + (fees[midInd] + fees[midInd - 1]) / 2) : fees[midInd];

	  return String(median);
	};

	/**
	 * Attempts to complete the transaction for submission.
	 *
	 * This function seeks to fill out certain fields, such as Fee and
	 * SigningPubKey, which can be determined by the library based on network
	 * information and other fields.
	 *
	 * @return {Boolean|Transaction} If succeeded, return transaction. Otherwise
	 * return `false`
	 */

	Transaction.prototype.complete = function () {
	  if (this.remote) {
	    if (!this.remote.trusted && !this.remote.local_signing) {
	      this.emit('error', new RippleError('tejServerUntrusted', 'Attempt to give secret to untrusted server'));
	      return false;
	    }
	  }

	  if (!this._secret) {
	    this._secret = this.getSecret();
	  }

	  // Try to auto-fill the secret
	  if (!this._secret) {
	    this.emit('error', new RippleError('tejSecretUnknown', 'Missing secret'));
	    return false;
	  }

	  if (typeof this.tx_json.SigningPubKey === 'undefined') {
	    try {
	      var seed = Seed.from_json(this._secret);
	      var key = seed.get_key();
	      this.tx_json.SigningPubKey = key.pubKeyHex();
	    } catch (e) {
	      this.emit('error', new RippleError('tejSecretInvalid', 'Invalid secret'));
	      return false;
	    }
	  }

	  // If the Fee hasn't been set, one needs to be computed by
	  // an assigned server
	  if (this.remote && typeof this.tx_json.Fee === 'undefined') {
	    if (this.remote.local_fee || !this.remote.trusted) {
	      this.tx_json.Fee = this._computeFee();
	      if (!this.tx_json.Fee) {
	        this.emit('error', new RippleError('tejUnconnected'));
	        return false;
	      }
	    }
	  }

	  if (Number(this.tx_json.Fee) > this._maxFee) {
	    this.emit('error', new RippleError('tejMaxFeeExceeded', 'Max fee exceeded'));
	    return false;
	  }

	  // Set canonical flag - this enables canonicalized signature checking
	  if (this.remote && this.remote.local_signing && this.canonical) {
	    this.tx_json.Flags |= Transaction.flags.Universal.FullyCanonicalSig;

	    // JavaScript converts operands to 32-bit signed ints before doing bitwise
	    // operations. We need to convert it back to an unsigned int.
	    this.tx_json.Flags = this.tx_json.Flags >>> 0;
	  }

	  return this.tx_json;
	};

	Transaction.prototype.serialize = function () {
	  return SerializedObject.from_json(this.tx_json);
	};

	Transaction.prototype.signingHash = function (testnet) {
	  return this.hash(testnet ? 'HASH_TX_SIGN_TESTNET' : 'HASH_TX_SIGN');
	};

	Transaction.prototype.signingData = function () {
	  var so = new SerializedObject();
	  so.append(hashprefixes.HASH_TX_SIGN_BYTES);
	  so.parse_json(this.tx_json);
	  return so;
	};

	Transaction.prototype.hash = function (prefix_, asUINT256, serialized) {
	  var prefix = undefined;

	  if (typeof prefix_ !== 'string') {
	    prefix = hashprefixes.HASH_TX_ID;
	  } else if (!hashprefixes.hasOwnProperty(prefix_)) {
	    throw new Error('Unknown hashing prefix requested: ' + prefix_);
	  } else {
	    prefix = hashprefixes[prefix_];
	  }

	  var hash = (serialized || this.serialize()).hash(prefix);

	  return asUINT256 ? hash : hash.to_hex();
	};

	Transaction.prototype.sign = function () {
	  var seed = Seed.from_json(this._secret);
	  var prev_sig = this.tx_json.TxnSignature;

	  delete this.tx_json.TxnSignature;

	  var hash = this.signingHash();

	  // If the hash is the same, we can re-use the previous signature
	  if (prev_sig && hash === this.previousSigningHash) {
	    this.tx_json.TxnSignature = prev_sig;
	    return this;
	  }

	  var key = seed.get_key();
	  var hex = key.signHex(this.signingData().buffer);
	  this.tx_json.TxnSignature = hex;
	  this.previousSigningHash = hash;

	  return this;
	};

	/**
	 * Add an ID to cached list of submitted IDs
	 *
	 * @param {String} transaction id
	 * @api private
	 */

	Transaction.prototype.addId = function (id) {
	  if (!lodash.contains(this.submittedIDs, id)) {
	    this.submittedIDs.unshift(id);
	  }
	};

	/**
	 * Find ID within cached received (validated) IDs. If this transaction has
	 * an ID that is within the cache, it has been seen validated, so return the
	 * received message
	 *
	 * @param {Object} cache
	 * @return {Object} message
	 * @api private
	 */

	Transaction.prototype.findId = function (cache) {
	  var cachedTransactionID = lodash.detect(this.submittedIDs, function (id) {
	    return cache.hasOwnProperty(id);
	  });
	  return cache[cachedTransactionID];
	};

	/**
	 * Set client ID. This is an identifier specified by the user of the API to
	 * identify a transaction in the event of a disconnect. It is not currently
	 * persisted in the transaction itself, but used offline for identification.
	 * In applications that require high reliability, client-specified ID should
	 * be persisted such that one could map it to submitted transactions. Use
	 * .summary() for a consistent transaction summary output for persisitng. In
	 * the future, this ID may be stored in the transaction itself (in the ledger)
	 *
	 * @param {String} id
	 */

	Transaction.prototype.setClientID = Transaction.prototype.clientID = function (id) {
	  if (typeof id === 'string') {
	    this._clientID = id;
	  }
	  return this;
	};

	/**
	 * Set LastLedgerSequence as the absolute last ledger sequence the transaction
	 * is valid for. LastLedgerSequence is set automatically if not set using this
	 * method
	 *
	 * @param {Number} ledger index
	 */

	Transaction.prototype.setLastLedgerSequence = Transaction.prototype.setLastLedger = Transaction.prototype.lastLedger = function (sequence) {
	  this._setUInt32('LastLedgerSequence', sequence);
	  this._setLastLedger = true;
	  return this;
	};

	/**
	 * Set max fee. Submission will abort if this is exceeded. Specified fee must
	 * be >= 0.
	 *
	 * @param {Number} fee The proposed fee
	 */

	Transaction.prototype.setMaxFee = Transaction.prototype.maxFee = function (fee) {
	  if (typeof fee === 'number' && fee >= 0) {
	    this._setMaxFee = true;
	    this._maxFee = fee;
	  }
	  return this;
	};

	/*
	 * Set the fee user will pay to the network for submitting this transaction.
	 * Specified fee must be >= 0.
	 *
	 * @param {Number} fee The proposed fee
	 *
	 * @returns {Transaction} calling instance for chaining
	 */
	Transaction.prototype.setFixedFee = function (fee) {
	  if (typeof fee === 'number' && fee >= 0) {
	    this._setFixedFee = true;
	    this.tx_json.Fee = String(fee);
	  }

	  return this;
	};

	/**
	 * Set secret If the secret has been set with Remote.setSecret, it does not
	 * need to be provided
	 *
	 * @param {String} secret
	 */

	Transaction.prototype.setSecret = Transaction.prototype.secret = function (secret) {
	  if (typeof secret === 'string') {
	    this._secret = secret;
	  }
	  return this;
	};

	Transaction.prototype.setType = function (type) {
	  if (lodash.isUndefined(Transaction.formats, type)) {
	    throw new Error('TransactionType must be a valid transaction type');
	  }

	  this.tx_json.TransactionType = type;

	  return this;
	};

	Transaction.prototype._setUInt32 = function (name, value, options_) {
	  var options = lodash.merge({}, options_);
	  var isValidUInt32 = typeof value === 'number' && value >= 0 && value < Math.pow(256, 4);

	  if (!isValidUInt32) {
	    throw new Error(name + ' must be a valid UInt32');
	  }
	  if (!lodash.isUndefined(options.min_value) && value < options.min_value) {
	    throw new Error(name + ' must be >= ' + options.min_value);
	  }

	  this.tx_json[name] = value;

	  return this;
	};

	/**
	 * Set SourceTag
	 *
	 * @param {Number} source tag
	 */

	Transaction.prototype.setSourceTag = Transaction.prototype.sourceTag = function (tag) {
	  return this._setUInt32('SourceTag', tag);
	};

	Transaction.prototype._setAccount = function (name, value) {
	  var uInt160 = UInt160.from_json(value);

	  if (!uInt160.is_valid()) {
	    throw new Error(name + ' must be a valid account');
	  }

	  this.tx_json[name] = uInt160.to_json();

	  return this;
	};

	Transaction.prototype.setAccount = function (account) {
	  return this._setAccount('Account', account);
	};

	Transaction.prototype._setAmount = function (name, amount, options_) {
	  var options = lodash.merge({ no_native: false }, options_);
	  var parsedAmount = Amount.from_json(amount);

	  if (parsedAmount.is_negative()) {
	    throw new Error(name + ' value must be non-negative');
	  }

	  var isNative = parsedAmount.currency().is_native();

	  if (isNative && options.no_native) {
	    throw new Error(name + ' must be a non-native amount');
	  }
	  if (!(isNative || parsedAmount.currency().is_valid())) {
	    throw new Error(name + ' must have a valid currency');
	  }
	  if (!(isNative || parsedAmount.issuer().is_valid())) {
	    throw new Error(name + ' must have a valid issuer');
	  }

	  this.tx_json[name] = parsedAmount.to_json();

	  return this;
	};

	Transaction.prototype._setHash256 = function (name, value, options_) {
	  if (typeof value !== 'string') {
	    throw new Error(name + ' must be a valid Hash256');
	  }

	  var options = lodash.merge({ pad: false }, options_);
	  var hash256 = value;

	  if (options.pad) {
	    while (hash256.length < 64) {
	      hash256 += '0';
	    }
	  }

	  if (!/^[0-9A-Fa-f]{64}$/.test(hash256)) {
	    throw new Error(name + ' must be a valid Hash256');
	  }

	  this.tx_json[name] = hash256;

	  return this;
	};

	Transaction.prototype.setAccountTxnID = Transaction.prototype.accountTxnID = function (id) {
	  return this._setHash256('AccountTxnID', id);
	};

	/**
	 * Set Flags. You may specify flags as a number, as the string name of the
	 * flag, or as an array of strings.
	 *
	 * setFlags(Transaction.flags.AccountSet.RequireDestTag)
	 * setFlags('RequireDestTag')
	 * setFlags('RequireDestTag', 'RequireAuth')
	 * setFlags([ 'RequireDestTag', 'RequireAuth' ])
	 *
	 * @param {Number|String|Array} flags
	 */

	Transaction.prototype.setFlags = function (flags) {
	  if (flags === undefined) {
	    return this;
	  }

	  if (typeof flags === 'number') {
	    this.tx_json.Flags = flags;
	    return this;
	  }

	  var transaction_flags = Transaction.flags[this.getType()] || {};
	  var flag_set = Array.isArray(flags) ? flags : [].slice.call(arguments);

	  for (var i = 0, l = flag_set.length; i < l; i++) {
	    var flag = flag_set[i];

	    if (transaction_flags.hasOwnProperty(flag)) {
	      this.tx_json.Flags += transaction_flags[flag];
	    } else {
	      // XXX Should throw?
	      this.emit('error', new RippleError('tejInvalidFlag'));
	      return this;
	    }
	  }

	  return this;
	};

	/**
	 * Add a Memo to transaction.
	 *
	 * @param [String] memoType
	 * - describes what the data represents, must contain valid URL characters
	 * @param [String] memoFormat
	 * - describes what format the data is in, MIME type, must contain valid URL
	 * - characters
	 * @param [String] memoData
	 * - data for the memo, can be any JS object. Any object other than string will
	 *   be stringified (JSON) for transport
	 */

	Transaction.prototype.addMemo = function (options_) {
	  var options = undefined;

	  if (typeof options_ === 'object') {
	    options = lodash.merge({}, options_);
	  } else {
	    options = {
	      memoType: arguments[0],
	      memoFormat: arguments[1],
	      memoData: arguments[2]
	    };
	  }

	  function convertStringToHex(string) {
	    var utf8String = sjclcodec.utf8String.toBits(string);
	    return sjclcodec.hex.fromBits(utf8String).toUpperCase();
	  }

	  var memo = {};
	  var memoRegex = Transaction.MEMO_REGEX;
	  var memoType = options.memoType;
	  var memoFormat = options.memoFormat;
	  var memoData = options.memoData;

	  if (memoType) {
	    if (!(lodash.isString(memoType) && memoRegex.test(memoType))) {
	      throw new Error('MemoType must be a string containing only valid URL characters');
	    }
	    if (Transaction.MEMO_TYPES[memoType]) {
	      // XXX Maybe in the future we want a schema validator for
	      // memo types
	      memoType = Transaction.MEMO_TYPES[memoType];
	    }
	    memo.MemoType = convertStringToHex(memoType);
	  }

	  if (memoFormat) {
	    if (!(lodash.isString(memoFormat) && memoRegex.test(memoFormat))) {
	      throw new Error('MemoFormat must be a string containing only valid URL characters');
	    }

	    memo.MemoFormat = convertStringToHex(memoFormat);
	  }

	  if (memoData) {
	    if (typeof memoData !== 'string') {
	      if (memoFormat.toLowerCase() === 'json') {
	        try {
	          memoData = JSON.stringify(memoData);
	        } catch (e) {
	          throw new Error('MemoFormat json with invalid JSON in MemoData field');
	        }
	      } else {
	        throw new Error('MemoData can only be a JSON object with a valid json MemoFormat');
	      }
	    }

	    memo.MemoData = convertStringToHex(memoData);
	  }

	  this.tx_json.Memos = (this.tx_json.Memos || []).concat({ Memo: memo });

	  return this;
	};

	/**
	 * Construct an 'AccountSet' transaction
	 *
	 * Note that bit flags can be set using the .setFlags() method but for
	 * 'AccountSet' transactions there is an additional way to modify AccountRoot
	 * flags. The values available for the SetFlag and ClearFlag are as follows:
	 *
	 * asfRequireDest:    Require a destination tag
	 * asfRequireAuth:    Authorization is required to extend trust
	 * asfDisallowXRP:    XRP should not be sent to this account
	 * asfDisableMaster:  Disallow use of the master key
	 * asfNoFreeze:       Permanently give up the ability to freeze individual
	 *                    trust lines. This flag can never be cleared.
	 * asfGlobalFreeze:   Freeze all assets issued by this account
	 *
	 * @param [String] set flag
	 * @param [String] clear flag
	 */

	Transaction.prototype.accountSet = function (options_) {
	  var options = undefined;

	  if (typeof options_ === 'object') {
	    options = lodash.merge({}, options_);

	    if (lodash.isUndefined(options.account)) {
	      options.account = options.src;
	    }
	    if (lodash.isUndefined(options.set_flag)) {
	      options.set_flag = options.set;
	    }
	    if (lodash.isUndefined(options.clear_flag)) {
	      options.clear_flag = options.clear;
	    }
	  } else {
	    options = {
	      account: arguments[0],
	      set_flag: arguments[1],
	      clear_flag: arguments[2]
	    };
	  }

	  this.setType('AccountSet');
	  this.setAccount(options.account);

	  if (!lodash.isUndefined(options.set_flag)) {
	    this.setSetFlag(options.set_flag);
	  }
	  if (!lodash.isUndefined(options.clear_flag)) {
	    this.setClearFlag(options.clear_flag);
	  }

	  return this;
	};

	Transaction.prototype.setAccountSetFlag = function (name, value) {
	  var accountSetFlags = Transaction.set_clear_flags.AccountSet;
	  var flagValue = value;

	  if (typeof flagValue === 'string') {
	    flagValue = /^asf/.test(flagValue) ? accountSetFlags[flagValue] : accountSetFlags['asf' + flagValue];
	  }

	  if (!lodash.contains(lodash.values(accountSetFlags), flagValue)) {
	    throw new Error(name + ' must be a valid AccountSet flag');
	  }

	  this.tx_json[name] = flagValue;

	  return this;
	};

	Transaction.prototype.setSetFlag = function (flag) {
	  return this.setAccountSetFlag('SetFlag', flag);
	};

	Transaction.prototype.setClearFlag = function (flag) {
	  return this.setAccountSetFlag('ClearFlag', flag);
	};

	/**
	 * Set TransferRate for AccountSet
	 *
	 * @param {Number} transfer rate
	 */

	Transaction.prototype.setTransferRate = Transaction.prototype.transferRate = function (rate) {
	  var transferRate = rate;

	  if (transferRate === 0) {
	    // Clear TransferRate
	    this.tx_json.TransferRate = transferRate;
	    return this;
	  }

	  // if (rate >= 1 && rate < 2) {
	  // transferRate *= 1e9;
	  // }

	  return this._setUInt32('TransferRate', transferRate, { min_value: 1e9 });
	};

	/**
	 * Construct a 'SetRegularKey' transaction
	 *
	 * If the RegularKey is set, the private key that corresponds to it can be
	 * used to sign transactions instead of the master key
	 *
	 * The RegularKey must be a valid Ripple Address, or a Hash160 of the public
	 * key corresponding to the new private signing key.
	 *
	 * @param {String} account
	 * @param {String} regular key
	 */

	Transaction.prototype.setRegularKey = function (options_) {
	  var options = undefined;

	  if (typeof options_ === 'object') {
	    options = lodash.merge({}, options_);

	    if (lodash.isUndefined(options.account)) {
	      options.account = options.src;
	    }
	  } else {
	    options = {
	      account: arguments[0],
	      regular_key: arguments[1]
	    };
	  }

	  this.setType('SetRegularKey');
	  this.setAccount(options.account);

	  if (!lodash.isUndefined(options.regular_key)) {
	    this._setAccount('RegularKey', options.regular_key);
	  }

	  return this;
	};

	/**
	 * Construct a 'TrustSet' transaction
	 *
	 * @param {String} account
	 * @param [Amount] limit
	 * @param [Number] quality in
	 * @param [Number] quality out
	 */

	Transaction.prototype.trustSet = Transaction.prototype.rippleLineSet = function (options_) {
	  var options = undefined;

	  if (typeof options_ === 'object') {
	    options = lodash.merge({}, options_);

	    if (lodash.isUndefined(options.account)) {
	      options.account = options.src;
	    }
	  } else {
	    options = {
	      account: arguments[0],
	      limit: arguments[1],
	      quality_in: arguments[2],
	      quality_out: arguments[3]
	    };
	  }

	  this.setType('TrustSet');
	  this.setAccount(options.account);

	  if (!lodash.isUndefined(options.limit)) {
	    this.setLimit(options.limit);
	  }
	  if (!lodash.isUndefined(options.quality_in)) {
	    this.setQualityIn(options.quality_in);
	  }
	  if (!lodash.isUndefined(options.quality_out)) {
	    this.setQualityOut(options.quality_out);
	  }

	  // XXX Throw an error if nothing is set.

	  return this;
	};

	Transaction.prototype.setLimit = function (amount) {
	  return this._setAmount('LimitAmount', amount, { no_native: true });
	};

	Transaction.prototype.setQualityIn = function (quality) {
	  return this._setUInt32('QualityIn', quality);
	};

	Transaction.prototype.setQualityOut = function (quality) {
	  return this._setUInt32('QualityOut', quality);
	};

	/**
	 * Construct a 'Payment' transaction
	 *
	 * Relevant setters:
	 *  - setPaths()
	 *  - setBuildPath()
	 *  - addPath()
	 *  - setSourceTag()
	 *  - setDestinationTag()
	 *  - setSendMax()
	 *  - setFlags()
	 *
	 *  @param {String} source account
	 *  @param {String} destination account
	 *  @param {Amount} payment amount
	 */

	Transaction.prototype.payment = function (options_) {
	  var options = undefined;

	  if (typeof options_ === 'object') {
	    options = lodash.merge({}, options_);

	    if (lodash.isUndefined(options.account)) {
	      options.account = options.src || options.from;
	    }
	    if (lodash.isUndefined(options.destination)) {
	      options.destination = options.dst || options.to;
	    }
	  } else {
	    options = {
	      account: arguments[0],
	      destination: arguments[1],
	      amount: arguments[2]
	    };
	  }

	  this.setType('Payment');
	  this.setAccount(options.account);
	  this.setDestination(options.destination);
	  this.setAmount(options.amount);

	  return this;
	};

	Transaction.prototype.setAmount = function (amount) {
	  return this._setAmount('Amount', amount);
	};

	Transaction.prototype.setDestination = function (destination) {
	  return this._setAccount('Destination', destination);
	};

	/**
	 * Set SendMax for Payment
	 *
	 * @param {String|Object} send max amount
	 */

	Transaction.prototype.setSendMax = Transaction.prototype.sendMax = function (send_max) {
	  return this._setAmount('SendMax', send_max);
	};

	/**
	 * Set DeliverMin for Payment
	 *
	 * @param {String|Object} deliver_min minimum amount to deliver
	 */

	Transaction.prototype.setDeliverMin = function (deliver_min) {
	  return this._setAmount('DeliverMin', deliver_min);
	};

	/**
	 * Filter invalid properties from path objects in a path array
	 *
	 * Valid properties are:
	 * - account
	 * - currency
	 * - issuer
	 * - type_hex
	 *
	 * @param {Array} path
	 * @return {Array} filtered path
	 */

	Transaction._rewritePath = function (path) {
	  var newPath = path.map(function (node) {
	    var newNode = {};

	    if (node.hasOwnProperty('account')) {
	      newNode.account = UInt160.json_rewrite(node.account);
	    }

	    if (node.hasOwnProperty('issuer')) {
	      newNode.issuer = UInt160.json_rewrite(node.issuer);
	    }

	    if (node.hasOwnProperty('currency')) {
	      newNode.currency = Currency.json_rewrite(node.currency);
	    }

	    if (node.hasOwnProperty('type_hex')) {
	      newNode.type_hex = node.type_hex;
	    }

	    return newNode;
	  });

	  return newPath;
	};

	/**
	 * Add a path for Payment transaction
	 *
	 * @param {Array} path
	 */

	Transaction.prototype.addPath = Transaction.prototype.pathAdd = function (path) {
	  if (!Array.isArray(path)) {
	    throw new Error('Path must be an array');
	  }

	  this.tx_json.Paths = this.tx_json.Paths || [];
	  this.tx_json.Paths.push(Transaction._rewritePath(path));

	  return this;
	};

	/**
	 * Set paths for Payment transaction
	 *
	 * @param {Array} paths
	 */

	Transaction.prototype.setPaths = Transaction.prototype.paths = function (paths) {
	  if (!Array.isArray(paths)) {
	    throw new Error('Paths must be an array');
	  }

	  if (paths.length === 0) {
	    return this;
	  }

	  this.tx_json.Paths = [];
	  paths.forEach(this.addPath, this);

	  return this;
	};

	/**
	 * Set build_path to have server blindly construct a path for Payment
	 *
	 *  "blindly" because the sender has no idea of the actual cost must be less
	 *  than send max.
	 *
	 *  @param {Boolean} build path
	 */

	Transaction.prototype.setBuildPath = Transaction.prototype.buildPath = function (build) {
	  this._build_path = build === undefined || build;

	  return this;
	};

	/**
	 * Set DestinationTag for Payment transaction
	 *
	 * @param {Number} destination tag
	 */

	Transaction.prototype.setDestinationTag = Transaction.prototype.destinationTag = function (tag) {
	  return this._setUInt32('DestinationTag', tag);
	};

	/**
	 * Set InvoiceID for Payment transaction
	 *
	 * @param {String} id
	 */

	Transaction.prototype.setInvoiceID = Transaction.prototype.invoiceID = function (id) {
	  return this._setHash256('InvoiceID', id, { pad: true });
	};

	/**
	 * Construct an 'OfferCreate transaction
	 *
	 * @param {String} account
	 * @param {Amount} taker pays amount
	 * @param {Amount} taker gets amount
	 * @param [Number|Date] expiration
	 * @param [Number] sequence of an existing offer to replace
	 */

	Transaction.prototype.offerCreate = function (options_) {
	  var options = undefined;

	  if (typeof options_ === 'object') {
	    options = lodash.merge({}, options_);

	    if (lodash.isUndefined(options.account)) {
	      options.account = options.src;
	    }
	    if (lodash.isUndefined(options.taker_pays)) {
	      options.taker_pays = options.buy;
	    }
	    if (lodash.isUndefined(options.taker_gets)) {
	      options.taker_gets = options.sell;
	    }
	    if (lodash.isUndefined(options.offer_sequence)) {
	      options.offer_sequence = options.cancel_sequence || options.sequence;
	    }
	  } else {
	    options = {
	      account: arguments[0],
	      taker_pays: arguments[1],
	      taker_gets: arguments[2],
	      expiration: arguments[3],
	      offer_sequence: arguments[4]
	    };
	  }

	  this.setType('OfferCreate');
	  this.setAccount(options.account);
	  this.setTakerGets(options.taker_gets);
	  this.setTakerPays(options.taker_pays);

	  if (!lodash.isUndefined(options.expiration)) {
	    this.setExpiration(options.expiration);
	  }
	  if (!lodash.isUndefined(options.offer_sequence)) {
	    this.setOfferSequence(options.offer_sequence);
	  }

	  return this;
	};

	Transaction.prototype.setTakerGets = function (amount) {
	  return this._setAmount('TakerGets', amount);
	};

	Transaction.prototype.setTakerPays = function (amount) {
	  return this._setAmount('TakerPays', amount);
	};

	Transaction.prototype.setExpiration = function (expiration) {
	  var timeOffset = expiration instanceof Date ? expiration.getTime() : expiration;

	  return this._setUInt32('Expiration', utils.time.toRipple(timeOffset));
	};

	Transaction.prototype.setOfferSequence = function (offerSequence) {
	  return this._setUInt32('OfferSequence', offerSequence);
	};

	/**
	 * Construct an 'OfferCancel' transaction
	 *
	 * @param {String} account
	 * @param [Number] sequence of an existing offer
	 */

	Transaction.prototype.offerCancel = function (options_) {
	  var options = undefined;

	  if (typeof options_ === 'object') {
	    options = lodash.merge({}, options_);

	    if (lodash.isUndefined(options.account)) {
	      options.account = options.src;
	    }
	    if (lodash.isUndefined(options.offer_sequence)) {
	      options.offer_sequence = options.sequence || options.cancel_sequence;
	    }
	  } else {
	    options = {
	      account: arguments[0],
	      offer_sequence: arguments[1]
	    };
	  }

	  this.setType('OfferCancel');
	  this.setAccount(options.account);
	  this.setOfferSequence(options.offer_sequence);

	  return this;
	};

	/**
	 * Submit transaction to the network
	 *
	 * @param [Function] callback
	 */

	Transaction.prototype.submit = function (callback) {
	  var self = this;

	  this.callback = typeof callback === 'function' ? callback : function () {};

	  this._errorHandler = function transactionError(error_, message) {
	    var error = error_;

	    if (!(error instanceof RippleError)) {
	      error = new RippleError(error, message);
	    }

	    self.callback(error);
	  };

	  this._successHandler = function transactionSuccess(message) {
	    self.callback(null, message);
	  };

	  if (!this.remote) {
	    this.emit('error', new Error('No remote found'));
	    return this;
	  }

	  this.getManager().submit(this);

	  return this;
	};

	Transaction.prototype.abort = function () {
	  if (!this.finalized) {
	    this.emit('error', new RippleError('tejAbort', 'Transaction aborted'));
	  }

	  return this;
	};

	/**
	 * Return summary object containing important information for persistence
	 *
	 * @return {Object} transaction summary
	 */

	Transaction.prototype.getSummary = Transaction.prototype.summary = function () {
	  var txSummary = {
	    tx_json: this.tx_json,
	    clientID: this._clientID,
	    submittedIDs: this.submittedIDs,
	    submissionAttempts: this.attempts,
	    submitIndex: this.submitIndex,
	    initialSubmitIndex: this.initialSubmitIndex,
	    lastLedgerSequence: this.lastLedgerSequence,
	    state: this.state,
	    finalized: this.finalized
	  };

	  if (this.result) {
	    var transaction_hash = this.result.tx_json ? this.result.tx_json.hash : undefined;

	    txSummary.result = {
	      engine_result: this.result.engine_result,
	      engine_result_message: this.result.engine_result_message,
	      ledger_hash: this.result.ledger_hash,
	      ledger_index: this.result.ledger_index,
	      transaction_hash: transaction_hash
	    };
	  }

	  return txSummary;
	};

	exports.Transaction = Transaction;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(77);
	var UInt160 = __webpack_require__(11).UInt160;
	var utils = __webpack_require__(18);
	var Float = __webpack_require__(57).Float;

	//
	// Currency support
	//

	var Currency = extend(function () {
	  // Internal form: 0 = XRP. 3 letter-code.
	  // XXX Internal should be 0 or hex with three letter annotation when valid.

	  // Json form:
	  //  '', 'XRP', '0': 0
	  //  3-letter code: ...
	  // XXX Should support hex, C++ doesn't currently allow it.

	  this._value = NaN;
	  this._update();
	}, UInt160);

	Currency.prototype = extend({}, UInt160.prototype);
	Currency.prototype.constructor = Currency;

	Currency.HEX_CURRENCY_BAD = '0000000000000000000000005852500000000000';

	/**
	 * Tries to correctly interpret a Currency as entered by a user.
	 *
	 * Examples:
	 *
	 *  USD                               => currency
	 *  USD - Dollar                      => currency with optional full currency
	 *                                       name
	 *  XAU (-0.5%pa)                     => XAU with 0.5% effective demurrage rate
	 *                                       per year
	 *  XAU - Gold (-0.5%pa)              => Optionally allowed full currency name
	 *  USD (1%pa)                        => US dollars with 1% effective interest
	 *                                       per year
	 *  INR - Indian Rupees               => Optional full currency name with spaces
	 *  TYX - 30-Year Treasuries          => Optional full currency with numbers
	 *                                       and a dash
	 *  TYX - 30-Year Treasuries (1.5%pa) => Optional full currency with numbers,
	 *                                       dash and interest rate
	 *
	 *  The regular expression below matches above cases, broken down for better
	 *  understanding:
	 *
	 *  ^\s*                      // start with any amount of whitespace
	 *  ([a-zA-Z]{3}|[0-9]{3})    // either 3 letter alphabetic currency-code or 3
	 *                               digit numeric currency-code. See ISO 4217
	 *  (\s*-\s*[- \w]+)          // optional full currency name following the dash
	 *                               after currency code, full currency code can
	 *                               contain letters, numbers and dashes
	 *  (\s*\(-?\d+\.?\d*%pa\))?  // optional demurrage rate, has optional - and
	 *                               . notation (-0.5%pa)
	 *  \s*$                      // end with any amount of whitespace
	 *
	 */

	/*eslint-disable max-len*/
	Currency.prototype.human_RE = /^\s*([a-zA-Z0-9\<\>\(\)\{\}\[\]\|\?\!\@\#\$\%\^\&]{3})(\s*-\s*[- \w]+)?(\s*\(-?\d+\.?\d*%pa\))?\s*$/;
	/*eslint-enable max-len*/

	Currency.from_json = function (j, shouldInterpretXrpAsIou) {
	  return new Currency().parse_json(j, shouldInterpretXrpAsIou);
	};

	Currency.from_human = function (j, opts) {
	  return new Currency().parse_human(j, opts);
	};

	// this._value = NaN on error.
	Currency.prototype.parse_json = function (j, shouldInterpretXrpAsIou) {
	  this._value = NaN;

	  if (j instanceof Currency) {
	    this._value = j.copyTo({})._value;
	    this._update();
	    return this;
	  }

	  switch (typeof j) {
	    case 'number':
	      if (!isNaN(j)) {
	        this.parse_number(j);
	      }
	      break;
	    case 'string':
	      if (!j || j === '0') {
	        // Empty string or XRP
	        this.parse_hex(shouldInterpretXrpAsIou ? Currency.HEX_CURRENCY_BAD : Currency.HEX_ZERO);
	        break;
	      }

	      if (j === '1') {
	        // 'no currency'
	        this.parse_hex(Currency.HEX_ONE);
	        break;
	      }

	      if (/^[A-F0-9]{40}$/.test(j)) {
	        // Hex format
	        this.parse_hex(j);
	        break;
	      }

	      // match the given string to see if it's in an allowed format
	      var matches = j.match(this.human_RE);

	      if (matches) {
	        var currencyCode = matches[1];

	        // for the currency 'XRP' case
	        // we drop everything else that could have been provided
	        // e.g. 'XRP - Ripple'
	        if (!currencyCode || /^(0|XRP)$/.test(currencyCode)) {
	          this.parse_hex(shouldInterpretXrpAsIou ? Currency.HEX_CURRENCY_BAD : Currency.HEX_ZERO);

	          // early break, we can't have interest on XRP
	          break;
	        }

	        // the full currency is matched as it is part of the valid currency
	        // format, but not stored
	        // var full_currency = matches[2] || '';
	        var interest = matches[3] || '';

	        // interest is defined as interest per year, per annum (pa)
	        var percentage = interest.match(/(-?\d+\.?\d+)/);

	        currencyCode = currencyCode.toUpperCase();

	        var currencyData = utils.arraySet(20, 0);

	        if (percentage) {
	          /*
	           * 20 byte layout of a interest bearing currency
	           *
	           * 01 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
	           *    CURCODE- DATE------- RATE------------------- RESERVED---
	           */

	          // byte 1 for type, use '1' to denote demurrage currency
	          currencyData[0] = 1;

	          // byte 2-4 for currency code
	          currencyData[1] = currencyCode.charCodeAt(0) & 0xff;
	          currencyData[2] = currencyCode.charCodeAt(1) & 0xff;
	          currencyData[3] = currencyCode.charCodeAt(2) & 0xff;

	          // byte 5-8 are for reference date, but should always be 0 so we
	          // won't fill it

	          // byte 9-16 are for the interest
	          percentage = parseFloat(percentage[0]);

	          // the interest or demurrage is expressed as a yearly (per annum)
	          // value
	          var secondsPerYear = 31536000; // 60 * 60 * 24 * 365

	          // Calculating the interest e-fold
	          // 0.5% demurrage is expressed 0.995, 0.005 less than 1
	          // 0.5% interest is expressed as 1.005, 0.005 more than 1
	          var interestEfold = secondsPerYear / Math.log(1 + percentage / 100);
	          var bytes = Float.toIEEE754Double(interestEfold);

	          for (var i = 0; i <= bytes.length; i++) {
	            currencyData[8 + i] = bytes[i] & 0xff;
	          }

	          // the last 4 bytes are reserved for future use, so we won't fill
	          // those
	        } else {
	            currencyData[12] = currencyCode.charCodeAt(0) & 0xff;
	            currencyData[13] = currencyCode.charCodeAt(1) & 0xff;
	            currencyData[14] = currencyCode.charCodeAt(2) & 0xff;
	          }

	        this.parse_bytes(currencyData);
	      }
	      break;
	  }

	  return this;
	};

	Currency.prototype.parse_human = function (j) {
	  return this.parse_json(j);
	};

	/**
	 * Recalculate internal representation.
	 *
	 * You should never need to call this.
	 */

	Currency.prototype._update = function () {
	  var bytes = this.to_bytes();

	  // is it 0 everywhere except 12, 13, 14?
	  var isZeroExceptInStandardPositions = true;

	  if (!bytes) {
	    return;
	  }

	  this._native = false;
	  this._type = -1;
	  this._interest_start = NaN;
	  this._interest_period = NaN;
	  this._iso_code = '';

	  for (var i = 0; i < 20; i++) {
	    isZeroExceptInStandardPositions = isZeroExceptInStandardPositions && (i === 12 || i === 13 || i === 14 || bytes[i] === 0);
	  }

	  if (isZeroExceptInStandardPositions) {
	    this._iso_code = String.fromCharCode(bytes[12]) + String.fromCharCode(bytes[13]) + String.fromCharCode(bytes[14]);

	    if (this._iso_code === '\u0000\u0000\u0000') {
	      this._native = true;
	      this._iso_code = 'XRP';
	    }

	    this._type = 0;
	  } else if (bytes[0] === 0x01) {
	    // Demurrage currency
	    this._iso_code = String.fromCharCode(bytes[1]) + String.fromCharCode(bytes[2]) + String.fromCharCode(bytes[3]);

	    this._type = 1;
	    this._interest_start = (bytes[4] << 24) + (bytes[5] << 16) + (bytes[6] << 8) + bytes[7];
	    this._interest_period = Float.fromIEEE754Double(bytes.slice(8, 16));
	  }
	};

	// XXX Probably not needed anymore?
	/*
	Currency.prototype.parse_bytes = function(byte_array) {
	  if (Array.isArray(byte_array) && byte_array.length === 20) {
	    var result;
	    // is it 0 everywhere except 12, 13, 14?
	    var isZeroExceptInStandardPositions = true;

	    for (var i=0; i<20; i++) {
	      isZeroExceptInStandardPositions = isZeroExceptInStandardPositions
	      && (i===12 || i===13 || i===14 || byte_array[0]===0)
	    }

	    if (isZeroExceptInStandardPositions) {
	      var currencyCode = String.fromCharCode(byte_array[12])
	      + String.fromCharCode(byte_array[13])
	      + String.fromCharCode(byte_array[14]);
	      if (/^[A-Z0-9]{3}$/.test(currencyCode) && currencyCode !== 'XRP' ) {
	        this._value = currencyCode;
	      } else if (currencyCode === '\0\0\0') {
	        this._value = 0;
	      } else {
	        this._value = NaN;
	      }
	    } else {
	      // XXX Should support non-standard currency codes
	      this._value = NaN;
	    }
	  } else {
	    this._value = NaN;
	  }
	  return this;
	};
	*/

	Currency.prototype.is_native = function () {
	  return this._native;
	};

	/**
	 * @return {Boolean} whether this currency is an interest-bearing currency
	 */

	Currency.prototype.has_interest = function () {
	  return this._type === 1 && !isNaN(this._interest_start) && !isNaN(this._interest_period);
	};

	/**
	 *
	 * @param {number} referenceDate number of seconds since the Ripple Epoch
	 * (0:00 on January 1, 2000 UTC) used to calculate the
	 * interest over provided interval pass in one years
	 * worth of seconds to ge the yearly interest
	 * @returns {number} interest for provided interval, can be negative for
	 * demurred currencies
	 */
	Currency.prototype.get_interest_at = function (referenceDate) {
	  if (!this.has_interest()) {
	    return 0;
	  }

	  // use one year as a default period
	  if (!referenceDate) {
	    referenceDate = this._interest_start + 3600 * 24 * 365;
	  }

	  if (referenceDate instanceof Date) {
	    referenceDate = utils.fromTimestamp(referenceDate.getTime());
	  }

	  // calculate interest by e-fold number
	  return Math.exp((referenceDate - this._interest_start) / this._interest_period);
	};

	Currency.prototype.get_interest_percentage_at = function (referenceDate, decimals) {
	  var interest = this.get_interest_at(referenceDate, decimals);

	  // convert to percentage
	  interest = interest * 100 - 100;
	  var decimalMultiplier = decimals ? Math.pow(10, decimals) : 100;

	  // round to two decimals behind the dot
	  return Math.round(interest * decimalMultiplier) / decimalMultiplier;
	};

	// XXX Currently we inherit UInt.prototype.is_valid, which is mostly fine.
	//
	//     We could be doing further checks into the internal format of the
	//     currency data, since there are some values that are invalid.
	//
	// Currency.prototype.is_valid = function() {
	//  return UInt.prototype.is_valid() && ...;
	// };

	Currency.prototype.to_json = function (opts) {
	  if (!this.is_valid()) {
	    // XXX This is backwards compatible behavior, but probably not very good.
	    return 'XRP';
	  }

	  if (!opts) {
	    opts = {};
	  }

	  var currency;
	  var fullName = opts && opts.full_name ? ' - ' + opts.full_name : '';
	  opts.show_interest = opts.show_interest !== undefined ? opts.show_interest : this.has_interest();

	  if (!opts.force_hex && /^[A-Z0-9]{3}$/.test(this._iso_code)) {
	    currency = this._iso_code + fullName;
	    if (opts.show_interest) {
	      var decimals = !isNaN(opts.decimals) ? opts.decimals : undefined;
	      var interestPercentage = this.has_interest() ? this.get_interest_percentage_at(this._interest_start + 3600 * 24 * 365, decimals) : 0;
	      currency += ' (' + interestPercentage + '%pa)';
	    }
	  } else {
	    // Fallback to returning the raw currency hex
	    currency = this.to_hex();

	    // XXX This is to maintain backwards compatibility, but it is very, very
	    // odd behavior, so we should deprecate it and get rid of it as soon as
	    //  possible.
	    if (currency === Currency.HEX_ONE) {
	      currency = 1;
	    }
	  }

	  return currency;
	};

	Currency.prototype.to_human = function (opts) {
	  // to_human() will always print the human-readable currency code if available.
	  return this.to_json(opts);
	};

	Currency.prototype.get_iso = function () {
	  return this._iso_code;
	};

	exports.Currency = Currency;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var BN = __webpack_require__(93);
	var extend = __webpack_require__(77);

	var _require = __webpack_require__(92);

	var encode = _require.encode;
	var decode = _require.decode;

	var Base = {};

	extend(Base, {
	  VER_NONE: 1,
	  VER_NODE_PUBLIC: 28,
	  VER_NODE_PRIVATE: 32,
	  VER_ACCOUNT_ID: 0,
	  VER_ACCOUNT_PUBLIC: 35,
	  VER_ACCOUNT_PRIVATE: 34,
	  VER_FAMILY_GENERATOR: 41,
	  VER_FAMILY_SEED: 33,
	  VER_ED25519_SEED: [0x01, 0xE1, 0x4B]
	});

	// --> input: big-endian array of bytes.
	// <-- string at least as long as input.
	Base.encode = function (input, alphabet) {
	  return encode(input, { alphabet: alphabet });
	};

	// --> input: String
	// <-- array of bytes or undefined.
	Base.decode = function (input, alphabet) {
	  if (typeof input !== 'string') {
	    return undefined;
	  }
	  try {
	    return decode(input, { alphabet: alphabet });
	  } catch (e) {
	    return undefined;
	  }
	};

	// --> input: Array
	// <-- String
	Base.encode_check = function (version, input, alphabet) {
	  return encode(input, { version: version, alphabet: alphabet });
	};

	// --> input : String
	// <-- NaN || BN
	Base.decode_check = function (version, input, alphabet) {
	  try {
	    var decoded = decode(input, { version: version, alphabet: alphabet });
	    return new BN(decoded);
	  } catch (e) {
	    return NaN;
	  }
	};

	exports.Base = Base;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(18);
	var extend = __webpack_require__(77);
	var UInt = __webpack_require__(58).UInt;

	//
	// UInt128 support
	//

	var UInt128 = extend(function () {
	  this._value = NaN;
	}, UInt);

	UInt128.width = 16;
	UInt128.prototype = extend({}, UInt.prototype);
	UInt128.prototype.constructor = UInt128;

	var HEX_ZERO = UInt128.HEX_ZERO = '00000000000000000000000000000000';
	var HEX_ONE = UInt128.HEX_ONE = '00000000000000000000000000000000';

	UInt128.STR_ZERO = utils.hexToString(HEX_ZERO);
	UInt128.STR_ONE = utils.hexToString(HEX_ONE);

	exports.UInt128 = UInt128;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(18);
	var extend = __webpack_require__(77);

	var UInt = __webpack_require__(58).UInt;
	var Base = __webpack_require__(9).Base;

	//
	// UInt160 support
	//

	var UInt160 = extend(function () {
	  this._value = NaN;
	  this._version_byte = undefined;
	  this._update();
	}, UInt);

	UInt160.width = 20;
	UInt160.prototype = extend({}, UInt.prototype);
	UInt160.prototype.constructor = UInt160;

	var HEX_ZERO = UInt160.HEX_ZERO = '0000000000000000000000000000000000000000';
	var HEX_ONE = UInt160.HEX_ONE = '0000000000000000000000000000000000000001';

	UInt160.ACCOUNT_ZERO = 'rrrrrrrrrrrrrrrrrrrrrhoLvTp';
	UInt160.ACCOUNT_ONE = 'rrrrrrrrrrrrrrrrrrrrBZbvji';
	UInt160.STR_ZERO = utils.hexToString(HEX_ZERO);
	UInt160.STR_ONE = utils.hexToString(HEX_ONE);

	UInt160.prototype.set_version = function (j) {
	  this._version_byte = j;
	  return this;
	};

	UInt160.prototype.get_version = function () {
	  return this._version_byte;
	};

	// value = NaN on error.
	UInt160.prototype.parse_json = function (j) {
	  if (typeof j === 'number' && !isNaN(j)) {
	    // Allow raw numbers - DEPRECATED
	    // This is used mostly by the test suite and is supported
	    // as a legacy feature only. DO NOT RELY ON THIS BEHAVIOR.
	    this.parse_number(j);
	    this._version_byte = Base.VER_ACCOUNT_ID;
	  } else if (typeof j !== 'string') {
	    this._value = NaN;
	  } else if (j[0] === 'r') {
	    this._value = Base.decode_check(Base.VER_ACCOUNT_ID, j);
	    this._version_byte = Base.VER_ACCOUNT_ID;
	  } else {
	    this.parse_hex(j);
	  }

	  this._update();

	  return this;
	};

	UInt160.prototype.parse_generic = function (j) {
	  UInt.prototype.parse_generic.call(this, j);

	  if (isNaN(this._value)) {
	    if (typeof j === 'string' && j[0] === 'r') {
	      this._value = Base.decode_check(Base.VER_ACCOUNT_ID, j);
	    }
	  }

	  this._update();

	  return this;
	};

	// XXX Json form should allow 0 and 1, C++ doesn't currently allow it.
	UInt160.prototype.to_json = function (opts) {
	  opts = opts || {};

	  if (this.is_valid()) {
	    // If this value has a type, return a Base58 encoded string.
	    if (typeof this._version_byte === 'number') {
	      var output = Base.encode_check(this._version_byte, this.to_bytes());

	      if (opts.gateways && output in opts.gateways) {
	        output = opts.gateways[output];
	      }

	      return output;
	    }
	    return this.to_hex();
	  }
	  return NaN;
	};

	exports.UInt160 = UInt160;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(18);
	var extend = __webpack_require__(77);
	var UInt = __webpack_require__(58).UInt;

	//
	// UInt256 support
	//

	var UInt256 = extend(function () {
	  this._value = NaN;
	}, UInt);

	UInt256.width = 32;
	UInt256.prototype = extend({}, UInt.prototype);
	UInt256.prototype.constructor = UInt256;

	var HEX_ZERO = UInt256.HEX_ZERO = '00000000000000000000000000000000' + '00000000000000000000000000000000';

	var HEX_ONE = UInt256.HEX_ONE = '00000000000000000000000000000000' + '00000000000000000000000000000001';

	UInt256.STR_ZERO = utils.hexToString(HEX_ZERO);
	UInt256.STR_ONE = utils.hexToString(HEX_ONE);

	exports.UInt256 = UInt256;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//
	// Seed support
	//

	var _require = __webpack_require__(99);

	var KeyPair = _require.KeyPair;
	var KeyType = _require.KeyType;

	var _require2 = __webpack_require__(92);

	var decodeSeed = _require2.decodeSeed;
	var encodeSeed = _require2.encodeSeed;

	var extend = __webpack_require__(77);
	var sjclcodec = __webpack_require__(78);
	var BN = __webpack_require__(93);
	var hashjs = __webpack_require__(94);

	var UInt = __webpack_require__(58).UInt;

	var Seed = extend(function () {
	  this._value = NaN;
	  this._type = KeyType.secp256k1;
	}, UInt);

	Seed.width = 16;
	Seed.prototype = extend({}, UInt.prototype);
	Seed.prototype.constructor = Seed;

	// value = NaN on error.
	// One day this will support rfc1751 too.
	Seed.prototype.parse_json = function (j) {
	  if (typeof j === 'string') {
	    if (!j.length) {
	      this._value = NaN;
	    } else {
	      this.parse_base58(j);
	      if (!this.is_valid()) {
	        this.parse_hex(j);
	        // XXX Should also try 1751
	      }
	      if (!this.is_valid() && j[0] !== 's') {
	        this.parse_passphrase(j);
	      }
	    }
	  } else {
	    this._value = NaN;
	  }

	  return this;
	};

	Seed.prototype.parse_base58 = function (j) {
	  if (typeof j !== 'string') {
	    throw new Error('Value must be a string');
	  }
	  if (!j.length || j[0] !== 's') {
	    this._value = NaN;
	  } else {
	    try {
	      var _decodeSeed = decodeSeed(j);

	      var bytes = _decodeSeed.bytes;
	      var type = _decodeSeed.type;

	      this._value = new BN(bytes);
	      this._type = type;
	    } catch (e) {
	      this._value = NaN;
	    }
	  }
	  return this;
	};

	Seed.prototype.set_ed25519 = function () {
	  this._type = KeyType.ed25519;
	  return this;
	};

	Seed.prototype.parse_passphrase = function (j) {
	  if (typeof j !== 'string') {
	    throw new Error('Passphrase must be a string');
	  }

	  var phraseBytes = sjclcodec.bytes.fromBits(sjclcodec.utf8String.toBits(j));
	  var hash = hashjs.sha512().update(phraseBytes).digest();
	  this.parse_bytes(hash.slice(0, 16));

	  return this;
	};

	Seed.prototype.to_json = function () {
	  if (!this.is_valid()) {
	    return NaN;
	  }
	  return encodeSeed(this.to_bytes(), this._type);
	};

	Seed.prototype.get_key = function () {
	  if (!this.is_valid()) {
	    throw new Error('Cannot generate keys from invalid seed!');
	  }
	  return KeyPair.fromSeed(this.to_bytes(), this._type);
	};

	exports.Seed = Seed;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var extend = __webpack_require__(77);
	var utils = __webpack_require__(18);
	var UInt160 = __webpack_require__(11).UInt160;
	var Amount = __webpack_require__(5).Amount;

	/**
	 * Meta data processing facility
	 *
	 * @constructor
	 * @param {Object} transaction metadata
	 */

	function Meta(data) {
	  var self = this;

	  this.nodes = [];

	  if (typeof data !== 'object') {
	    throw new TypeError('Missing metadata');
	  }

	  if (!Array.isArray(data.AffectedNodes)) {
	    throw new TypeError('Metadata missing AffectedNodes');
	  }

	  data.AffectedNodes.forEach(this.addNode, this);
	};

	Meta.NODE_TYPES = ['CreatedNode', 'ModifiedNode', 'DeletedNode'];

	Meta.AMOUNT_FIELDS_AFFECTING_ISSUER = ['LowLimit', 'HighLimit', 'TakerPays', 'TakerGets'];

	Meta.ACCOUNT_FIELDS = ['Account', 'Owner', 'Destination', 'Issuer', 'Target'];

	/**
	 * @param {Object} node
	 * @api private
	 */

	Meta.prototype.getNodeType = function (node) {
	  var result = null;

	  for (var i = 0; i < Meta.NODE_TYPES.length; i++) {
	    var type = Meta.NODE_TYPES[i];
	    if (node.hasOwnProperty(type)) {
	      result = type;
	      break;
	    }
	  }

	  return result;
	};

	/**
	 * @param {String} field
	 * @api private
	 */

	Meta.prototype.isAccountField = function (field) {
	  return Meta.ACCOUNT_FIELDS.indexOf(field) !== -1;
	};

	/**
	 * Add node to metadata
	 *
	 * @param {Object} node
	 * @api private
	 */

	Meta.prototype.addNode = function (node) {
	  this._affectedAccounts = void 0;
	  this._affectedBooks = void 0;

	  var result = {};

	  if (result.nodeType = this.getNodeType(node)) {
	    node = node[result.nodeType];
	    result.diffType = result.nodeType;
	    result.entryType = node.LedgerEntryType;
	    result.ledgerIndex = node.LedgerIndex;
	    result.fields = extend({}, node.PreviousFields, node.NewFields, node.FinalFields);
	    result.fieldsPrev = node.PreviousFields || {};
	    result.fieldsNew = node.NewFields || {};
	    result.fieldsFinal = node.FinalFields || {};

	    // getAffectedBooks will set this
	    // result.bookKey   = undefined;

	    this.nodes.push(result);
	  }
	};

	/**
	 * Get affected nodes array
	 *
	 * @param {Object} filter options
	 * @return {Array} nodes
	 */

	Meta.prototype.getNodes = function (options) {
	  if (typeof options === 'object') {
	    return this.nodes.filter(function (node) {
	      if (options.nodeType && options.nodeType !== node.nodeType) {
	        return false;
	      }
	      if (options.entryType && options.entryType !== node.entryType) {
	        return false;
	      }
	      if (options.bookKey && options.bookKey !== node.bookKey) {
	        return false;
	      }
	      return true;
	    });
	  } else {
	    return this.nodes;
	  }
	};

	Meta.prototype.getAffectedAccounts = function (from) {
	  if (this._affectedAccounts) {
	    return this._affectedAccounts;
	  }

	  var accounts = [];

	  // This code should match the behavior of the C++ method:
	  // TransactionMetaSet::getAffectedAccounts
	  for (var i = 0; i < this.nodes.length; i++) {
	    var node = this.nodes[i];
	    var fields = node.nodeType === 'CreatedNode' ? node.fieldsNew : node.fieldsFinal;

	    for (var fieldName in fields) {
	      var field = fields[fieldName];

	      if (this.isAccountField(fieldName) && UInt160.is_valid(field)) {
	        accounts.push(field);
	      } else if (~Meta.AMOUNT_FIELDS_AFFECTING_ISSUER.indexOf(fieldName)) {
	        var amount = Amount.from_json(field);
	        var issuer = amount.issuer();
	        if (issuer.is_valid() && !issuer.is_zero()) {
	          accounts.push(issuer.to_json());
	        }
	      }
	    }
	  }

	  this._affectedAccounts = utils.arrayUnique(accounts);

	  return this._affectedAccounts;
	};

	Meta.prototype.getAffectedBooks = function () {
	  if (this._affectedBooks) {
	    return this._affectedBooks;
	  }

	  var books = [];

	  for (var i = 0; i < this.nodes.length; i++) {
	    var node = this.nodes[i];

	    if (node.entryType !== 'Offer') {
	      continue;
	    }

	    var gets = Amount.from_json(node.fields.TakerGets);
	    var pays = Amount.from_json(node.fields.TakerPays);
	    var getsKey = gets.currency().to_json();
	    var paysKey = pays.currency().to_json();

	    if (getsKey !== 'XRP') {
	      getsKey += '/' + gets.issuer().to_json();
	    }

	    if (paysKey !== 'XRP') {
	      paysKey += '/' + pays.issuer().to_json();
	    }

	    var key = getsKey + ':' + paysKey;

	    // Hell of a lot of work, so we are going to cache this. We can use this
	    // later to good effect in OrderBook.notify to make sure we only process
	    // pertinent offers.
	    node.bookKey = key;

	    books.push(key);
	  }

	  this._affectedBooks = utils.arrayUnique(books);

	  return this._affectedBooks;
	};

	/**
	 * Execute a function on each affected node.
	 *
	 * The callback is passed two parameters. The first is a node object which looks
	 * like this:
	 *
	 *   {
	 *     // Type of diff, e.g. CreatedNode, ModifiedNode
	 *     nodeType: 'CreatedNode'
	 *
	 *     // Type of node affected, e.g. RippleState, AccountRoot
	 *     entryType: 'RippleState',
	 *
	 *     // Index of the ledger this change occurred in
	 *     ledgerIndex: '01AB01AB...',
	 *
	 *     // Contains all fields with later versions taking precedence
	 *     //
	 *     // This is a shorthand for doing things like checking which account
	 *     // this affected without having to check the nodeType.
	 *     fields: {...},
	 *
	 *     // Old fields (before the change)
	 *     fieldsPrev: {...},
	 *
	 *     // New fields (that have been added)
	 *     fieldsNew: {...},
	 *
	 *     // Changed fields
	 *     fieldsFinal: {...}
	 *   }
	 */

	['forEach', 'map', 'filter', 'every', 'some', 'reduce'].forEach(function (fn) {
	  Meta.prototype[fn] = function () {
	    return Array.prototype[fn].apply(this.nodes, arguments);
	  };
	});

	Meta.prototype.each = Meta.prototype.forEach;

	exports.Meta = Meta;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _Object$keys = __webpack_require__(89)['default'];

	var assert = __webpack_require__(75);
	var extend = __webpack_require__(77);
	var BN = __webpack_require__(93);
	var hashjs = __webpack_require__(94);
	var sjclcodec = __webpack_require__(78);
	var binformat = __webpack_require__(17);
	var stypes = __webpack_require__(27);
	var utils = __webpack_require__(18);
	var UInt256 = __webpack_require__(12).UInt256;

	var TRANSACTION_TYPES = {};

	_Object$keys(binformat.tx).forEach(function (key) {
	  TRANSACTION_TYPES[binformat.tx[key][0]] = key;
	});

	var LEDGER_ENTRY_TYPES = {};

	_Object$keys(binformat.ledger).forEach(function (key) {
	  LEDGER_ENTRY_TYPES[binformat.ledger[key][0]] = key;
	});

	var TRANSACTION_RESULTS = {};

	_Object$keys(binformat.ter).forEach(function (key) {
	  TRANSACTION_RESULTS[binformat.ter[key]] = key;
	});

	function fieldType(fieldName) {
	  var fieldDef = binformat.fieldsInverseMap[fieldName];
	  return binformat.types[fieldDef[0]];
	}

	function SerializedObject(buf) {
	  if (Array.isArray(buf) || Buffer && Buffer.isBuffer(buf)) {
	    this.buffer = buf;
	  } else if (typeof buf === 'string') {
	    this.buffer = sjclcodec.bytes.fromBits(sjclcodec.hex.toBits(buf));
	  } else if (!buf) {
	    this.buffer = [];
	  } else {
	    throw new Error('Invalid buffer passed.');
	  }
	  this.pointer = 0;
	}

	SerializedObject.from_json = function (obj) {
	  var so = new SerializedObject();
	  so.parse_json(obj);
	  return so;
	};

	SerializedObject.check_fields = function (typedef, obj) {
	  var missingFields = [];
	  var unknownFields = [];
	  var fieldsMap = {};

	  // Get missing required fields
	  typedef.forEach(function (field) {
	    var fieldName = field[0];
	    var isRequired = field[1] === binformat.REQUIRED;

	    if (isRequired && obj[fieldName] === undefined) {
	      missingFields.push(fieldName);
	    } else {
	      fieldsMap[fieldName] = true;
	    }
	  });

	  // Get fields that are not specified in format
	  _Object$keys(obj).forEach(function (key) {
	    if (!fieldsMap[key] && /^[A-Z]/.test(key)) {
	      unknownFields.push(key);
	    }
	  });

	  if (!(missingFields.length || unknownFields.length)) {
	    // No missing or unknown fields
	    return;
	  }

	  var errorMessage = undefined;

	  if (obj.TransactionType !== undefined) {
	    errorMessage = SerializedObject.lookup_type_tx(obj.TransactionType);
	  } else if (obj.LedgerEntryType !== undefined) {
	    errorMessage = SerializedObject.lookup_type_le(obj.LedgerEntryType);
	  } else {
	    errorMessage = 'TransactionMetaData';
	  }

	  if (missingFields.length > 0) {
	    errorMessage += ' is missing fields: ' + JSON.stringify(missingFields);
	  }
	  if (unknownFields.length > 0) {
	    errorMessage += (missingFields.length ? ' and' : '') + ' has unknown fields: ' + JSON.stringify(unknownFields);
	  }

	  throw new Error(errorMessage);
	};

	SerializedObject.prototype.parse_json = function (obj_) {
	  // Create a copy of the object so we don't modify it
	  var obj = extend(true, {}, obj_);
	  var typedef = undefined;

	  if (typeof obj.TransactionType === 'number') {
	    obj.TransactionType = SerializedObject.lookup_type_tx(obj.TransactionType);
	    if (!obj.TransactionType) {
	      throw new Error('Transaction type ID is invalid.');
	    }
	  }

	  if (typeof obj.LedgerEntryType === 'number') {
	    obj.LedgerEntryType = SerializedObject.lookup_type_le(obj.LedgerEntryType);

	    if (!obj.LedgerEntryType) {
	      throw new Error('LedgerEntryType ID is invalid.');
	    }
	  }

	  if (typeof obj.TransactionType === 'string') {
	    typedef = binformat.tx[obj.TransactionType];
	    if (!Array.isArray(typedef)) {
	      throw new Error('Transaction type is invalid');
	    }

	    typedef = typedef.slice();
	    obj.TransactionType = typedef.shift();
	  } else if (typeof obj.LedgerEntryType === 'string') {
	    typedef = binformat.ledger[obj.LedgerEntryType];

	    if (!Array.isArray(typedef)) {
	      throw new Error('LedgerEntryType is invalid');
	    }

	    typedef = typedef.slice();
	    obj.LedgerEntryType = typedef.shift();
	  } else if (typeof obj.AffectedNodes === 'object') {
	    typedef = binformat.metadata;
	  } else {
	    throw new Error('Object to be serialized must contain either' + ' TransactionType, LedgerEntryType or AffectedNodes.');
	  }

	  SerializedObject.check_fields(typedef, obj);
	  this.serialize(typedef, obj);
	};

	SerializedObject.prototype.append = function (bytes_) {
	  var bytes = bytes_ instanceof SerializedObject ? bytes_.buffer : bytes_;

	  // Make sure both buffer and bytes are Array. Either could be a Buffer.
	  if (Array.isArray(this.buffer) && Array.isArray(bytes)) {
	    // `this.buffer = this.buffer.concat(bytes)` can be unbearably slow for
	    // large bytes length and acceptable bytes length is limited for
	    // `Array.prototype.push.apply(this.buffer, bytes)` as every element in the
	    // bytes array is pushed onto the stack, potentially causing a RangeError
	    // exception. Both of these solutions are known to be problematic for
	    // ledger 7501326. KISS instead

	    for (var i = 0; i < bytes.length; i++) {
	      this.buffer.push(bytes[i]);
	    }
	  } else {
	    this.buffer = this.buffer.concat(bytes);
	  }

	  this.pointer += bytes.length;
	};

	SerializedObject.prototype.resetPointer = function () {
	  this.pointer = 0;
	};

	function readOrPeek(advance) {
	  return function (bytes) {
	    var start = this.pointer;
	    var end = start + bytes;

	    if (end > this.buffer.length) {
	      throw new Error('Buffer length exceeded');
	    }

	    var result = this.buffer.slice(start, end);

	    if (advance) {
	      this.pointer = end;
	    }

	    return result;
	  };
	}

	SerializedObject.prototype.read = readOrPeek(true);

	SerializedObject.prototype.peek = readOrPeek(false);

	SerializedObject.prototype.to_bits = function () {
	  return sjclcodec.bytes.toBits(this.buffer);
	};

	SerializedObject.prototype.to_hex = function () {
	  return sjclcodec.hex.fromBits(this.to_bits()).toUpperCase();
	};

	SerializedObject.prototype.to_json = function () {
	  var old_pointer = this.pointer;

	  this.resetPointer();

	  var output = {};

	  while (this.pointer < this.buffer.length) {
	    var key_and_value = stypes.parse(this);
	    var key = key_and_value[0];
	    var value = key_and_value[1];
	    output[key] = SerializedObject.jsonify_structure(value, key);
	  }

	  this.pointer = old_pointer;

	  return output;
	};

	SerializedObject.jsonify_structure = function (structure, fieldName) {
	  var output = undefined;

	  switch (typeof structure) {
	    case 'number':
	      switch (fieldName) {
	        case 'LedgerEntryType':
	          output = LEDGER_ENTRY_TYPES[structure];
	          break;
	        case 'TransactionResult':
	          output = TRANSACTION_RESULTS[structure];
	          break;
	        case 'TransactionType':
	          output = TRANSACTION_TYPES[structure];
	          break;
	        default:
	          output = structure;
	      }
	      break;
	    case 'object':
	      if (structure === null) {
	        break;
	      }

	      if (typeof structure.to_json === 'function') {
	        output = structure.to_json();
	      } else if (structure instanceof BN) {
	        // We assume that any BN is a UInt64 field
	        assert.equal(fieldType(fieldName), 'Int64');
	        output = utils.arrayToHex(structure.toArray('bn', 8));
	      } else {
	        // new Array or Object
	        output = new structure.constructor();

	        var keys = _Object$keys(structure);

	        for (var i = 0, l = keys.length; i < l; i++) {
	          var key = keys[i];
	          output[key] = SerializedObject.jsonify_structure(structure[key], key);
	        }
	      }
	      break;
	    default:
	      output = structure;
	  }

	  return output;
	};

	SerializedObject.prototype.serialize = function (typedef, obj) {
	  // Serialize object without end marker
	  stypes.Object.serialize(this, obj, true);

	  // ST: Old serialization
	  /*
	  // Ensure canonical order
	  typedef = SerializedObject.sort_typedef(typedef);
	   // Serialize fields
	  for (let i=0, l=typedef.length; i<l; i++) {
	    this.serialize_field(typedef[i], obj);
	  }
	  */
	};

	SerializedObject.prototype.hash = function (prefix) {
	  var sign_buffer = new SerializedObject();

	  // Add hashing prefix
	  if (typeof prefix !== 'undefined') {
	    stypes.Int32.serialize(sign_buffer, prefix);
	  }

	  // Copy buffer to temporary buffer
	  sign_buffer.append(this.buffer);
	  var bytes = hashjs.sha512().update(sign_buffer.buffer).digest();

	  return UInt256.from_bytes(bytes.slice(0, 32));
	};

	// DEPRECATED
	SerializedObject.prototype.signing_hash = SerializedObject.prototype.hash;

	SerializedObject.prototype.serialize_field = function (spec, obj) {
	  var name = spec[0];
	  var presence = spec[1];

	  if (typeof obj[name] !== 'undefined') {
	    try {
	      stypes.serialize(this, name, obj[name]);
	    } catch (e) {
	      // Add field name to message and rethrow
	      e.message = 'Error serializing "' + name + '": ' + e.message;
	      throw e;
	    }
	  } else if (presence === binformat.REQUIRED) {
	    throw new Error('Missing required field ' + name);
	  }
	};

	SerializedObject.get_field_header = function (type_id, field_id) {
	  var buffer = [0];

	  if (type_id > 0xF) {
	    buffer.push(type_id & 0xFF);
	  } else {
	    buffer[0] += (type_id & 0xF) << 4;
	  }

	  if (field_id > 0xF) {
	    buffer.push(field_id & 0xFF);
	  } else {
	    buffer[0] += field_id & 0xF;
	  }

	  return buffer;
	};

	SerializedObject.sort_typedef = function (typedef) {
	  assert(Array.isArray(typedef));

	  function sort_field_compare(a, b) {
	    // Sort by type id first, then by field id
	    return a[3] !== b[3] ? stypes[a[3]].id - stypes[b[3]].id : a[2] - b[2];
	  }

	  return typedef.sort(sort_field_compare);
	};

	SerializedObject.lookup_type_tx = function (id) {
	  assert.strictEqual(typeof id, 'number');
	  return TRANSACTION_TYPES[id];
	};

	SerializedObject.lookup_type_le = function (id) {
	  assert(typeof id === 'number');
	  return LEDGER_ENTRY_TYPES[id];
	};

	exports.SerializedObject = SerializedObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(81);
	var extend = __webpack_require__(77);

	function RippleError(code, message) {
	  switch (typeof code) {
	    case 'object':
	      extend(this, code);
	      break;

	    case 'string':
	      this.result = code;
	      this.result_message = message;
	      break;
	  }

	  this.engine_result = this.result = this.result || this.engine_result || this.error || 'Error';
	  this.engine_result_message = this.result_message = this.result_message || this.engine_result_message || this.error_message || 'Error';
	  this.result_message = this.message = this.result_message;

	  var stack;

	  if (!!Error.captureStackTrace) {
	    Error.captureStackTrace(this, code || this);
	  } else if (stack = new Error().stack) {
	    this.stack = stack;
	  }
	};

	util.inherits(RippleError, Error);

	RippleError.prototype.name = 'RippleError';

	exports.RippleError = RippleError;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*eslint no-multi-spaces:0,space-in-brackets:0,key-spacing:0,comma-spacing:0*/

	/**
	 * Data type map.
	 *
	 * Mapping of type ids to data types. The type id is specified by the high
	 *
	 * For reference, see rippled's definition:
	 * https://github.com/ripple/rippled/blob/develop/src/ripple/data/protocol
	 *                                                              /SField.cpp
	 */

	var _Object$keys = __webpack_require__(89)['default'];

	exports.types = [undefined,

	// Common
	'Int16', // 1
	'Int32', // 2
	'Int64', // 3
	'Hash128', // 4
	'Hash256', // 5
	'Amount', // 6
	'VL', // 7
	'Account', // 8

	// 9-13 reserved
	undefined, // 9
	undefined, // 10
	undefined, // 11
	undefined, // 12
	undefined, // 13

	'Object', // 14
	'Array', // 15

	// Uncommon
	'Int8', // 16
	'Hash160', // 17
	'PathSet', // 18
	'Vector256' // 19
	];

	/**
	 * Field type map.
	 *
	 * Mapping of field type id to field type name.
	 */

	var FIELDS_MAP = exports.fields = {
	  // Common types
	  1: { // Int16
	    1: 'LedgerEntryType',
	    2: 'TransactionType'
	  },
	  2: { // Int32
	    2: 'Flags',
	    3: 'SourceTag',
	    4: 'Sequence',
	    5: 'PreviousTxnLgrSeq',
	    6: 'LedgerSequence',
	    7: 'CloseTime',
	    8: 'ParentCloseTime',
	    9: 'SigningTime',
	    10: 'Expiration',
	    11: 'TransferRate',
	    12: 'WalletSize',
	    13: 'OwnerCount',
	    14: 'DestinationTag',
	    // Skip 15
	    16: 'HighQualityIn',
	    17: 'HighQualityOut',
	    18: 'LowQualityIn',
	    19: 'LowQualityOut',
	    20: 'QualityIn',
	    21: 'QualityOut',
	    22: 'StampEscrow',
	    23: 'BondAmount',
	    24: 'LoadFee',
	    25: 'OfferSequence',
	    26: 'FirstLedgerSequence',
	    27: 'LastLedgerSequence',
	    28: 'TransactionIndex',
	    29: 'OperationLimit',
	    30: 'ReferenceFeeUnits',
	    31: 'ReserveBase',
	    32: 'ReserveIncrement',
	    33: 'SetFlag',
	    34: 'ClearFlag'
	  },
	  3: { // Int64
	    1: 'IndexNext',
	    2: 'IndexPrevious',
	    3: 'BookNode',
	    4: 'OwnerNode',
	    5: 'BaseFee',
	    6: 'ExchangeRate',
	    7: 'LowNode',
	    8: 'HighNode'
	  },
	  4: { // Hash128
	    1: 'EmailHash'
	  },
	  5: { // Hash256
	    1: 'LedgerHash',
	    2: 'ParentHash',
	    3: 'TransactionHash',
	    4: 'AccountHash',
	    5: 'PreviousTxnID',
	    6: 'LedgerIndex',
	    7: 'WalletLocator',
	    8: 'RootIndex',
	    9: 'AccountTxnID',
	    16: 'BookDirectory',
	    17: 'InvoiceID',
	    18: 'Nickname',
	    19: 'Amendment',
	    20: 'TicketID'
	  },
	  6: { // Amount
	    1: 'Amount',
	    2: 'Balance',
	    3: 'LimitAmount',
	    4: 'TakerPays',
	    5: 'TakerGets',
	    6: 'LowLimit',
	    7: 'HighLimit',
	    8: 'Fee',
	    9: 'SendMax',
	    16: 'MinimumOffer',
	    17: 'RippleEscrow',
	    18: 'DeliveredAmount'
	  },
	  7: { // VL
	    1: 'PublicKey',
	    2: 'MessageKey',
	    3: 'SigningPubKey',
	    4: 'TxnSignature',
	    5: 'Generator',
	    6: 'Signature',
	    7: 'Domain',
	    8: 'FundCode',
	    9: 'RemoveCode',
	    10: 'ExpireCode',
	    11: 'CreateCode',
	    12: 'MemoType',
	    13: 'MemoData',
	    14: 'MemoFormat'
	  },
	  8: { // Account
	    1: 'Account',
	    2: 'Owner',
	    3: 'Destination',
	    4: 'Issuer',
	    7: 'Target',
	    8: 'RegularKey'
	  },
	  14: { // Object
	    1: undefined, // end of Object
	    2: 'TransactionMetaData',
	    3: 'CreatedNode',
	    4: 'DeletedNode',
	    5: 'ModifiedNode',
	    6: 'PreviousFields',
	    7: 'FinalFields',
	    8: 'NewFields',
	    9: 'TemplateEntry',
	    10: 'Memo'
	  },
	  15: { // Array
	    1: undefined, // end of Array
	    2: 'SigningAccounts',
	    3: 'TxnSignatures',
	    4: 'Signatures',
	    5: 'Template',
	    6: 'Necessary',
	    7: 'Sufficient',
	    8: 'AffectedNodes',
	    9: 'Memos'
	  },

	  // Uncommon types
	  16: { // Int8
	    1: 'CloseResolution',
	    2: 'TemplateEntryType',
	    3: 'TransactionResult'
	  },
	  17: { // Hash160
	    1: 'TakerPaysCurrency',
	    2: 'TakerPaysIssuer',
	    3: 'TakerGetsCurrency',
	    4: 'TakerGetsIssuer'
	  },
	  18: { // PathSet
	    1: 'Paths'
	  },
	  19: { // Vector256
	    1: 'Indexes',
	    2: 'Hashes',
	    3: 'Amendments'
	  }
	};

	var INVERSE_FIELDS_MAP = exports.fieldsInverseMap = {};

	_Object$keys(FIELDS_MAP).forEach(function (k1) {
	  _Object$keys(FIELDS_MAP[k1]).forEach(function (k2) {
	    INVERSE_FIELDS_MAP[FIELDS_MAP[k1][k2]] = [Number(k1), Number(k2)];
	  });
	});

	var REQUIRED = exports.REQUIRED = 0,
	    OPTIONAL = exports.OPTIONAL = 1,
	    DEFAULT = exports.DEFAULT = 2;

	var base = [['TransactionType', REQUIRED], ['Flags', OPTIONAL], ['SourceTag', OPTIONAL], ['LastLedgerSequence', OPTIONAL], ['Account', REQUIRED], ['Sequence', REQUIRED], ['Fee', REQUIRED], ['OperationLimit', OPTIONAL], ['SigningPubKey', REQUIRED], ['TxnSignature', OPTIONAL], ['AccountTxnID', OPTIONAL], ['Memos', OPTIONAL]];

	exports.tx = {
	  AccountSet: [3].concat(base, [['EmailHash', OPTIONAL], ['WalletLocator', OPTIONAL], ['WalletSize', OPTIONAL], ['MessageKey', OPTIONAL], ['Domain', OPTIONAL], ['TransferRate', OPTIONAL], ['SetFlag', OPTIONAL], ['ClearFlag', OPTIONAL]]),
	  TrustSet: [20].concat(base, [['LimitAmount', OPTIONAL], ['QualityIn', OPTIONAL], ['QualityOut', OPTIONAL]]),
	  OfferCreate: [7].concat(base, [['TakerPays', REQUIRED], ['TakerGets', REQUIRED], ['Expiration', OPTIONAL], ['OfferSequence', OPTIONAL]]),
	  OfferCancel: [8].concat(base, [['OfferSequence', REQUIRED]]),
	  SetRegularKey: [5].concat(base, [['RegularKey', OPTIONAL]]),
	  Payment: [0].concat(base, [['Destination', REQUIRED], ['Amount', REQUIRED], ['SendMax', OPTIONAL], ['Paths', DEFAULT], ['InvoiceID', OPTIONAL], ['DestinationTag', OPTIONAL]]),
	  Contract: [9].concat(base, [['Expiration', REQUIRED], ['BondAmount', REQUIRED], ['StampEscrow', REQUIRED], ['RippleEscrow', REQUIRED], ['CreateCode', OPTIONAL], ['FundCode', OPTIONAL], ['RemoveCode', OPTIONAL], ['ExpireCode', OPTIONAL]]),
	  RemoveContract: [10].concat(base, [['Target', REQUIRED]]),
	  EnableFeature: [100].concat(base, [['Feature', REQUIRED]]),
	  EnableAmendment: [100].concat(base, [['Amendment', REQUIRED]]),
	  SetFee: [101].concat(base, [['BaseFee', REQUIRED], ['ReferenceFeeUnits', REQUIRED], ['ReserveBase', REQUIRED], ['ReserveIncrement', REQUIRED]]),
	  TicketCreate: [10].concat(base, [['Target', OPTIONAL], ['Expiration', OPTIONAL]]),
	  TicketCancel: [11].concat(base, [['TicketID', REQUIRED]])
	};

	var sleBase = [['LedgerIndex', OPTIONAL], ['LedgerEntryType', REQUIRED], ['Flags', REQUIRED]];

	exports.ledger = {
	  AccountRoot: [97].concat(sleBase, [['Sequence', REQUIRED], ['PreviousTxnLgrSeq', REQUIRED], ['TransferRate', OPTIONAL], ['WalletSize', OPTIONAL], ['OwnerCount', REQUIRED], ['EmailHash', OPTIONAL], ['PreviousTxnID', REQUIRED], ['AccountTxnID', OPTIONAL], ['WalletLocator', OPTIONAL], ['Balance', REQUIRED], ['MessageKey', OPTIONAL], ['Domain', OPTIONAL], ['Account', REQUIRED], ['RegularKey', OPTIONAL]]),
	  Contract: [99].concat(sleBase, [['PreviousTxnLgrSeq', REQUIRED], ['Expiration', REQUIRED], ['BondAmount', REQUIRED], ['PreviousTxnID', REQUIRED], ['Balance', REQUIRED], ['FundCode', OPTIONAL], ['RemoveCode', OPTIONAL], ['ExpireCode', OPTIONAL], ['CreateCode', OPTIONAL], ['Account', REQUIRED], ['Owner', REQUIRED], ['Issuer', REQUIRED]]),
	  DirectoryNode: [100].concat(sleBase, [['IndexNext', OPTIONAL], ['IndexPrevious', OPTIONAL], ['ExchangeRate', OPTIONAL], ['RootIndex', REQUIRED], ['Owner', OPTIONAL], ['TakerPaysCurrency', OPTIONAL], ['TakerPaysIssuer', OPTIONAL], ['TakerGetsCurrency', OPTIONAL], ['TakerGetsIssuer', OPTIONAL], ['Indexes', REQUIRED]]),
	  EnabledFeatures: [102].concat(sleBase, [['Features', REQUIRED]]),
	  FeeSettings: [115].concat(sleBase, [['ReferenceFeeUnits', REQUIRED], ['ReserveBase', REQUIRED], ['ReserveIncrement', REQUIRED], ['BaseFee', REQUIRED], ['LedgerIndex', OPTIONAL]]),
	  GeneratorMap: [103].concat(sleBase, [['Generator', REQUIRED]]),
	  LedgerHashes: [104].concat(sleBase, [['LedgerEntryType', REQUIRED], ['Flags', REQUIRED], ['FirstLedgerSequence', OPTIONAL], ['LastLedgerSequence', OPTIONAL], ['LedgerIndex', OPTIONAL], ['Hashes', REQUIRED]]),
	  Nickname: [110].concat(sleBase, [['LedgerEntryType', REQUIRED], ['Flags', REQUIRED], ['LedgerIndex', OPTIONAL], ['MinimumOffer', OPTIONAL], ['Account', REQUIRED]]),
	  Offer: [111].concat(sleBase, [['LedgerEntryType', REQUIRED], ['Flags', REQUIRED], ['Sequence', REQUIRED], ['PreviousTxnLgrSeq', REQUIRED], ['Expiration', OPTIONAL], ['BookNode', REQUIRED], ['OwnerNode', REQUIRED], ['PreviousTxnID', REQUIRED], ['LedgerIndex', OPTIONAL], ['BookDirectory', REQUIRED], ['TakerPays', REQUIRED], ['TakerGets', REQUIRED], ['Account', REQUIRED]]),
	  RippleState: [114].concat(sleBase, [['LedgerEntryType', REQUIRED], ['Flags', REQUIRED], ['PreviousTxnLgrSeq', REQUIRED], ['HighQualityIn', OPTIONAL], ['HighQualityOut', OPTIONAL], ['LowQualityIn', OPTIONAL], ['LowQualityOut', OPTIONAL], ['LowNode', OPTIONAL], ['HighNode', OPTIONAL], ['PreviousTxnID', REQUIRED], ['LedgerIndex', OPTIONAL], ['Balance', REQUIRED], ['LowLimit', REQUIRED], ['HighLimit', REQUIRED]])
	};

	exports.metadata = [['DeliveredAmount', OPTIONAL], ['TransactionIndex', REQUIRED], ['TransactionResult', REQUIRED], ['AffectedNodes', REQUIRED]];

	exports.ter = {
	  tesSUCCESS: 0,
	  tecCLAIM: 100,
	  tecPATH_PARTIAL: 101,
	  tecUNFUNDED_ADD: 102,
	  tecUNFUNDED_OFFER: 103,
	  tecUNFUNDED_PAYMENT: 104,
	  tecFAILED_PROCESSING: 105,
	  tecDIR_FULL: 121,
	  tecINSUF_RESERVE_LINE: 122,
	  tecINSUF_RESERVE_OFFER: 123,
	  tecNO_DST: 124,
	  tecNO_DST_INSUF_XRP: 125,
	  tecNO_LINE_INSUF_RESERVE: 126,
	  tecNO_LINE_REDUNDANT: 127,
	  tecPATH_DRY: 128,
	  tecUNFUNDED: 129, // Deprecated, old ambiguous unfunded.
	  tecMASTER_DISABLED: 130,
	  tecNO_REGULAR_KEY: 131,
	  tecOWNERS: 132,
	  tecNO_ISSUER: 133,
	  tecNO_AUTH: 134,
	  tecNO_LINE: 135,
	  tecINSUFF_FEE: 136,
	  tecFROZEN: 137,
	  tecNO_TARGET: 138,
	  tecNO_PERMISSION: 139,
	  tecNO_ENTRY: 140,
	  tecINSUFFICIENT_RESERVE: 141,
	  tecNEED_MASTER_KEY: 142,
	  tecDST_TAG_NEEDED: 143,
	  tecINTERNAL: 144
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// returns the mantissa from the passed in string,
	// adding zeros until it has 16 sd
	function getMantissa16FromString(decimalString) {
	  var mantissa = decimalString.replace(/\./, '') // remove decimal point
	  .replace(/e.*/, '') // remove scientific notation
	  .replace(/^0*/, ''); // remove leading zeroes
	  if (mantissa.length > 16) {
	    return mantissa.substring(0, 16);
	  }
	  while (mantissa.length < 16) {
	    mantissa += '0'; // add trailing zeroes until length is 16
	  }
	  return mantissa;
	}

	function getMantissaDecimalString(bignum) {
	  return getMantissa16FromString(bignum.toPrecision(16));
	}

	function trace(comment, func) {
	  return function () {
	    console.log('%s: %s', trace, arguments.toString);
	    func(arguments);
	  };
	}

	function arraySet(count, value) {
	  var a = new Array(count);

	  for (var i = 0; i < count; i++) {
	    a[i] = value;
	  }

	  return a;
	}

	function hexToString(h) {
	  var a = [];
	  var i = 0;

	  if (h.length % 2) {
	    a.push(String.fromCharCode(parseInt(h.substring(0, 1), 16)));
	    i = 1;
	  }

	  for (; i < h.length; i += 2) {
	    a.push(String.fromCharCode(parseInt(h.substring(i, i + 2), 16)));
	  }

	  return a.join('');
	}

	function stringToHex(s) {
	  var result = '';
	  for (var i = 0; i < s.length; i++) {
	    var b = s.charCodeAt(i);
	    result += b < 16 ? '0' + b.toString(16) : b.toString(16);
	  }
	  return result;
	}

	function stringToArray(s) {
	  var a = new Array(s.length);

	  for (var i = 0; i < a.length; i += 1) {
	    a[i] = s.charCodeAt(i);
	  }

	  return a;
	}

	function hexToArray(h) {
	  return stringToArray(hexToString(h));
	}

	function arrayToHex(a) {
	  return a.map(function (byteValue) {
	    var hex = byteValue.toString(16).toUpperCase();
	    return hex.length > 1 ? hex : '0' + hex;
	  }).join('');
	}

	function chunkString(str, n, leftAlign) {
	  var ret = [];
	  var i = 0;
	  var len = str.length;

	  if (leftAlign) {
	    i = str.length % n;
	    if (i) {
	      ret.push(str.slice(0, i));
	    }
	  }

	  for (; i < len; i += n) {
	    ret.push(str.slice(i, n + i));
	  }

	  return ret;
	}

	function assert(assertion, msg) {
	  if (!assertion) {
	    throw new Error('Assertion failed' + (msg ? ': ' + msg : '.'));
	  }
	}

	/**
	 * @param {Array} arr (values)
	 * @return {Array} unique values (for string representation of value) in `arr`
	 */
	function arrayUnique(arr) {
	  var u = {},
	      a = [];

	  for (var i = 0, l = arr.length; i < l; i++) {
	    var k = arr[i];
	    if (u[k]) {
	      continue;
	    }
	    a.push(k);
	    u[k] = true;
	  }

	  return a;
	}

	/**
	 * @param {Number} rpepoch (seconds since 1/1/2000 GMT)
	 * @return {Number} ms since unix epoch
	 *
	 */
	function toTimestamp(rpepoch) {
	  return (rpepoch + 0x386D4380) * 1000;
	}

	/**
	 * @param {Number|Date} timestamp (ms since unix epoch)
	 * @return {Number} seconds since ripple epoch ( 1/1/2000 GMT)
	 */
	function fromTimestamp(timestamp) {
	  var timestamp_ = timestamp instanceof Date ? timestamp.getTime() : timestamp;
	  return Math.round(timestamp_ / 1000) - 0x386D4380;
	}

	exports.time = {
	  fromRipple: toTimestamp,
	  toRipple: fromTimestamp
	};

	exports.trace = trace;
	exports.arraySet = arraySet;
	exports.hexToString = hexToString;
	exports.hexToArray = hexToArray;
	exports.stringToArray = stringToArray;
	exports.stringToHex = stringToHex;
	exports.arrayToHex = arrayToHex;
	exports.chunkString = chunkString;
	exports.assert = assert;
	exports.arrayUnique = arrayUnique;
	exports.toTimestamp = toTimestamp;
	exports.fromTimestamp = fromTimestamp;
	exports.getMantissaDecimalString = getMantissaDecimalString;
	exports.getMantissa16FromString = getMantissa16FromString;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(51);
	var assert = __webpack_require__(75);
	var util = __webpack_require__(81);
	var url = __webpack_require__(80);
	var HttpsProxyAgent = __webpack_require__(95);
	var LRU = __webpack_require__(90);
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var RippleError = __webpack_require__(16).RippleError;
	var Amount = __webpack_require__(5).Amount;
	var RangeSet = __webpack_require__(26).RangeSet;
	var log = __webpack_require__(23).internal.sub('server');

	/**
	 *  @constructor Server
	 *
	 *  @param {Remote} Reference to a Remote object
	 *  @param {Object} Options
	 *    @param {String} host
	 *    @param {Number|String} port
	 *    @param [Boolean] securec
	 */

	function Server(remote, opts_) {
	  EventEmitter.call(this);

	  var self = this;
	  var opts = undefined;

	  if (typeof opts_ === 'string') {
	    var parsedUrl = url.parse(opts_);
	    opts = {
	      host: parsedUrl.hostname,
	      port: parsedUrl.port,
	      secure: parsedUrl.protocol === 'ws:' ? false : true
	    };
	  } else {
	    opts = opts_;
	  }

	  if (typeof opts !== 'object') {
	    throw new TypeError('Server configuration is not an Object');
	  }

	  if (!Server.DOMAIN_RE.test(opts.host)) {
	    throw new Error('Server host is malformed, use "host" and "port" server configuration');
	  }

	  if (typeof opts.secure !== 'boolean') {
	    opts.secure = true;
	  }

	  if (!Boolean(opts.port)) {
	    opts.port = opts.secure ? 443 : 80;
	  }

	  // We want to allow integer strings as valid port numbers for backward
	  // compatibility
	  opts.port = Number(opts.port);
	  if (isNaN(opts.port)) {
	    throw new TypeError('Server port must be a number');
	  }

	  if (opts.port < 1 || opts.port > 65535) {
	    throw new TypeError('Server "port" must be an integer in range 1-65535');
	  }

	  this._remote = remote;
	  this._opts = opts;
	  this._ws = undefined;

	  this._connected = false;
	  this._shouldConnect = false;
	  this._state = 'offline';
	  this._ledgerRanges = new RangeSet();
	  this._ledgerMap = new LRU({ max: 200 });

	  this._id = 0; // request ID
	  this._retry = 0;
	  this._requests = {};

	  this._load_base = 256;
	  this._load_factor = 256;

	  this._fee = 10;
	  this._fee_ref = 10;
	  this._fee_base = 10;
	  this._reserve_base = undefined;
	  this._reserve_inc = undefined;
	  this._fee_cushion = this._remote.fee_cushion;

	  this._lastLedgerIndex = NaN;
	  this._lastLedgerClose = NaN;

	  this._score = 0;
	  this._scoreWeights = {
	    ledgerclose: 5,
	    response: 1
	  };

	  this._pubkey_node = '';

	  this._url = this._opts.url = (this._opts.secure ? 'wss://' : 'ws://') + this._opts.host + ':' + this._opts.port;

	  this.on('message', function onMessage(message) {
	    self._handleMessage(message);
	  });

	  this.on('response_subscribe', function onSubscribe(message) {
	    self._handleResponseSubscribe(message);
	  });

	  function setActivityInterval() {
	    var interval = self._checkActivity.bind(self);
	    self._activityInterval = setInterval(interval, 1000);
	  }

	  this.on('disconnect', function onDisconnect() {
	    clearInterval(self._activityInterval);
	    self.once('ledger_closed', setActivityInterval);
	  });

	  this.once('ledger_closed', setActivityInterval);

	  this._remote.on('ledger_closed', function onRemoteLedgerClose(ledger) {
	    self._updateScore('ledgerclose', ledger);
	  });

	  this.on('response_ping', function onPingResponse(message, request) {
	    _.noop(message);
	    self._updateScore('response', request);
	  });

	  this.on('load_changed', function onLoadChange(load) {
	    self._updateScore('loadchange', load);
	  });

	  this.on('connect', function () {
	    self.requestServerID();
	  });
	}

	util.inherits(Server, EventEmitter);

	/* eslint-disable max-len */
	Server.DOMAIN_RE = /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|[-_]){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|[-_]){0,61}[0-9A-Za-z])?)*\.?$/;
	/* eslint-enable max-len */

	Server.TLS_ERRORS = ['UNABLE_TO_GET_ISSUER_CERT', 'UNABLE_TO_GET_CRL', 'UNABLE_TO_DECRYPT_CERT_SIGNATURE', 'UNABLE_TO_DECRYPT_CRL_SIGNATURE', 'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY', 'CERT_SIGNATURE_FAILURE', 'CRL_SIGNATURE_FAILURE', 'CERT_NOT_YET_VALID', 'CERT_HAS_EXPIRED', 'CRL_NOT_YET_VALID', 'CRL_HAS_EXPIRED', 'ERROR_IN_CERT_NOT_BEFORE_FIELD', 'ERROR_IN_CERT_NOT_AFTER_FIELD', 'ERROR_IN_CRL_LAST_UPDATE_FIELD', 'ERROR_IN_CRL_NEXT_UPDATE_FIELD', 'OUT_OF_MEM', 'DEPTH_ZERO_SELF_SIGNED_CERT', 'SELF_SIGNED_CERT_IN_CHAIN', 'UNABLE_TO_GET_ISSUER_CERT_LOCALLY', 'UNABLE_TO_VERIFY_LEAF_SIGNATURE', 'CERT_CHAIN_TOO_LONG', 'CERT_REVOKED', 'INVALID_CA', 'PATH_LENGTH_EXCEEDED', 'INVALID_PURPOSE', 'CERT_UNTRUSTED', 'CERT_REJECTED'];

	/**
	 * Server states that we will treat as the server being online.
	 *
	 * Our requirements are that the server can process transactions and notify
	 * us of changes.
	 */

	Server.onlineStates = ['syncing', 'tracking', 'proposing', 'validating', 'full'];

	/**
	 * This is the final interface between client code and a socket connection to a
	 * `rippled` server. As such, this is a decent hook point to allow a WebSocket
	 * interface conforming object to be used as a basis to mock rippled. This
	 * avoids the need to bind a websocket server to a port and allows a more
	 * synchronous style of code to represent a client <-> server message sequence.
	 * We can also use this to log a message sequence to a buffer.
	 *
	 * @api private
	 */

	Server.websocketConstructor = function () {
	  // We require this late, because websocket shims may be loaded after
	  // ripple-lib in the browser
	  return __webpack_require__(59);
	};

	/**
	 * Set server state
	 *
	 * @param {String} state
	 * @api private
	 */

	Server.prototype._setState = function (state) {
	  if (state !== this._state) {
	    if (this._remote.trace) {
	      log.info(this.getServerID(), 'set_state:', state);
	    }

	    this._state = state;
	    this.emit('state', state);

	    switch (state) {
	      case 'online':
	        this._connected = true;
	        this._retry = 0;
	        this.emit('connect');
	        break;
	      case 'offline':
	        this._connected = false;
	        this.emit('disconnect');
	        break;
	    }
	  }
	};

	/**
	 * Check that server is still active.
	 *
	 * Server activity is determined by ledger_closed events.
	 * Maximum delay to receive a ledger_closed event is 20s.
	 *
	 * If server is inactive, reconnect
	 *
	 * @api private
	 */

	Server.prototype._checkActivity = function () {
	  if (!this.isConnected()) {
	    return;
	  }

	  if (isNaN(this._lastLedgerClose)) {
	    return;
	  }

	  var delta = Date.now() - this._lastLedgerClose;

	  if (delta > 1000 * 25) {
	    if (this._remote.trace) {
	      log.info(this.getServerID(), 'reconnect: activity delta:', delta);
	    }
	    this.reconnect();
	  }
	};

	/**
	 * If server is not up-to-date, request server_info for getting pubkey_node
	 * & hostid information. Otherwise this information is available on the
	 * initial server subscribe response
	 */

	Server.prototype.requestServerID = function () {
	  var self = this;

	  if (this._pubkey_node) {
	    return;
	  }

	  this.on('response_server_info', function setServerID(message) {
	    try {
	      self._pubkey_node = message.info.pubkey_node;
	    } catch (e) {
	      log.warn('Failed to get server pubkey_node', message);
	    }
	  });

	  var serverInfoRequest = this._remote.requestServerInfo();
	  serverInfoRequest.on('error', function () {});
	  this._request(serverInfoRequest);
	};

	/**
	 * Server maintains a score for request prioritization.
	 *
	 * The score is determined by various data including
	 * this server's lag to receive ledger_closed events,
	 * ping response time, and load(fee) change
	 *
	 * @param {String} type
	 * @param {Object} data
	 * @api private
	 */

	Server.prototype._updateScore = function (type, data) {
	  if (!this.isConnected()) {
	    return;
	  }

	  var weight = this._scoreWeights[type] || 1;
	  var delta = undefined;

	  switch (type) {
	    case 'ledgerclose':
	      // Ledger lag
	      delta = data.ledger_index - this._lastLedgerIndex;
	      if (delta > 0) {
	        this._score += weight * delta;
	      }
	      break;
	    case 'response':
	      // Ping lag
	      // Servers are not pinged by default
	      delta = Math.floor((Date.now() - data.time) / 200);
	      this._score += weight * delta;
	      break;
	    case 'loadchange':
	      // Load/fee change
	      this._fee = Number(this._computeFee(10));
	      break;
	  }

	  if (this._score > 1e3) {
	    if (this._remote.trace) {
	      log.info(this.getServerID(), 'reconnect: score:', this._score);
	    }
	    this.reconnect();
	  }
	};

	/**
	 * Get the server's remote address
	 *
	 * Incompatible with ripple-lib client build
	 */

	Server.prototype.getRemoteAddress = Server.prototype._remoteAddress = function () {
	  try {
	    return this._ws._socket.remoteAddress;
	  } catch (e) {
	    log.warn('Cannot get remote address. Does not work in browser');
	  }
	};

	/**
	 * Get the server's hostid
	 */

	Server.prototype.getHostID = Server.prototype.getServerID = function () {
	  return this._url + ' (' + (this._pubkey_node ? this._pubkey_node : '') + ')';
	};

	/**
	 * Disconnect from rippled WebSocket server
	 *
	 * @api public
	 */

	Server.prototype.disconnect = function () {
	  var self = this;

	  if (!this.isConnected()) {
	    this.once('socket_open', function () {
	      self.disconnect();
	    });
	    return;
	  }

	  // these need to be reset so that updateScore
	  // and checkActivity do not trigger reconnect
	  this._lastLedgerIndex = NaN;
	  this._lastLedgerClose = NaN;
	  this._score = 0;
	  this._shouldConnect = false;
	  this._ledgerRanges.reset();
	  this._ledgerMap.reset();
	  this._setState('offline');

	  if (this._ws) {
	    this._ws.close();
	  }
	};

	/**
	 * Reconnect to rippled WebSocket server
	 *
	 * @api public
	 */

	Server.prototype.reconnect = function () {
	  var self = this;

	  function reconnect() {
	    self._shouldConnect = true;
	    self._retry = 0;
	    self.connect();
	  }

	  if (this._ws && this._shouldConnect) {
	    if (this.isConnected()) {
	      this.once('disconnect', reconnect);
	      this.disconnect();
	    } else {
	      reconnect();
	    }
	  }
	};

	/**
	 * Connect to rippled WebSocket server and subscribe to events that are
	 * internally requisite. Automatically retry connections with a gradual
	 * back-off
	 *
	 * @api public
	 */

	Server.prototype.connect = function () {
	  var self = this;

	  var WebSocket = Server.websocketConstructor();

	  if (!WebSocket) {
	    throw new Error('No websocket support detected!');
	  }

	  // We don't connect if we believe we're already connected. This means we have
	  // recently received a message from the server and the WebSocket has not
	  // reported any issues either. If we do fail to ping or the connection drops,
	  // we will automatically reconnect.
	  if (this.isConnected()) {
	    return;
	  }

	  // Ensure any existing socket is given the command to close first.
	  if (this._ws) {
	    this._ws.close();
	  }

	  if (this._remote.trace) {
	    log.info(this.getServerID(), 'connect');
	  }

	  if (this._remote.proxy !== undefined) {
	    var parsed = url.parse(this._opts.url);
	    var opts = url.parse(this._remote.proxy);
	    opts.secureEndpoint = parsed.protocol === 'wss:';
	    var agent = new HttpsProxyAgent(opts);

	    this._ws = new WebSocket(this._opts.url, { agent: agent });
	  } else {
	    this._ws = new WebSocket(this._opts.url);
	  }

	  var ws = this._ws;

	  this._shouldConnect = true;

	  self.emit('connecting');

	  ws.onmessage = function onMessage(msg) {
	    var message = msg.data;

	    try {
	      message = JSON.parse(message);
	    } catch (e) {
	      var error = new RippleError('unexpected', 'Unexpected response from server: ' + JSON.stringify(message));

	      self.emit('unexpected', message);
	      log.error(error);
	      return;
	    }

	    self.emit('message', message);
	  };

	  ws.onopen = function onOpen() {
	    if (ws === self._ws) {
	      self.emit('socket_open');
	      // Subscribe to events
	      self._request(self._remote._serverPrepareSubscribe(self));
	    }
	  };

	  ws.onerror = function onError(e) {
	    if (ws === self._ws) {
	      self.emit('socket_error');

	      if (self._remote.trace) {
	        log.info(self.getServerID(), 'onerror:', e.data || e);
	      }

	      if (Server.TLS_ERRORS.indexOf(e.message) !== -1) {
	        // Unrecoverable
	        throw e;
	      }

	      // Most connection errors for WebSockets are conveyed as 'close'
	      // events with
	      // code 1006. This is done for security purposes and therefore unlikely to
	      // ever change.

	      // This means that this handler is hardly ever called in practice.
	      // If it is,
	      // it probably means the server's WebSocket implementation is corrupt, or
	      // the connection is somehow producing corrupt data.

	      // Most WebSocket applications simply log and ignore this error. Once we
	      // support for multiple servers, we may consider doing something like
	      // lowering this server's quality score.

	      // However, in Node.js this event may be triggered instead of the close
	      // event, so we need to handle it.
	      self._handleClose();
	    }
	  };

	  ws.onclose = function onClose() {
	    if (ws === self._ws) {
	      if (self._remote.trace) {
	        log.info(self.getServerID(), 'onclose:', ws.readyState);
	      }
	      self._handleClose();
	    }
	  };
	};

	/**
	 * Retry connection to rippled server
	 *
	 * @api private
	 */

	Server.prototype._retryConnect = function () {
	  var self = this;

	  this._retry += 1;

	  /*eslint-disable */

	  var retryTimeout = this._retry < 40 ?
	  // First, for 2 seconds: 20 times per second
	  1000 / 20 : this._retry < 40 + 60 ?
	  // Then, for 1 minute: once per second
	  1000 : this._retry < 40 + 60 + 60 ?
	  // Then, for 10 minutes: once every 10 seconds
	  10 * 1000 :
	  // Then: once every 30 seconds
	  30 * 1000;

	  /*eslint-enable */

	  function connectionRetry() {
	    if (self._shouldConnect) {
	      if (self._remote.trace) {
	        log.info(self.getServerID(), 'retry', self._retry);
	      }
	      self.connect();
	    }
	  }

	  this._retryTimer = setTimeout(connectionRetry, retryTimeout);
	};

	/**
	 * Handle connection closes
	 *
	 * @api private
	 */

	Server.prototype._handleClose = function () {
	  var ws = this._ws;

	  // Prevent additional events from this socket
	  ws.onopen = ws.onerror = ws.onclose = ws.onmessage = _.noop;

	  this.emit('socket_close');
	  this._setState('offline');

	  if (this._shouldConnect) {
	    this._retryConnect();
	  }
	};

	/**
	 * Handle incoming messages from rippled WebSocket server
	 *
	 * @param {JSON-parseable} message
	 * @api private
	 */

	Server.prototype._handleMessage = function (message) {
	  if (!Server.isValidMessage(message)) {
	    this.emit('unexpected', message);
	    return;
	  }

	  switch (message.type) {
	    case 'ledgerClosed':
	      this._handleLedgerClosed(message);
	      break;
	    case 'serverStatus':
	      this._handleServerStatus(message);
	      break;
	    case 'response':
	      this._handleResponse(message);
	      break;
	    case 'path_find':
	      this._handlePathFind(message);
	      break;
	  }
	};

	Server.prototype._handleLedgerClosed = function (message) {
	  this._lastLedgerIndex = message.ledger_index;
	  this._lastLedgerClose = Date.now();
	  this._ledgerRanges.addValue(message.ledger_index);
	  this._ledgerMap.set(message.ledger_hash, message.ledger_index);
	  this.emit('ledger_closed', message);
	};

	Server.prototype._handleServerStatus = function (message) {
	  // This message is only received when online.
	  // As we are connected, it is the definitive final state.
	  var isOnline = _.includes(Server.onlineStates, message.server_status);

	  this._setState(isOnline ? 'online' : 'offline');

	  if (!Server.isLoadStatus(message)) {
	    return;
	  }

	  this.emit('load', message, this);
	  this._remote.emit('load', message, this);

	  var loadChanged = message.load_base !== this._load_base || message.load_factor !== this._load_factor;

	  if (loadChanged) {
	    this._load_base = message.load_base;
	    this._load_factor = message.load_factor;
	    this.emit('load_changed', message, this);
	    this._remote.emit('load_changed', message, this);
	  }
	};

	Server.prototype._handleResponse = function (message) {
	  var _this = this;

	  // A response to a request.
	  var request = this._requests[message.id];

	  delete this._requests[message.id];

	  if (!request) {
	    if (this._remote.trace) {
	      log.info(this.getServerID(), 'UNEXPECTED:', message);
	    }
	    return;
	  }

	  if (message.status === 'success') {
	    (function () {
	      if (_this._remote.trace) {
	        log.info(_this.getServerID(), 'response:', message);
	      }

	      var command = request.message.command;
	      var result = message.result;
	      var responseEvent = 'response_' + command;

	      request.emit('success', result);

	      [_this, _this._remote].forEach(function (emitter) {
	        emitter.emit(responseEvent, result, request, message);
	      });
	    })();
	  } else if (message.error) {
	    if (this._remote.trace) {
	      log.info(this.getServerID(), 'error:', message);
	    }

	    request.emit('error', {
	      error: 'remoteError',
	      error_message: 'Remote reported an error.',
	      remote: message
	    });
	  }
	};

	Server.prototype._handlePathFind = function (message) {
	  if (this._remote.trace) {
	    log.info(this.getServerID(), 'path_find:', message);
	  }
	};

	/**
	 * Handle initial subscription response message. The server is considered
	 * `connected` after it has received a response to initial subscription to
	 * ledger and server streams
	 *
	 * @param {Object} message
	 * @api private
	 */

	Server.prototype._handleResponseSubscribe = function (message) {
	  if (this.isConnected()) {
	    // This function only concerns initializing the server's internal
	    // state after a connection
	    return;
	  }

	  if (!this._remote.allow_partial_history && !Server.hasFullLedgerHistory(message)) {
	    // Server has partial history and Remote has been configured to disallow
	    // servers with incomplete history
	    this.reconnect();
	    return;
	  }

	  if (message.pubkey_node) {
	    // pubkey_node is used to identify the server
	    this._pubkey_node = message.pubkey_node;
	  }

	  if (Server.isLoadStatus(message)) {
	    this._load_base = message.load_base || 256;
	    this._load_factor = message.load_factor || 256;
	    this._fee_ref = message.fee_ref || 10;
	    this._fee_base = message.fee_base || 10;
	    this._reserve_base = message.reserve_base;
	    this._reserve_inc = message.reserve_inc;
	  }

	  if (message.validated_ledgers) {
	    // Add validated ledgers to ledger range set
	    this._ledgerRanges.parseAndAddRanges(message.validated_ledgers);
	  }

	  if (_.includes(Server.onlineStates, message.server_status)) {
	    this._setState('online');
	  }
	};

	/**
	 * Check that server message indicates that server has complete ledger history
	 *
	 * @param {Object} message
	 * @return {Boolean}
	 */

	Server.hasFullLedgerHistory = function (message) {
	  return typeof message === 'object' && message.server_status === 'full' && typeof message.validated_ledgers === 'string' && message.validated_ledgers.split('-').length === 2;
	};

	/**
	 * Check that received message from rippled is valid
	 *
	 * @param {Object} message
	 * @return {Boolean}
	 */

	Server.isValidMessage = function (message) {
	  return typeof message === 'object' && typeof message.type === 'string';
	};

	/**
	 * Check that received serverStatus message contains load status information
	 *
	 * @param {Object} message
	 * @return {Boolean}
	 */

	Server.isLoadStatus = function (message) {
	  return typeof message === 'object' && typeof message.load_base === 'number' && typeof message.load_factor === 'number';
	};

	/**
	 * Send JSON message to rippled WebSocket server
	 *
	 * @param {JSON-Stringifiable} message
	 * @api private
	 */

	Server.prototype._sendMessage = function (message) {
	  if (this._ws) {
	    if (this._remote.trace) {
	      log.info(this.getServerID(), 'request:', message);
	    }
	    this._ws.send(JSON.stringify(message));
	  }
	};

	/**
	 * Submit a Request object
	 *
	 * Requests are indexed by message ID, which is repeated in the response from
	 * rippled WebSocket server
	 *
	 * @param {Request} request
	 * @api private
	 */

	Server.prototype._request = function (request) {
	  var self = this;

	  // Only bother if we are still connected.
	  if (!this._ws) {
	    if (this._remote.trace) {
	      log.info(this.getServerID(), 'request: DROPPING:', request.message);
	    }
	    return;
	  }

	  request.server = this;
	  request.message.id = this._id;
	  request.time = Date.now();

	  this._requests[request.message.id] = request;

	  // Advance message ID
	  this._id++;

	  function sendRequest() {
	    self._sendMessage(request.message);
	  }

	  var isOpen = this._ws.readyState === 1;
	  var isSubscribeRequest = request && request.message.command === 'subscribe';

	  if (this.isConnected() || isOpen && isSubscribeRequest) {
	    sendRequest();
	  } else {
	    this.once('connect', sendRequest);
	  }
	};

	/**
	 * Get server connected status
	 *
	 * @return boolean
	 */

	Server.prototype.isConnected = Server.prototype._isConnected = function () {
	  return this._connected;
	};

	/**
	 * Calculate transaction fee
	 *
	 * @param {Transaction|Number} Fee units for a provided transaction
	 * @return {String} Final fee in XRP for specified number of fee units
	 * @api private
	 */

	Server.prototype._computeFee = function (feeUnits) {
	  if (isNaN(feeUnits)) {
	    throw new Error('Invalid argument');
	  }

	  return this._feeTx(Number(feeUnits)).to_json();
	};

	/**
	 * Calculate a transaction fee for a number of tx fee units.
	 *
	 * This takes into account the last known network and local load fees.
	 *
	 * @param {Number} Fee units for a provided transaction
	 * @return {Amount} Final fee in XRP for specified number of fee units.
	 */

	Server.prototype._feeTx = function (units) {
	  var fee_unit = this._feeTxUnit();
	  return Amount.from_json(String(Math.ceil(units * fee_unit)));
	};

	/**
	 * Get the current recommended transaction fee unit.
	 *
	 * Multiply this value with the number of fee units in order to calculate the
	 * recommended fee for the transaction you are trying to submit.
	 *
	 * @return {Number} Recommended amount for one fee unit as float.
	 */

	Server.prototype._feeTxUnit = function () {
	  var fee_unit = this._fee_base / this._fee_ref;

	  // Apply load fees
	  fee_unit *= this._load_factor / this._load_base;

	  // Apply fee cushion (a safety margin in case fees rise since
	  // we were last updated)
	  fee_unit *= this._fee_cushion;

	  return fee_unit;
	};

	/**
	 * Get the current recommended reserve base.
	 *
	 * Returns the base reserve with load fees and safety margin applied.
	 */

	Server.prototype._reserve = function (ownerCount) {
	  // We should be in a valid state before calling this method
	  assert(this._reserve_base && this._reserve_inc);

	  var reserve_base = Amount.from_json(String(this._reserve_base));
	  var reserve_inc = Amount.from_json(String(this._reserve_inc));
	  var owner_count = ownerCount || 0;

	  if (owner_count < 0) {
	    throw new Error('Owner count must not be negative.');
	  }

	  return reserve_base.add(reserve_inc.multiply(owner_count));
	};

	/**
	 * Check that server has seen closed ledger
	 *
	 * @param {string|number} ledger hash or index
	 * @return boolean
	 */

	Server.prototype.hasLedger = function (ledger) {
	  var result = false;

	  if (typeof ledger === 'string' && /^[A-F0-9]{64}$/.test(ledger)) {
	    result = this._ledgerMap.has(ledger);
	  } else if (ledger !== null && !isNaN(ledger)) {
	    result = this._ledgerRanges.containsValue(ledger);
	  }

	  return result;
	};

	Server.prototype.hasLedgerRange = function (startLedger, endLedger) {
	  return this._ledgerRanges.containsRange(startLedger, endLedger);
	};

	/**
	 * Get ledger index of last seen validated ledger
	 *
	 * @return number
	 */

	Server.prototype.getLastLedger = Server.prototype.getLastLedgerIndex = function () {
	  return this._lastLedgerIndex;
	};

	exports.Server = Server;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var BigNumber = __webpack_require__(96);
	var Transaction = __webpack_require__(7).Transaction;
	var SHAMap = __webpack_require__(60).SHAMap;
	var SHAMapTreeNode = __webpack_require__(60).SHAMapTreeNode;
	var SerializedObject = __webpack_require__(15).SerializedObject;
	var stypes = __webpack_require__(27);
	var UInt160 = __webpack_require__(11).UInt160;
	var Currency = __webpack_require__(8).Currency;

	function Ledger() {
	  this.ledger_json = {};
	}

	Ledger.from_json = function (v) {
	  var ledger = new Ledger();
	  ledger.parse_json(v);
	  return ledger;
	};

	Ledger.space = __webpack_require__(61);

	/**
	 * Generate the key for an AccountRoot entry.
	 *
	 * @param {String|UInt160} accountArg - Ripple Account
	 * @return {UInt256}
	 */
	Ledger.calcAccountRootEntryHash = Ledger.prototype.calcAccountRootEntryHash = function (accountArg) {
	  var account = UInt160.from_json(accountArg);
	  var index = new SerializedObject();

	  index.append([0, Ledger.space.account.charCodeAt(0)]);
	  index.append(account.to_bytes());

	  return index.hash();
	};

	/**
	 * Generate the key for an Offer entry.
	 *
	 * @param {String|UInt160} accountArg - Ripple Account
	 * @param {Number} sequence - Sequence number of the OfferCreate transaction
	 *   that instantiated this offer.
	 * @return {UInt256}
	 */
	Ledger.calcOfferEntryHash = Ledger.prototype.calcOfferEntryHash = function (accountArg, sequence) {
	  var account = UInt160.from_json(accountArg);
	  var index = new SerializedObject();

	  index.append([0, Ledger.space.offer.charCodeAt(0)]);
	  index.append(account.to_bytes());
	  stypes.Int32.serialize(index, sequence);

	  return index.hash();
	};

	/**
	 * Generate the key for a RippleState entry.
	 *
	 * The ordering of the two account parameters does not matter.
	 *
	 * @param {String|UInt160} _account1 - First Ripple Account
	 * @param {String|UInt160} _account2 - Second Ripple Account
	 * @param {String|Currency} _currency - The currency code
	 * @return {UInt256}
	 */
	Ledger.calcRippleStateEntryHash = Ledger.prototype.calcRippleStateEntryHash = function (_account1, _account2, _currency) {
	  var currency = Currency.from_json(_currency);
	  var account1 = UInt160.from_json(_account1);
	  var account2 = UInt160.from_json(_account2);

	  if (!account1.is_valid()) {
	    throw new Error('Invalid first account');
	  }
	  if (!account2.is_valid()) {
	    throw new Error('Invalid second account');
	  }
	  if (!currency.is_valid()) {
	    throw new Error('Invalid currency');
	  }

	  var swap = account1.greater_than(account2);
	  var lowAccount = swap ? account2 : account1;
	  var highAccount = swap ? account1 : account2;
	  var index = new SerializedObject();

	  index.append([0, Ledger.space.rippleState.charCodeAt(0)]);
	  index.append(lowAccount.to_bytes());
	  index.append(highAccount.to_bytes());
	  index.append(currency.to_bytes());

	  return index.hash();
	};

	Ledger.prototype.parse_json = function (v) {
	  this.ledger_json = v;
	};

	Ledger.prototype.calc_tx_hash = function () {
	  var tx_map = new SHAMap();

	  this.ledger_json.transactions.forEach(function (tx_json) {
	    var tx = Transaction.from_json(tx_json);
	    var meta = SerializedObject.from_json(tx_json.metaData);

	    var data = new SerializedObject();
	    stypes.VariableLength.serialize(data, tx.serialize().to_hex());
	    stypes.VariableLength.serialize(data, meta.to_hex());
	    tx_map.add_item(tx.hash(), data, SHAMapTreeNode.TYPE_TRANSACTION_MD);
	  });

	  return tx_map.hash();
	};

	/**
	* @param {Object} options - object
	*
	* @param {Boolean} [options.sanity_test=false] - If `true`, will serialize each
	*   accountState item to binary and then back to json before finally
	*   serializing for hashing. This is mostly to expose any issues with
	*   ripple-lib's binary <--> json codecs.
	*
	* @return {UInt256} - hash of shamap
	*/
	Ledger.prototype.calc_account_hash = function (options) {
	  var account_map = new SHAMap();
	  var erred = undefined;

	  this.ledger_json.accountState.forEach(function (le) {
	    var data = SerializedObject.from_json(le);

	    var json = undefined;
	    if (options && options.sanity_test) {
	      try {
	        json = data.to_json();
	        data = SerializedObject.from_json(json);
	      } catch (e) {
	        console.log('account state item: ', le);
	        console.log('to_json() ', json);
	        console.log('exception: ', e);
	        erred = true;
	      }
	    }

	    account_map.add_item(le.index, data, SHAMapTreeNode.TYPE_ACCOUNT_STATE);
	  });

	  if (erred) {
	    throw new Error('There were errors with sanity_test'); // all logged above
	  }

	  return account_map.hash();
	};

	// see rippled Ledger::updateHash()
	Ledger.calculateLedgerHash = Ledger.prototype.calculateLedgerHash = function (ledgerHeader) {
	  var so = new SerializedObject();
	  var prefix = 0x4C575200;
	  var totalCoins = new BigNumber(ledgerHeader.total_coins).toString(16);

	  stypes.Int32.serialize(so, Number(ledgerHeader.ledger_index));
	  stypes.Int64.serialize(so, totalCoins);
	  stypes.Hash256.serialize(so, ledgerHeader.parent_hash);
	  stypes.Hash256.serialize(so, ledgerHeader.transaction_hash);
	  stypes.Hash256.serialize(so, ledgerHeader.account_hash);
	  stypes.Int32.serialize(so, ledgerHeader.parent_close_time);
	  stypes.Int32.serialize(so, ledgerHeader.close_time);
	  stypes.Int8.serialize(so, ledgerHeader.close_time_resolution);
	  stypes.Int8.serialize(so, ledgerHeader.close_flags);

	  return so.hash(prefix).to_hex();
	};

	exports.Ledger = Ledger;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var lodash = __webpack_require__(51);
	var LRU = __webpack_require__(90);
	var Transaction = __webpack_require__(7).Transaction;

	/**
	 * Manager for pending transactions
	 */

	function TransactionQueue() {
	  this._queue = [];
	  this._idCache = new LRU({ max: 200 });
	  this._sequenceCache = new LRU({ max: 200 });
	}

	/**
	 * Store received (validated) sequence
	 *
	 * @param {Number} sequence
	 */

	TransactionQueue.prototype.addReceivedSequence = function (sequence) {
	  this._sequenceCache.set(String(sequence), true);
	};

	/**
	 * Check that sequence number has been consumed by a validated
	 * transaction
	 *
	 * @param {Number} sequence
	 * @return {Boolean}
	 */

	TransactionQueue.prototype.hasSequence = function (sequence) {
	  return this._sequenceCache.has(String(sequence));
	};

	/**
	 * Store received (validated) ID transaction
	 *
	 * @param {String} transaction id
	 * @param {Transaction} transaction
	 */

	TransactionQueue.prototype.addReceivedId = function (id, transaction) {
	  this._idCache.set(id, transaction);
	};

	/**
	 * Get received (validated) transaction by ID
	 *
	 * @param {String} transaction id
	 * @return {Object}
	 */

	TransactionQueue.prototype.getReceived = function (id) {
	  return this._idCache.get(id);
	};

	/**
	 * Get a submitted transaction by ID. Transactions
	 * may have multiple associated IDs.
	 *
	 * @param {String} transaction id
	 * @return {Transaction}
	 */

	TransactionQueue.prototype.getSubmission = function (id) {
	  return lodash.find(this._queue, function (tx) {
	    return lodash.contains(tx.submittedIDs, id);
	  });
	};

	/**
	 * Get earliest ledger in the pending queue
	 *
	 * @return {Number} ledger
	 */

	TransactionQueue.prototype.getMinLedger = function () {
	  if (this.length() < 1) {
	    return -1;
	  }

	  var result = Infinity;

	  for (var i = 0; i < this.length(); i++) {
	    if (this._queue[i].initialSubmitIndex < result) {
	      result = this._queue[i].initialSubmitIndex;
	    }
	  }

	  if (!isFinite(result)) {
	    result = -1;
	  }

	  return result;
	};

	/**
	 * Remove a transaction from the queue
	 *
	 * @param {String|Transaction} transaction or id
	 */

	TransactionQueue.prototype.remove = function (tx) {
	  // ND: We are just removing the Transaction by identity
	  var i = this._queue.length;

	  if (typeof tx === 'string') {
	    tx = this.getSubmission(tx);
	  }

	  if (!(tx instanceof Transaction)) {
	    return;
	  }

	  while (i--) {
	    if (this._queue[i] === tx) {
	      this._queue.splice(i, 1);
	      break;
	    }
	  }
	};

	/**
	 * Add a transaction to pending queue
	 *
	 * @param {Transaction} transaction
	 */

	TransactionQueue.prototype.push = function (tx) {
	  this._queue.push(tx);
	};

	/**
	 * Iterate over pending transactions
	 *
	 * @param {Function} iterator
	 */

	TransactionQueue.prototype.forEach = function (fn) {
	  this._queue.forEach(fn);
	};

	/**
	 * @return {Number} length of pending queue
	 */

	TransactionQueue.prototype.length = TransactionQueue.prototype.getLength = function () {
	  return this._queue.length;
	};

	/**
	 * @return {Array} pending queue
	 */

	TransactionQueue.prototype.getQueue = function () {
	  return this._queue;
	};

	exports.TransactionQueue = TransactionQueue;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function normalize(digitArray) {
	  while (digitArray[0] === 0) {
	    digitArray.shift();
	  }
	  return digitArray;
	}

	function divmod(digitArray, base, divisor) {
	  var remainder = 0;
	  var quotient = [];
	  for (var j = 0; j < digitArray.length; j++) {
	    var temp = remainder * base + parseInt(digitArray[j], 10);
	    quotient.push(Math.floor(temp / divisor));
	    remainder = temp % divisor;
	  }
	  return { quotient: normalize(quotient), remainder: remainder };
	}

	function convertBase(digitArray, fromBase, toBase) {
	  var result = [];
	  var dividend = digitArray;
	  while (dividend.length > 0) {
	    var qr = divmod(dividend, fromBase, toBase);
	    result.unshift(qr.remainder);
	    dividend = qr.quotient;
	  }
	  return normalize(result);
	}

	module.exports = convertBase;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assert = __webpack_require__(75);

	/**
	 * Logging functionality for ripple-lib and any applications built on it.
	 *
	 * @param {String} namespace logging prefix
	 * @return {Void} this function does not return...
	 */
	function Log(namespace) {
	  if (!namespace) {
	    this._namespace = [];
	  } else if (Array.isArray(namespace)) {
	    this._namespace = namespace;
	  } else {
	    this._namespace = [String(namespace)];
	  }

	  this._prefix = this._namespace.concat(['']).join(': ');
	}

	/**
	 * Create a sub-logger.
	 *
	 * You can have a hierarchy of loggers.
	 *
	 * @example
	 *
	 *   var log = require('ripple').log.sub('server');
	 *
	 *   log.info('connection successful');
	 *   // prints: 'server: connection successful'
	 *
	 * @param {String} namespace logging prefix
	 * @return {Log} sub logger
	 */
	Log.prototype.sub = function (namespace) {
	  var subNamespace = this._namespace.slice();

	  if (namespace && typeof namespace === 'string') {
	    subNamespace.push(namespace);
	  }

	  var subLogger = new Log(subNamespace);
	  subLogger._setParent(this);
	  return subLogger;
	};

	Log.prototype._setParent = function (parentLogger) {
	  this._parent = parentLogger;
	};

	Log.makeLevel = function (level) {
	  return function () {
	    var args = Array.prototype.slice.apply(arguments);
	    args[0] = this._prefix + args[0];
	    Log.engine.logObject.apply(Log, [level].concat(args[0], [args.slice(2)]));
	  };
	};

	Log.prototype.debug = Log.makeLevel(1);
	Log.prototype.info = Log.makeLevel(2);
	Log.prototype.warn = Log.makeLevel(3);
	Log.prototype.error = Log.makeLevel(4);

	/**
	 * @param {String} message
	 * @param {Array} details
	 * @return {Array} prepared log info
	 */

	function getLogInfo(message, args) {
	  var stack = new Error().stack;

	  return [
	  // Timestamp
	  '[' + new Date().toISOString() + ']', message, '--',
	  // Location
	  typeof stack === 'string' ? stack.split('\n')[4].replace(/^\s+/, '') : '', '\n'].concat(args);
	}

	/**
	 * @param {Number} log level
	 * @param {Array} log info
	 */

	function logMessage(logLevel, args) {
	  switch (logLevel) {
	    case 1:
	    case 2:
	      console.log.apply(console, args);
	      break;
	    case 3:
	      console.warn.apply(console, args);
	      break;
	    case 4:
	      console.error.apply(console, args);
	      break;
	  }
	}

	var engines = {};

	/**
	 * Basic logging connector.
	 *
	 * This engine has no formatting and works with the most basic of 'console.log'
	 * implementations. This is the logging engine used in Node.js.
	 */
	engines.basic = {
	  logObject: function logObject(level, message, args_) {
	    var args = args_.map(function (arg) {
	      return JSON.stringify(arg, null, 2);
	    });

	    logMessage(level, getLogInfo(message, args));
	  }
	};

	/**
	 * Log engine for browser consoles.
	 *
	 * Browsers tend to have better consoles that support nicely formatted
	 * JavaScript objects. This connector passes objects through to the logging
	 * function without any stringification.
	 */
	engines.interactive = {
	  logObject: function logObject(level, message, args_) {
	    var args = args_.map(function (arg) {
	      return (/MSIE/.test(navigator.userAgent) ? JSON.stringify(arg, null, 2) : arg
	      );
	    });

	    logMessage(level, getLogInfo(message, args));
	  }
	};

	/**
	 * Null logging connector.
	 *
	 * This engine simply swallows all messages. Used when console.log is not
	 * available.
	 */
	engines.none = {
	  logObject: function logObject() {}
	};

	Log.getEngine = Log.prototype.getEngine = function () {
	  return Log.engine;
	};

	Log.setEngine = Log.prototype.setEngine = function (engine) {
	  assert.strictEqual(typeof engine, 'object');
	  assert.strictEqual(typeof engine.logObject, 'function');
	  Log.engine = engine;
	};

	if (typeof window !== 'undefined' && typeof console !== 'undefined') {
	  Log.setEngine(engines.interactive);
	} else if (typeof console !== 'undefined' && console.log) {
	  Log.setEngine(engines.basic);
	} else {
	  Log.setEngine(engines.none);
	}

	/**
	 * Provide a root logger as our main export.
	 *
	 * This means you can use the logger easily on the fly:
	 *     ripple.log.debug('My object is', myObj);
	 */
	module.exports = new Log();

	/**
	 * This is the logger for ripple-lib internally.
	 */
	module.exports.internal = module.exports.sub();

	/**
	 * Expose the class as well.
	 */
	module.exports.Log = Log;

	/**
	 * Expose log engines
	 */
	module.exports.engines = engines;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var util = __webpack_require__(81);
	var Amount = __webpack_require__(5).Amount;

	/**
	 * Represents a persistent path finding request.
	 *
	 * Only one path find request is allowed per connection, so when another path
	 * find request is triggered it will supercede the existing one, making it emit
	 * the 'end' and 'superceded' events.
	 */

	function PathFind(remote, src_account, dst_account, dst_amount, src_currencies) {
	  EventEmitter.call(this);

	  this.remote = remote;

	  this.src_account = src_account;
	  this.dst_account = dst_account;
	  this.dst_amount = dst_amount;
	  this.src_currencies = src_currencies;
	}

	util.inherits(PathFind, EventEmitter);

	/**
	 * Submits a path_find_create request to the network.
	 *
	 * This starts a path find request, superceding all previous path finds.
	 *
	 * This will be called automatically by Remote when this object is instantiated,
	 * so you should only have to call it if the path find was closed or superceded
	 * and you wish to restart it.
	 */

	PathFind.prototype.create = function () {
	  var self = this;

	  var req = this.remote.requestPathFindCreate({
	    source_account: this.src_account,
	    destination_account: this.dst_account,
	    destination_amount: this.dst_amount,
	    source_currencies: this.src_currencies
	  });

	  req.once('error', function (err) {
	    self.emit('error', err);
	  });
	  req.once('success', function (msg) {
	    self.notify_update(msg);
	  });

	  // XXX We should add ourselves to prepare_subscribe or a similar mechanism so
	  // that we can resubscribe after a reconnection.

	  req.broadcast().request();
	};

	PathFind.prototype.close = function () {
	  this.removeAllListeners('update');
	  this.remote.requestPathFindClose().broadcast().request();
	  this.emit('end');
	  this.emit('close');
	};

	PathFind.prototype.notify_update = function (message) {
	  var src_account = message.source_account;
	  var dst_account = message.destination_account;
	  var dst_amount = Amount.from_json(message.destination_amount);

	  // Only pass the event along if this path find response matches what we were
	  // looking for.
	  if (this.src_account === src_account && this.dst_account === dst_account && dst_amount.equals(this.dst_amount)) {
	    this.emit('update', message);
	  }
	};

	PathFind.prototype.notify_superceded = function () {
	  // XXX If we're set to re-subscribe whenever we connect to a new server, then
	  // we should cancel that behavior here. See PathFind#create.

	  this.emit('end');
	  this.emit('superceded');
	};

	exports.PathFind = PathFind;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$keys = __webpack_require__(89)['default'];

	var util = __webpack_require__(81);
	var assert = __webpack_require__(75);
	var async = __webpack_require__(91);
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var Transaction = __webpack_require__(7).Transaction;
	var RippleError = __webpack_require__(16).RippleError;
	var PendingQueue = __webpack_require__(21).TransactionQueue;
	var log = __webpack_require__(23).internal.sub('transactionmanager');

	/**
	 * @constructor TransactionManager
	 * @param {Account} account
	 */

	function TransactionManager(account) {
	  EventEmitter.call(this);

	  var self = this;

	  this._account = account;
	  this._accountID = account._account_id;
	  this._remote = account._remote;
	  this._nextSequence = undefined;
	  this._maxFee = this._remote.max_fee;
	  this._maxAttempts = this._remote.max_attempts;
	  this._submissionTimeout = this._remote.submission_timeout;
	  this._lastLedgerOffset = this._remote.last_ledger_offset;
	  this._pending = new PendingQueue();

	  this._account.on('transaction-outbound', function (res) {
	    self._transactionReceived(res);
	  });

	  this._remote.on('load_changed', function (load) {
	    self._adjustFees(load);
	  });

	  function updatePendingStatus(ledger) {
	    self._updatePendingStatus(ledger);
	  }

	  this._remote.on('ledger_closed', updatePendingStatus);

	  function handleReconnect() {
	    self._handleReconnect(function () {
	      // Handle reconnect, account_tx procedure first, before
	      // hooking back into ledger_closed
	      self._remote.on('ledger_closed', updatePendingStatus);
	    });
	  }

	  this._remote.on('disconnect', function () {
	    self._remote.removeListener('ledger_closed', updatePendingStatus);
	    self._remote.once('connect', handleReconnect);
	  });

	  // Query server for next account transaction sequence
	  this._loadSequence();
	}

	util.inherits(TransactionManager, EventEmitter);

	TransactionManager._isNoOp = function (transaction) {
	  return typeof transaction === 'object' && typeof transaction.tx_json === 'object' && transaction.tx_json.TransactionType === 'AccountSet' && transaction.tx_json.Flags === 0;
	};

	TransactionManager._isRemoteError = function (error) {
	  return typeof error === 'object' && error.error === 'remoteError' && typeof error.remote === 'object';
	};

	TransactionManager._isNotFound = function (error) {
	  return TransactionManager._isRemoteError(error) && /^(txnNotFound|transactionNotFound)$/.test(error.remote.error);
	};

	TransactionManager._isTooBusy = function (error) {
	  return TransactionManager._isRemoteError(error) && error.remote.error === 'tooBusy';
	};

	/**
	 * Normalize transactions received from account transaction stream and
	 * account_tx
	 *
	 * @param {Transaction}
	 * @return {Transaction} normalized
	 * @api private
	 */

	TransactionManager.normalizeTransaction = function (tx) {
	  var transaction = {};
	  var keys = _Object$keys(tx);

	  for (var i = 0; i < keys.length; i++) {
	    var k = keys[i];
	    switch (k) {
	      case 'transaction':
	        // Account transaction stream
	        transaction.tx_json = tx[k];
	        break;
	      case 'tx':
	        // account_tx response
	        transaction.engine_result = tx.meta.TransactionResult;
	        transaction.result = transaction.engine_result;
	        transaction.tx_json = tx[k];
	        transaction.hash = tx[k].hash;
	        transaction.ledger_index = tx[k].ledger_index;
	        transaction.type = 'transaction';
	        transaction.validated = tx.validated;
	        break;
	      case 'meta':
	      case 'metadata':
	        transaction.metadata = tx[k];
	        break;
	      case 'mmeta':
	        // Don't copy mmeta
	        break;
	      default:
	        transaction[k] = tx[k];
	    }
	  }

	  return transaction;
	};

	/**
	 * Handle received transaction from two possible sources
	 *
	 * + Account transaction stream (normal operation)
	 * + account_tx (after reconnect)
	 *
	 * @param {Object} transaction
	 * @api private
	 */

	TransactionManager.prototype._transactionReceived = function (tx) {
	  var transaction = TransactionManager.normalizeTransaction(tx);

	  if (!transaction.validated) {
	    // Transaction has not been validated
	    return;
	  }

	  if (transaction.tx_json.Account !== this._accountID) {
	    // Received transaction's account does not match
	    return;
	  }

	  if (this._remote.trace) {
	    log.info('transaction received:', transaction.tx_json);
	  }

	  this._pending.addReceivedSequence(transaction.tx_json.Sequence);

	  var hash = transaction.tx_json.hash;
	  var submission = this._pending.getSubmission(hash);

	  if (!(submission instanceof Transaction)) {
	    // The received transaction does not correlate to one submitted
	    this._pending.addReceivedId(hash, transaction);
	    return;
	  }

	  // ND: A `success` handler will `finalize` this later
	  switch (transaction.engine_result) {
	    case 'tesSUCCESS':
	      submission.emit('success', transaction);
	      break;
	    default:
	      submission.emit('error', transaction);
	  }
	};

	/**
	 * Adjust pending transactions' fees in real-time. This does not resubmit
	 * pending transactions; they will be resubmitted periodically with an updated
	 * fee (and as a consequence, a new transaction ID) if not already validated
	 *
	 * ND: note, that `Fee` is a component of a transactionID
	 *
	 * @api private
	 */

	TransactionManager.prototype._adjustFees = function () {
	  var self = this;

	  if (!this._remote.local_fee) {
	    return;
	  }

	  function maxFeeExceeded(transaction) {
	    // Don't err until attempting to resubmit
	    transaction.once('presubmit', function () {
	      transaction.emit('error', 'tejMaxFeeExceeded');
	    });
	  }

	  this._pending.forEach(function (transaction) {
	    if (transaction._setFixedFee) {
	      return;
	    }

	    var oldFee = transaction.tx_json.Fee;
	    var newFee = transaction._computeFee();

	    if (Number(newFee) > self._maxFee) {
	      // Max transaction fee exceeded, abort submission
	      maxFeeExceeded(transaction);
	      return;
	    }

	    transaction.tx_json.Fee = newFee;
	    transaction.emit('fee_adjusted', oldFee, newFee);

	    if (self._remote.trace) {
	      log.info('fee adjusted:', transaction.tx_json, oldFee, newFee);
	    }
	  });
	};

	/**
	 * Get pending transactions
	 *
	 * @return {Array} pending transactions
	 */

	TransactionManager.prototype.getPending = function () {
	  return this._pending;
	};

	/**
	 * Legacy code. Update transaction status after excessive ledgers pass. One of
	 * either "missing" or "lost"
	 *
	 * @param {Object} ledger data
	 * @api private
	 */

	TransactionManager.prototype._updatePendingStatus = function (ledger) {
	  assert.strictEqual(typeof ledger, 'object');
	  assert.strictEqual(typeof ledger.ledger_index, 'number');

	  this._pending.forEach(function (transaction) {
	    if (transaction.finalized) {
	      return;
	    }

	    switch (ledger.ledger_index - transaction.submitIndex) {
	      case 4:
	        transaction.emit('missing', ledger);
	        break;
	      case 8:
	        transaction.emit('lost', ledger);
	        break;
	    }

	    if (ledger.ledger_index > transaction.tx_json.LastLedgerSequence) {
	      // Transaction must fail
	      transaction.emit('error', new RippleError('tejMaxLedger', 'Transaction LastLedgerSequence exceeded'));
	    }
	  });
	};

	// Fill an account transaction sequence
	TransactionManager.prototype._fillSequence = function (tx, callback) {
	  var self = this;

	  function submitFill(sequence, fCallback) {
	    var fillTransaction = self._remote.createTransaction('AccountSet', {
	      account: self._accountID
	    });
	    fillTransaction.tx_json.Sequence = sequence;

	    // Secrets may be set on a per-transaction basis
	    if (tx._secret) {
	      fillTransaction.secret(tx._secret);
	    }

	    fillTransaction.once('submitted', fCallback);
	    fillTransaction.submit();
	  }

	  function sequenceLoaded(err, sequence) {
	    if (typeof sequence !== 'number') {
	      log.info('fill sequence: failed to fetch account transaction sequence');
	      return callback();
	    }

	    var sequenceDiff = tx.tx_json.Sequence - sequence;
	    var submitted = 0;

	    async.whilst(function () {
	      return submitted < sequenceDiff;
	    }, function (asyncCallback) {
	      submitFill(sequence, function (res) {
	        ++submitted;
	        if (res.engine_result === 'tesSUCCESS') {
	          self.emit('sequence_filled', err);
	        }
	        asyncCallback();
	      });
	    }, function () {
	      if (callback) {
	        callback();
	      }
	    });
	  }

	  this._loadSequence(sequenceLoaded);
	};

	/**
	 * Load account transaction sequence
	 *
	 * @param [Function] callback
	 * @api private
	 */

	TransactionManager.prototype._loadSequence = function (callback_) {
	  var self = this;
	  var callback = typeof callback_ === 'function' ? callback_ : function () {};

	  function sequenceLoaded(err, sequence) {
	    if (err || typeof sequence !== 'number') {
	      if (self._remote.trace) {
	        log.info('error requesting account transaction sequence', err);
	        return;
	      }
	    }

	    self._nextSequence = sequence;
	    self.emit('sequence_loaded', sequence);
	    callback(err, sequence);
	  }

	  this._account.getNextSequence(sequenceLoaded);
	};

	/**
	 * On reconnect, load account_tx in case a pending transaction succeeded while
	 * disconnected
	 *
	 * @param [Function] callback
	 * @api private
	 */

	TransactionManager.prototype._handleReconnect = function (callback_) {
	  var self = this;
	  var callback = typeof callback_ === 'function' ? callback_ : function () {};

	  if (!this._pending.length()) {
	    callback();
	    return;
	  }

	  function handleTransactions(err, transactions) {
	    if (err || typeof transactions !== 'object') {
	      if (self._remote.trace) {
	        log.info('error requesting account_tx', err);
	      }
	      callback();
	      return;
	    }

	    if (Array.isArray(transactions.transactions)) {
	      // Treat each transaction in account transaction history as received
	      transactions.transactions.forEach(self._transactionReceived, self);
	    }

	    callback();

	    self._loadSequence(function () {
	      // Resubmit pending transactions after sequence is loaded
	      self._resubmit();
	    });
	  }

	  var options = {
	    account: this._accountID,
	    ledger_index_min: this._pending.getMinLedger(),
	    ledger_index_max: -1,
	    binary: true,
	    parseBinary: true,
	    limit: 20
	  };

	  this._remote.requestAccountTx(options, handleTransactions);
	};

	/**
	 * Wait for specified number of ledgers to pass
	 *
	 * @param {Number} ledgers
	 * @param {Function} callback
	 * @api private
	 */

	TransactionManager.prototype._waitLedgers = function (ledgers, callback) {
	  assert.strictEqual(typeof ledgers, 'number');
	  assert.strictEqual(typeof callback, 'function');

	  if (ledgers < 1) {
	    return callback();
	  }

	  var self = this;
	  var closes = 0;

	  function ledgerClosed() {
	    if (++closes === ledgers) {
	      self._remote.removeListener('ledger_closed', ledgerClosed);
	      callback();
	    }
	  }

	  this._remote.on('ledger_closed', ledgerClosed);
	};

	/**
	 * Resubmit pending transactions. If a transaction is specified, it will be
	 * resubmitted. Otherwise, all pending transactions will be resubmitted
	 *
	 * @param [Number] ledgers to wait before resubmitting
	 * @param [Transaction] pending transactions to resubmit
	 * @api private
	 */

	TransactionManager.prototype._resubmit = function (ledgers_, pending_) {
	  var self = this;

	  var ledgers = ledgers_;
	  var pending = pending_;

	  if (arguments.length === 1) {
	    pending = ledgers;
	    ledgers = 0;
	  }

	  ledgers = ledgers || 0;
	  pending = pending instanceof Transaction ? [pending] : this.getPending().getQueue();

	  function resubmitTransaction(transaction, next) {
	    if (!transaction || transaction.finalized) {
	      // Transaction has been finalized, nothing to do
	      return;
	    }

	    // Find ID within cache of received (validated) transaction IDs
	    var received = transaction.findId(self._pending._idCache);

	    if (received) {
	      switch (received.engine_result) {
	        case 'tesSUCCESS':
	          transaction.emit('success', received);
	          break;
	        default:
	          transaction.emit('error', received);
	      }
	    }

	    if (!transaction.isResubmittable()) {
	      // Rather than resubmit, wait for the transaction to fail due to
	      // LastLedgerSequence's being exceeded. The ultimate error emitted on
	      // transaction is 'tejMaxLedger'; should be definitive
	      return;
	    }

	    while (self._pending.hasSequence(transaction.tx_json.Sequence)) {
	      // Sequence number has been consumed by another transaction
	      transaction.tx_json.Sequence += 1;

	      if (self._remote.trace) {
	        log.info('incrementing sequence:', transaction.tx_json);
	      }
	    }

	    if (self._remote.trace) {
	      log.info('resubmit:', transaction.tx_json);
	    }

	    transaction.once('submitted', function (m) {
	      transaction.emit('resubmitted', m);
	      next();
	    });

	    self._request(transaction);
	  }

	  this._waitLedgers(ledgers, function () {
	    async.eachSeries(pending, resubmitTransaction);
	  });
	};

	/**
	 * Prepare submit request
	 *
	 * @param {Transaction} transaction to submit
	 * @return {Request} submit request
	 * @api private
	 */

	TransactionManager.prototype._prepareRequest = function (tx) {
	  var submitRequest = this._remote.requestSubmit();

	  if (this._remote.local_signing) {
	    tx.sign();

	    var serialized = tx.serialize();
	    submitRequest.txBlob(serialized.to_hex());

	    var hash = tx.hash(null, null, serialized);
	    tx.addId(hash);
	  } else {
	    // ND: `build_path` is completely ignored when doing local signing as
	    // `Paths` is a component of the signed blob, the `tx_blob` is signed,
	    // sealed and delivered, and the txn unmodified.
	    // TODO: perhaps an exception should be raised if build_path is attempted
	    // while local signing
	    submitRequest.buildPath(tx._build_path);
	    submitRequest.secret(tx._secret);
	    submitRequest.txJson(tx.tx_json);
	  }

	  return submitRequest;
	};

	/**
	 * Send `submit` request, handle response
	 *
	 * @param {Transaction} transaction to submit
	 * @api private
	 */

	TransactionManager.prototype._request = function (tx) {
	  var self = this;
	  var remote = this._remote;

	  if (tx.finalized) {
	    return;
	  }

	  if (tx.attempts > this._maxAttempts) {
	    tx.emit('error', new RippleError('tejAttemptsExceeded'));
	    return;
	  }

	  if (tx.attempts > 0 && !remote.local_signing) {
	    var errMessage = 'Automatic resubmission requires local signing';
	    tx.emit('error', new RippleError('tejLocalSigningRequired', errMessage));
	    return;
	  }

	  if (remote.trace) {
	    log.info('submit transaction:', tx.tx_json);
	  }

	  function transactionFailed(message) {
	    if (message.engine_result === 'tefPAST_SEQ') {
	      // Transaction may succeed after Sequence is updated
	      self._resubmit(1, tx);
	    }
	  }

	  function transactionRetry() {
	    // XXX This may no longer be necessary. Instead, update sequence numbers
	    // after a transaction fails definitively
	    self._fillSequence(tx, function () {
	      self._resubmit(1, tx);
	    });
	  }

	  function transactionFailedLocal(message) {
	    if (message.engine_result === 'telINSUF_FEE_P') {
	      // Transaction may succeed after Fee is updated
	      self._resubmit(1, tx);
	    }
	  }

	  function submissionError(error) {
	    // Either a tem-class error or generic server error such as tooBusy. This
	    // should be a definitive failure
	    if (TransactionManager._isTooBusy(error)) {
	      self._waitLedgers(1, function () {
	        tx.once('submitted', function (m) {
	          tx.emit('resubmitted', m);
	        });
	        self._request(tx);
	      });
	    } else {
	      self._nextSequence--;
	      tx.emit('error', error);
	    }
	  }

	  function submitted(message) {
	    if (tx.finalized) {
	      return;
	    }

	    // ND: If for some unknown reason our hash wasn't computed correctly this
	    // is an extra measure.
	    if (message.tx_json && message.tx_json.hash) {
	      tx.addId(message.tx_json.hash);
	    }

	    message.result = message.engine_result || '';

	    tx.result = message;
	    tx.responses += 1;

	    if (remote.trace) {
	      log.info('submit response:', message);
	    }

	    tx.emit('submitted', message);

	    switch (message.result.slice(0, 3)) {
	      case 'tes':
	        tx.emit('proposed', message);
	        break;
	      case 'tec':
	        break;
	      case 'ter':
	        transactionRetry(message);
	        break;
	      case 'tef':
	        transactionFailed(message);
	        break;
	      case 'tel':
	        transactionFailedLocal(message);
	        break;
	      default:
	        // tem
	        submissionError(message);
	    }
	  }

	  function requestTimeout() {
	    // ND: What if the response is just slow and we get a response that
	    // `submitted` above will cause to have concurrent resubmit logic streams?
	    // It's simpler to just mute handlers and look out for finalized
	    // `transaction` messages.
	    if (tx.finalized) {
	      return;
	    }

	    tx.emit('timeout');

	    if (remote.isConnected()) {
	      if (remote.trace) {
	        log.info('timeout:', tx.tx_json);
	      }
	      self._resubmit(1, tx);
	    }
	  }

	  tx.submitIndex = this._remote._ledger_current_index;

	  if (tx.attempts === 0) {
	    tx.initialSubmitIndex = tx.submitIndex;
	  }

	  if (!tx._setLastLedger) {
	    // Honor LastLedgerSequence set with tx.lastLedger()
	    tx.tx_json.LastLedgerSequence = tx.initialSubmitIndex + this._lastLedgerOffset;
	  }

	  tx.lastLedgerSequence = tx.tx_json.LastLedgerSequence;

	  if (remote.local_signing) {
	    tx.sign();
	  }

	  var submitRequest = this._prepareRequest(tx);
	  submitRequest.once('error', submitted);
	  submitRequest.once('success', submitted);

	  tx.emit('presubmit');

	  submitRequest.broadcast().request();
	  tx.attempts++;

	  tx.emit('postsubmit');

	  submitRequest.timeout(self._submissionTimeout, requestTimeout);
	};

	/**
	 * Entry point for TransactionManager submission
	 *
	 * @param {Transaction} tx
	 */

	TransactionManager.prototype.submit = function (tx) {
	  var self = this;

	  if (typeof this._nextSequence !== 'number') {
	    // If sequence number is not yet known, defer until it is.
	    this.once('sequence_loaded', function () {
	      self.submit(tx);
	    });
	    return;
	  }

	  if (tx.finalized) {
	    // Finalized transactions must stop all activity
	    return;
	  }

	  if (typeof tx.tx_json.Sequence !== 'number') {
	    // Honor manually-set sequences
	    tx.tx_json.Sequence = this._nextSequence++;
	  }

	  tx.once('cleanup', function () {
	    self.getPending().remove(tx);
	  });

	  if (!tx.complete()) {
	    this._nextSequence -= 1;
	    return;
	  }

	  // ND: this is the ONLY place we put the tx into the queue. The
	  // TransactionQueue queue is merely a list, so any mutations to tx._hash
	  // will cause subsequent look ups (eg. inside 'transaction-outbound'
	  // validated transaction clearing) to fail.
	  this._pending.push(tx);
	  this._request(tx);
	};

	exports.TransactionManager = TransactionManager;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';

	var _createClass = __webpack_require__(85)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var _Symbol = __webpack_require__(87)['default'];

	var _ = __webpack_require__(51);
	var assert = __webpack_require__(75);
	var ranges = _Symbol();

	function mergeIntervals(intervals) {
	  var stack = [[-Infinity, -Infinity]];
	  _.forEach(_.sortBy(intervals, function (x) {
	    return x[0];
	  }), function (interval) {
	    var lastInterval = stack.pop();
	    if (interval[0] <= lastInterval[1] + 1) {
	      stack.push([lastInterval[0], Math.max(interval[1], lastInterval[1])]);
	    } else {
	      stack.push(lastInterval);
	      stack.push(interval);
	    }
	  });
	  return stack.slice(1);
	}

	var RangeSet = (function () {
	  function RangeSet() {
	    _classCallCheck(this, RangeSet);

	    this.reset();
	  }

	  _createClass(RangeSet, [{
	    key: 'reset',
	    value: function reset() {
	      this[ranges] = [];
	    }
	  }, {
	    key: 'serialize',
	    value: function serialize() {
	      return this[ranges].map(function (range) {
	        return range[0].toString() + '-' + range[1].toString();
	      }).join(',');
	    }
	  }, {
	    key: 'addRange',
	    value: function addRange(start, end) {
	      assert(start <= end, 'invalid range');
	      this[ranges] = mergeIntervals(this[ranges].concat([[start, end]]));
	    }
	  }, {
	    key: 'addValue',
	    value: function addValue(value) {
	      this.addRange(value, value);
	    }
	  }, {
	    key: 'parseAndAddRanges',
	    value: function parseAndAddRanges(rangesString) {
	      var _this = this;

	      var rangeStrings = rangesString.split(',');
	      _.forEach(rangeStrings, function (rangeString) {
	        var range = rangeString.split('-').map(Number);
	        _this.addRange(range[0], range.length === 1 ? range[0] : range[1]);
	      });
	    }
	  }, {
	    key: 'containsRange',
	    value: function containsRange(start, end) {
	      return _.some(this[ranges], function (range) {
	        return range[0] <= start && range[1] >= end;
	      });
	    }
	  }, {
	    key: 'containsValue',
	    value: function containsValue(value) {
	      return this.containsRange(value, value);
	    }
	  }]);

	  return RangeSet;
	})();

	exports.RangeSet = RangeSet;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Type definitions for binary format.
	 *
	 * This file should not be included directly. Instead, find the format you're
	 * trying to parse or serialize in binformat.js and pass that to
	 * SerializedObject.parse() or SerializedObject.serialize().
	 */

	var _Object$keys = __webpack_require__(89)['default'];

	var assert = __webpack_require__(75);
	var extend = __webpack_require__(77);
	var BN = __webpack_require__(93);
	var GlobalBigNumber = __webpack_require__(96);
	var sjclcodec = __webpack_require__(78);
	var Amount = __webpack_require__(5).Amount;
	var Currency = __webpack_require__(8).Currency;
	var binformat = __webpack_require__(17);
	var utils = __webpack_require__(18);

	var UInt128 = __webpack_require__(10).UInt128;
	var UInt160 = __webpack_require__(11).UInt160;
	var UInt256 = __webpack_require__(12).UInt256;
	var Base = __webpack_require__(9).Base;

	var BigNumber = GlobalBigNumber.another({
	  ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
	  DECIMAL_PLACES: 40
	});

	function SerializedType(methods) {
	  extend(this, methods);
	}

	function isNumber(val) {
	  return typeof val === 'number' && isFinite(val);
	}

	function isString(val) {
	  return typeof val === 'string';
	}

	function isHexInt64String(val) {
	  return isString(val) && /^[0-9A-F]{0,16}$/i.test(val);
	}

	function serializeBytes(so, byteData, noLength) {
	  if (!noLength) {
	    SerializedType.serialize_varint(so, byteData.length);
	  }
	  so.append(byteData);
	}

	function serializeHex(so, hexData, noLength) {
	  serializeBytes(so, utils.hexToArray(hexData), noLength);
	}

	function convertHexToString(hexString) {
	  var bits = sjclcodec.hex.toBits(hexString);
	  return sjclcodec.utf8String.fromBits(bits);
	}

	function sort_fields(keys) {
	  function sort_field_compare(a, b) {
	    var a_field_coordinates = binformat.fieldsInverseMap[a];
	    var a_type_bits = a_field_coordinates[0];
	    var a_field_bits = a_field_coordinates[1];
	    var b_field_coordinates = binformat.fieldsInverseMap[b];
	    var b_type_bits = b_field_coordinates[0];
	    var b_field_bits = b_field_coordinates[1];

	    // Sort by type id first, then by field id
	    return a_type_bits !== b_type_bits ? a_type_bits - b_type_bits : a_field_bits - b_field_bits;
	  }

	  return keys.sort(sort_field_compare);
	}

	SerializedType.serialize_varint = function (so, val) {
	  var value = val;
	  if (value < 0) {
	    throw new Error('Variable integers are unsigned.');
	  }

	  if (value <= 192) {
	    so.append([value]);
	  } else if (value <= 12480) {
	    value -= 193;
	    so.append([193 + (value >>> 8), value & 0xff]);
	  } else if (value <= 918744) {
	    value -= 12481;
	    so.append([241 + (value >>> 16), value >>> 8 & 0xff, value & 0xff]);
	  } else {
	    throw new Error('Variable integer overflow.');
	  }
	};

	SerializedType.prototype.parse_varint = function (so) {
	  var b1 = so.read(1)[0];
	  var b2 = undefined,
	      b3 = undefined;
	  var result = undefined;

	  if (b1 > 254) {
	    throw new Error('Invalid varint length indicator');
	  }

	  if (b1 <= 192) {
	    result = b1;
	  } else if (b1 <= 240) {
	    b2 = so.read(1)[0];
	    result = 193 + (b1 - 193) * 256 + b2;
	  } else if (b1 <= 254) {
	    b2 = so.read(1)[0];
	    b3 = so.read(1)[0];
	    result = 12481 + (b1 - 241) * 65536 + b2 * 256 + b3;
	  }

	  return result;
	};

	// In the following, we assume that the inputs are in the proper range. Is this
	// correct?
	// Helper functions for 1-, 2-, and 4-byte integers.

	/**
	 * Convert an integer value into an array of bytes.
	 *
	 * The result is appended to the serialized object ('so').
	 *
	 * @param {Number} val value
	 * @param {Number} bytes byte size
	 * @return {Array} byte array
	 */
	function convertIntegerToByteArray(val, bytes) {
	  if (!isNumber(val)) {
	    throw new Error('Value is not a number', bytes);
	  }

	  if (val < 0 || val >= Math.pow(256, bytes)) {
	    throw new Error('Value out of bounds ');
	  }

	  var newBytes = [];

	  for (var i = 0; i < bytes; i++) {
	    newBytes.unshift(val >>> i * 8 & 0xff);
	  }

	  return newBytes;
	}

	// Convert a certain number of bytes from the serialized object ('so') into an
	// integer.
	function readAndSum(so, bytes) {
	  var sum = 0;

	  if (bytes > 4) {
	    throw new Error('This function only supports up to four bytes.');
	  }

	  for (var i = 0; i < bytes; i++) {
	    var byte = so.read(1)[0];
	    sum += byte << 8 * (bytes - i - 1);
	  }

	  // Convert to unsigned integer
	  return sum >>> 0;
	}

	var STInt8 = exports.Int8 = new SerializedType({
	  serialize: function serialize(so, val) {
	    so.append(convertIntegerToByteArray(val, 1));
	  },
	  parse: function parse(so) {
	    return readAndSum(so, 1);
	  }
	});

	STInt8.id = 16;

	function _serialize(so, field_name, value) {
	  // so: a byte-stream to serialize into.
	  // field_name: a string for the field name ('LedgerEntryType' etc.)
	  // value: the value of that field.
	  var field_coordinates = binformat.fieldsInverseMap[field_name];
	  var type_bits = field_coordinates[0];
	  var field_bits = field_coordinates[1];
	  var tag_byte = (type_bits < 16 ? type_bits << 4 : 0) | (field_bits < 16 ? field_bits : 0);
	  var val = value;

	  if (field_name === 'LedgerEntryType' && typeof val === 'string') {
	    val = binformat.ledger[val][0];
	  }

	  if (field_name === 'TransactionResult' && typeof val === 'string') {
	    val = binformat.ter[val];
	  }

	  STInt8.serialize(so, tag_byte);

	  if (type_bits >= 16) {
	    STInt8.serialize(so, type_bits);
	  }

	  if (field_bits >= 16) {
	    STInt8.serialize(so, field_bits);
	  }

	  // Get the serializer class (ST...)
	  var serialized_object_type = undefined;

	  if (field_name === 'Memo' && typeof val === 'object') {
	    // for Memo we override the default behavior with our STMemo serializer
	    serialized_object_type = exports.STMemo;
	  } else {
	    // for a field based on the type bits.
	    serialized_object_type = exports[binformat.types[type_bits]];
	  }

	  try {
	    serialized_object_type.serialize(so, val);
	  } catch (e) {
	    e.message += ' (' + field_name + ')';
	    throw e;
	  }
	}

	exports.serialize = exports.serialize_whatever = _serialize;

	// Take the serialized object, figure out what type/field it is, and return the
	// parsing of that.

	function _parse(so) {
	  var tag_byte = so.read(1)[0];
	  var type_bits = tag_byte >> 4;

	  if (type_bits === 0) {
	    type_bits = so.read(1)[0];
	  }

	  var field_bits = tag_byte & 0x0f;
	  var field_name = field_bits === 0 ? binformat.fields[type_bits][so.read(1)[0]] : binformat.fields[type_bits][field_bits];

	  assert(field_name, 'Unknown field - header byte is 0x' + tag_byte.toString(16));

	  // Get the parser class (ST...) for a field based on the type bits.
	  var type = field_name === 'Memo' ? exports.STMemo : exports[binformat.types[type_bits]];

	  assert(type, 'Unknown type - header byte is 0x' + tag_byte.toString(16));

	  return [field_name, type.parse(so)]; // key, value
	}

	exports.parse = exports.parse_whatever = _parse;

	var STInt16 = exports.Int16 = new SerializedType({
	  serialize: function serialize(so, val) {
	    so.append(convertIntegerToByteArray(val, 2));
	  },
	  parse: function parse(so) {
	    return readAndSum(so, 2);
	  }
	});

	STInt16.id = 1;

	var STInt32 = exports.Int32 = new SerializedType({
	  serialize: function serialize(so, val) {
	    so.append(convertIntegerToByteArray(val, 4));
	  },
	  parse: function parse(so) {
	    return readAndSum(so, 4);
	  }
	});

	STInt32.id = 2;

	var STInt64 = exports.Int64 = new SerializedType({
	  serialize: function serialize(so, val) {
	    var bigNumObject = undefined;
	    var value = val;

	    if (isNumber(value)) {
	      value = Math.floor(value);
	      if (value < 0) {
	        throw new Error('Negative value for unsigned Int64 is invalid.');
	      }
	      bigNumObject = new BN(value, 10);
	    } else if (isString(value)) {
	      if (!isHexInt64String(value)) {
	        throw new Error('Not a valid hex Int64.');
	      }
	      bigNumObject = new BN(value, 16);
	    } else if (value instanceof BN) {
	      if (value.cmpn(0) < 0) {
	        throw new Error('Negative value for unsigned Int64 is invalid.');
	      }
	      bigNumObject = value;
	    } else {
	      throw new Error('Invalid type for Int64: ' + typeof value + ' value');
	    }
	    // `'be'` means big endian, and the following arg is the byte length, which
	    // it will pad with 0s to if not enough bytes, or throw if over
	    serializeBytes(so, bigNumObject.toArray('be', 8), /* noLength= */true);
	  },
	  parse: function parse(so) {
	    var bytes = so.read(8);
	    return new BN(bytes);
	  }
	});

	STInt64.id = 3;

	var STHash128 = exports.Hash128 = new SerializedType({
	  serialize: function serialize(so, val) {
	    var hash = UInt128.from_json(val);
	    if (!hash.is_valid()) {
	      throw new Error('Invalid Hash128');
	    }
	    serializeBytes(so, hash.to_bytes(), true); // noLength = true
	  },
	  parse: function parse(so) {
	    return UInt128.from_bytes(so.read(16));
	  }
	});

	STHash128.id = 4;

	var STHash256 = exports.Hash256 = new SerializedType({
	  serialize: function serialize(so, val) {
	    var hash = UInt256.from_json(val);
	    if (!hash.is_valid()) {
	      throw new Error('Invalid Hash256');
	    }
	    serializeBytes(so, hash.to_bytes(), true); // noLength = true
	  },
	  parse: function parse(so) {
	    return UInt256.from_bytes(so.read(32));
	  }
	});

	STHash256.id = 5;

	var STHash160 = exports.Hash160 = new SerializedType({
	  serialize: function serialize(so, val) {
	    var hash = UInt160.from_json(val);
	    if (!hash.is_valid()) {
	      throw new Error('Invalid Hash160');
	    }
	    serializeBytes(so, hash.to_bytes(), true); // noLength = true
	  },
	  parse: function parse(so) {
	    return UInt160.from_bytes(so.read(20));
	  }
	});

	STHash160.id = 17;

	// Internal
	var STCurrency = new SerializedType({
	  serialize: function serialize(so, val) {
	    var currencyData = val.to_bytes();

	    if (!currencyData) {
	      throw new Error('Tried to serialize invalid/unimplemented currency type.');
	    }

	    so.append(currencyData);
	  },
	  parse: function parse(so) {
	    var bytes = so.read(20);
	    var currency = Currency.from_bytes(bytes);
	    // XXX Disabled check. Theoretically, the Currency class should support any
	    //     UInt160 value and consider it valid. But it doesn't, so for the
	    //     deserialization to be usable, we need to allow invalid results for
	    //     now.
	    // if (!currency.is_valid()) {
	    //   throw new Error('Invalid currency: '+convertByteArrayToHex(bytes));
	    // }
	    return currency;
	  }
	});

	/**
	 * Quality is encoded into 64 bits:
	 * (8 bits offset) (56 bits mantissa)
	 *
	 * Quality differs from Amount because it does not need the first two bits
	 * to represent non-native and non-negative
	 */
	exports.Quality = new SerializedType({
	  serialize: function serialize(so, val) {
	    var value = undefined;
	    // if in format: amount/currency/issuer
	    if (val.includes('/')) {
	      var amount = Amount.from_json(val);

	      if (!amount.is_valid()) {
	        throw new Error('Not a valid Amount object.');
	      }
	      value = new BigNumber(amount.to_text());
	    } else {
	      value = new BigNumber(val);
	    }

	    var hi = 0,
	        lo = 0;

	    var offset = value.e - 15;
	    if (val !== 0) {
	      // First eight bits: offset/exponent
	      hi |= (100 + offset & 0xff) << 24;

	      // Remaining 56 bits: mantissa
	      var mantissaDecimal = utils.getMantissaDecimalString(value.abs());
	      var mantissaHex = new BigNumber(mantissaDecimal).toString(16);
	      assert(mantissaHex.length <= 16, 'Mantissa hex representation ' + mantissaHex + ' exceeds the maximum length of 16');
	      hi |= parseInt(mantissaHex.slice(0, -8), 16) & 0xffffff;
	      lo = parseInt(mantissaHex.slice(-8), 16);
	    }

	    var valueBytes = sjclcodec.bytes.fromBits([hi, lo]);

	    so.append(valueBytes);
	  }
	});

	/*
	 * Amount is encoded into 64 bits:
	 * (1 bit non-native) (1 bit non-negative) (8 bits offset) (54 bits mantissa)
	 */
	var STAmount = exports.Amount = new SerializedType({
	  serialize: function serialize(so, val) {
	    var amount = Amount.from_json(val);

	    if (!amount.is_valid()) {
	      throw new Error('Not a valid Amount object.');
	    }

	    var value = new BigNumber(amount.to_text());
	    var offset = value.e - 15;

	    // Amount (64-bit integer)
	    var valueBytes = utils.arraySet(8, 0);

	    if (amount.is_native()) {
	      var valueHex = value.abs().toString(16);

	      if (Amount.strict_mode && value.abs().greaterThan(Amount.bi_xns_max)) {
	        throw new Error('Value out of bounds');
	      }

	      // Enforce correct length (64 bits)
	      if (Amount.strict_mode && valueHex.length > 16) {
	        throw new Error('Value out of bounds');
	      }

	      while (valueHex.length < 16) {
	        valueHex = '0' + valueHex;
	      }

	      valueBytes = sjclcodec.bytes.fromBits(sjclcodec.hex.toBits(valueHex));
	      // Clear most significant two bits - these bits should already be 0 if
	      // Amount enforces the range correctly, but we'll clear them anyway just
	      // so this code can make certain guarantees about the encoded value.
	      valueBytes[0] &= 0x3f;

	      if (!amount.is_negative()) {
	        valueBytes[0] |= 0x40;
	      }
	    } else {
	      var hi = 0,
	          lo = 0;

	      // First bit: non-native
	      hi |= 1 << 31;

	      if (!amount.is_zero()) {
	        // Second bit: non-negative?
	        if (!amount.is_negative()) {
	          hi |= 1 << 30;
	        }

	        // Next eight bits: offset/exponent
	        hi |= (97 + offset & 0xff) << 22;

	        // Remaining 54 bits: mantissa
	        var mantissaDecimal = utils.getMantissaDecimalString(value.abs());
	        var mantissaHex = new BigNumber(mantissaDecimal).toString(16);
	        assert(mantissaHex.length <= 16, 'Mantissa hex representation ' + mantissaHex + ' exceeds the maximum length of 16');
	        hi |= parseInt(mantissaHex.slice(0, -8), 16) & 0x3fffff;
	        lo = parseInt(mantissaHex.slice(-8), 16);
	      }

	      valueBytes = sjclcodec.bytes.fromBits([hi, lo]);
	    }

	    so.append(valueBytes);

	    if (!amount.is_native()) {
	      // Currency (160-bit hash)
	      var currency = amount.currency();
	      STCurrency.serialize(so, currency, true);

	      // Issuer (160-bit hash)
	      so.append(amount.issuer().to_bytes());
	    }
	  },
	  parse: function parse(so) {
	    var value_bytes = so.read(8);
	    var is_zero = !(value_bytes[0] & 0x7f);

	    for (var i = 1; i < 8; i++) {
	      is_zero = is_zero && !value_bytes[i];
	    }

	    var is_negative = !is_zero && !(value_bytes[0] & 0x40);

	    if (value_bytes[0] & 0x80) {
	      // non-native
	      var currency = STCurrency.parse(so);
	      var issuer_bytes = so.read(20);
	      var issuer = UInt160.from_bytes(issuer_bytes);
	      issuer.set_version(Base.VER_ACCOUNT_ID);
	      var offset = ((value_bytes[0] & 0x3f) << 2) + (value_bytes[1] >>> 6) - 97;
	      var mantissa_bytes = value_bytes.slice(1);
	      mantissa_bytes[0] &= 0x3f;
	      var mantissa = new BigNumber(utils.arrayToHex(mantissa_bytes), 16);
	      var sign = is_negative ? '-' : '';
	      var valueString = sign + mantissa.toString() + 'e' + offset.toString();

	      return Amount.from_json({
	        currency: currency,
	        issuer: issuer.to_json(),
	        value: valueString
	      });
	    }

	    // native
	    var integer_bytes = value_bytes.slice();
	    integer_bytes[0] &= 0x3f;
	    var integer_hex = utils.arrayToHex(integer_bytes);
	    var value = new BigNumber(integer_hex, 16);
	    return Amount.from_json((is_negative ? '-' : '') + value.toString());
	  }
	});

	STAmount.id = 6;

	var STVL = exports.VariableLength = exports.VL = new SerializedType({
	  serialize: function serialize(so, val) {
	    if (typeof val === 'string') {
	      serializeHex(so, val);
	    } else {
	      throw new Error('Unknown datatype.');
	    }
	  },
	  parse: function parse(so) {
	    var len = this.parse_varint(so);
	    return utils.arrayToHex(so.read(len));
	  }
	});

	STVL.id = 7;

	var STAccount = exports.Account = new SerializedType({
	  serialize: function serialize(so, val) {
	    var account = UInt160.from_json(val);
	    if (!account.is_valid()) {
	      throw new Error('Invalid account!');
	    }
	    serializeBytes(so, account.to_bytes());
	  },
	  parse: function parse(so) {
	    var len = this.parse_varint(so);

	    if (len !== 20) {
	      throw new Error('Non-standard-length account ID');
	    }

	    var result = UInt160.from_bytes(so.read(len));
	    result.set_version(Base.VER_ACCOUNT_ID);

	    if (false) {
	      throw new Error('Invalid Account');
	    }

	    return result;
	  }
	});

	STAccount.id = 8;

	var STPathSet = exports.PathSet = new SerializedType({
	  typeBoundary: 0xff,
	  typeEnd: 0x00,
	  typeAccount: 0x01,
	  typeCurrency: 0x10,
	  typeIssuer: 0x20,
	  serialize: function serialize(so, val) {
	    for (var i = 0, l = val.length; i < l; i++) {
	      // Boundary
	      if (i) {
	        STInt8.serialize(so, this.typeBoundary);
	      }

	      for (var j = 0, l2 = val[i].length; j < l2; j++) {
	        var entry = val[i][j];
	        // if (entry.hasOwnProperty('_value')) {entry = entry._value;}
	        var type = 0;

	        if (entry.account) {
	          type |= this.typeAccount;
	        }
	        if (entry.currency) {
	          type |= this.typeCurrency;
	        }
	        if (entry.issuer) {
	          type |= this.typeIssuer;
	        }

	        STInt8.serialize(so, type);

	        if (entry.account) {
	          STHash160.serialize(so, entry.account);
	        }

	        if (entry.currency) {
	          var currency = Currency.from_json(entry.currency, entry.non_native);
	          STCurrency.serialize(so, currency);
	        }

	        if (entry.issuer) {
	          STHash160.serialize(so, entry.issuer);
	        }
	      }
	    }

	    STInt8.serialize(so, this.typeEnd);
	  },
	  parse: function parse(so) {
	    // should return a list of lists:
	    /*
	       [
	       [entry, entry],
	       [entry, entry, entry],
	       [entry],
	       []
	       ]
	        each entry has one or more of the following attributes:
	       amount, currency, issuer.
	       */

	    var path_list = [];
	    var current_path = [];
	    var tag_byte = undefined;

	    /* eslint-disable no-cond-assign */

	    while ((tag_byte = so.read(1)[0]) !== this.typeEnd) {
	      // TODO: try/catch this loop, and catch when we run out of data without
	      // reaching the end of the data structure.
	      // Now determine: is this an end, boundary, or entry-begin-tag?
	      // console.log('Tag byte:', tag_byte);
	      if (tag_byte === this.typeBoundary) {
	        if (current_path) {
	          // close the current path, if there is one,
	          path_list.push(current_path);
	        }
	        current_path = []; // and start a new one.
	        continue;
	      }

	      // It's an entry-begin tag.
	      var entry = {};
	      var type = 0;

	      if (tag_byte & this.typeAccount) {
	        entry.account = STHash160.parse(so);
	        entry.account.set_version(Base.VER_ACCOUNT_ID);
	        type = type | this.typeAccount;
	      }
	      if (tag_byte & this.typeCurrency) {
	        entry.currency = STCurrency.parse(so);
	        if (entry.currency.to_json() === 'XRP' && !entry.currency.is_native()) {
	          entry.non_native = true;
	        }
	        type = type | this.typeCurrency;
	      }
	      if (tag_byte & this.typeIssuer) {
	        entry.issuer = STHash160.parse(so);
	        // Enable and set correct type of base-58 encoding
	        entry.issuer.set_version(Base.VER_ACCOUNT_ID);
	        type = type | this.typeIssuer;
	      }

	      if (entry.account || entry.currency || entry.issuer) {
	        entry.type = type;
	        entry.type_hex = ('000000000000000' + type.toString(16)).slice(-16);
	        current_path.push(entry);
	      } else {
	        // It must have at least something in it.
	        throw new Error('Invalid path entry');
	      }
	    }

	    if (current_path) {
	      // close the current path, if there is one,
	      path_list.push(current_path);
	    }

	    return path_list;
	  }
	});

	STPathSet.id = 18;

	var STVector256 = exports.Vector256 = new SerializedType({
	  serialize: function serialize(so, val) {
	    // Assume val is an array of STHash256 objects.
	    SerializedType.serialize_varint(so, val.length * 32);
	    for (var i = 0, l = val.length; i < l; i++) {
	      STHash256.serialize(so, val[i]);
	    }
	  },
	  parse: function parse(so) {
	    var length = this.parse_varint(so);
	    var output = [];
	    // length is number of bytes not number of Hash256
	    for (var i = 0; i < length / 32; i++) {
	      output.push(STHash256.parse(so));
	    }
	    return output;
	  }
	});

	STVector256.id = 19;

	// Internal
	exports.STMemo = new SerializedType({
	  serialize: function serialize(so, val, no_marker) {
	    var keys = [];

	    _Object$keys(val).forEach(function (key) {
	      // Ignore lowercase field names - they're non-serializable fields by
	      // convention.
	      if (key[0] === key[0].toLowerCase()) {
	        return;
	      }

	      if (typeof binformat.fieldsInverseMap[key] === 'undefined') {
	        throw new Error('JSON contains unknown field: "' + key + '"');
	      }

	      keys.push(key);
	    });

	    // Sort fields
	    keys = sort_fields(keys);

	    keys.forEach(function (key) {
	      _serialize(so, key, val[key]);
	    });

	    if (!no_marker) {
	      // Object ending marker
	      STInt8.serialize(so, 0xe1);
	    }
	  },
	  parse: function parse(so) {
	    var output = {};

	    while (so.peek(1)[0] !== 0xe1) {
	      var keyval = _parse(so);
	      output[keyval[0]] = keyval[1];
	    }

	    if (output.MemoType !== undefined) {
	      try {
	        var parsedType = convertHexToString(output.MemoType);

	        if (parsedType !== 'unformatted_memo') {
	          output.parsed_memo_type = parsedType;
	        }
	        /* eslint-disable no-empty */
	      } catch (e) {}
	      // empty
	      // we don't know what's in the binary, apparently it's not a UTF-8
	      // string
	      // this is fine, we won't add the parsed_memo_type field

	      /* eslint-enable no-empty */
	    }

	    if (output.MemoFormat !== undefined) {
	      try {
	        output.parsed_memo_format = convertHexToString(output.MemoFormat);
	        /* eslint-disable no-empty */
	      } catch (e) {}
	      // empty
	      // we don't know what's in the binary, apparently it's not a UTF-8
	      // string
	      // this is fine, we won't add the parsed_memo_format field

	      /* eslint-enable no-empty */
	    }

	    if (output.MemoData !== undefined) {

	      try {
	        if (output.parsed_memo_format === 'json') {
	          // see if we can parse JSON
	          output.parsed_memo_data = JSON.parse(convertHexToString(output.MemoData));
	        } else if (output.parsed_memo_format === 'text') {
	          // otherwise see if we can parse text
	          output.parsed_memo_data = convertHexToString(output.MemoData);
	        }
	        /* eslint-disable no-empty */
	      } catch (e) {}
	      // empty
	      // we'll fail in case the content does not match what the MemoFormat
	      // described
	      // this is fine, we won't add the parsed_memo_data, the user has to
	      // parse themselves

	      /* eslint-enable no-empty */
	    }

	    so.read(1);
	    return output;
	  }

	});

	var STObject = exports.Object = new SerializedType({
	  serialize: function serialize(so, val, no_marker) {
	    var keys = [];

	    _Object$keys(val).forEach(function (key) {
	      // Ignore lowercase field names - they're non-serializable fields by
	      // convention.
	      if (key[0] === key[0].toLowerCase()) {
	        return;
	      }

	      if (typeof binformat.fieldsInverseMap[key] === 'undefined') {
	        throw new Error('JSON contains unknown field: "' + key + '"');
	      }

	      keys.push(key);
	    });

	    // Sort fields
	    keys = sort_fields(keys);

	    for (var i = 0; i < keys.length; i++) {
	      _serialize(so, keys[i], val[keys[i]]);
	    }

	    if (!no_marker) {
	      // Object ending marker
	      STInt8.serialize(so, 0xe1);
	    }
	  },

	  parse: function parse(so) {
	    var output = {};
	    while (so.peek(1)[0] !== 0xe1) {
	      var keyval = _parse(so);
	      output[keyval[0]] = keyval[1];
	    }
	    so.read(1);
	    return output;
	  }
	});

	STObject.id = 14;

	var STArray = exports.Array = new SerializedType({
	  serialize: function serialize(so, val) {
	    for (var i = 0, l = val.length; i < l; i++) {
	      var keys = _Object$keys(val[i]);

	      if (keys.length !== 1) {
	        throw new Error('Cannot serialize an array containing non-single-key objects');
	      }

	      var field_name = keys[0];
	      var value = val[i][field_name];
	      _serialize(so, field_name, value);
	    }

	    // Array ending marker
	    STInt8.serialize(so, 0xf1);
	  },

	  parse: function parse(so) {
	    var output = [];

	    while (so.peek(1)[0] !== 0xf1) {
	      var keyval = _parse(so);
	      var obj = {};
	      obj[keyval[0]] = keyval[1];
	      output.push(obj);
	    }

	    so.read(1);

	    return output;
	  }
	});

	STArray.id = 15;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$keys = __webpack_require__(89)['default'];

	var _ = __webpack_require__(51);
	var log = __webpack_require__(23);

	function wrapRemote(Remote) {

	  /**
	   *  Create options object from positional function arguments
	   *
	   * @param {Array} params function parameters
	   * @param {Array} args function arguments
	   * @return {Object} keyed options
	   */

	  function makeOptions(command, params, args) {
	    var result = {};

	    log.warn('DEPRECATED: First argument to ' + command + ' request constructor must be an object containing' + ' request properties: ' + params.join(', '));

	    if (_.isFunction(_.last(args))) {
	      result.callback = args.pop();
	    }

	    return _.merge(result, _.zipObject(params, args));
	  }

	  function shiftFront(list, e) {
	    var ix = 0;
	    while (list[0] === e) {
	      list.shift();
	      ix++;
	    }
	    return ix;
	  }

	  function addBackwardsCompatibility(compatParams) {
	    var method = compatParams.method;
	    var command = compatParams.command;
	    var _compatParams$staticMethod = compatParams.staticMethod;
	    var staticMethod = _compatParams$staticMethod === undefined ? false : _compatParams$staticMethod;
	    var _compatParams$positionals = compatParams.positionals;
	    var positionals = _compatParams$positionals === undefined ? [] : _compatParams$positionals;
	    var _compatParams$mappings = compatParams.mappings;
	    var mappings = _compatParams$mappings === undefined ? {} : _compatParams$mappings;
	    var _compatParams$hasCallback = compatParams.hasCallback;
	    var hasCallback = _compatParams$hasCallback === undefined ? true : _compatParams$hasCallback;
	    var _compatParams$aliases = compatParams.aliases;
	    var aliases = _compatParams$aliases === undefined ? [] : _compatParams$aliases;

	    var positionalsStartIx = shiftFront(positionals, '*');
	    var needsWrapping = positionals.length || _Object$keys(mappings).length;

	    function wrapFunction(func) {
	      return function () {
	        var optionsArg = arguments[positionalsStartIx];
	        var options = {};

	        if (hasCallback) {
	          options.callback = arguments[positionalsStartIx + 1];
	        }

	        if (_.isPlainObject(optionsArg)) {
	          var mapped = _.transform(optionsArg, function (result, v, k) {
	            var to = mappings[k];
	            result[to !== undefined ? to : k] = v;
	          });
	          _.merge(options, mapped);
	        } else {
	          // This hack handles accountRequest type helper helpers
	          var commandName = positionalsStartIx ? arguments[0] : command;
	          var _args = _.slice(arguments, positionalsStartIx);
	          var positionalOptions = makeOptions(commandName, positionals, _args);
	          _.merge(options, positionalOptions);
	        }
	        // Only some `positionals` get remapped to options
	        var alwaysPositional = _.slice(arguments, 0, positionalsStartIx);
	        var args = alwaysPositional.concat([options, options.callback]);
	        return func.apply(this, args);
	      };
	    }

	    var obj = staticMethod ? Remote : Remote.prototype;
	    // Wrap the function and set the aliases
	    var wrapped = needsWrapping ? wrapFunction(obj[method]) : obj[method];
	    aliases.concat(method).forEach(function (name) {
	      obj[name] = wrapped;
	    });
	  }

	  var remoteMethods = [{
	    method: 'requestPathFindCreate',
	    command: 'path_find',
	    positionals: ['source_account', 'destination_account', 'destination_amount', 'source_currencies'],
	    mappings: {
	      src_currencies: 'source_currencies',
	      src_account: 'source_account',
	      dst_amount: 'destination_amount',
	      dst_account: 'destination_account'
	    }
	  }, {
	    method: 'requestRipplePathFind',
	    command: 'ripple_path_find',
	    positionals: ['source_account', 'destination_account', 'destination_amount', 'source_currencies'],
	    mappings: {
	      src_currencies: 'source_currencies',
	      src_account: 'source_account',
	      dst_amount: 'destination_amount',
	      dst_account: 'destination_account'
	    }
	  }, {
	    method: 'createPathFind',
	    aliases: ['pathFind'],
	    command: 'pathfind',
	    positionals: ['src_account', 'dst_account', 'dst_amount', 'src_currencies']
	  }, {
	    method: 'requestTransactionEntry',
	    command: 'transaction_entry',
	    positionals: ['hash', 'ledger'],
	    mappings: { ledger_index: 'ledger', ledger_hash: 'ledger' }
	  }, {
	    method: 'requestTransaction',
	    command: 'tx',
	    positionals: ['hash', 'ledger'],
	    mappings: { ledger_index: 'ledger', ledger_hash: 'ledger' },
	    aliases: ['requestTx']
	  }, {
	    method: 'requestBookOffers',
	    command: 'book_offers',
	    positionals: ['gets', 'pays', 'taker', 'ledger', 'limit'],
	    mappings: { taker_pays: 'pays', taker_gets: 'gets' }
	  }, {
	    method: 'createOrderBook',
	    hasCallback: false,
	    command: 'orderbook',
	    positionals: ['currency_gets', 'issuer_gets', 'currency_pays', 'issuer_pays']
	  }, {
	    method: 'requestTransactionHistory',
	    command: 'tx_history',
	    positionals: ['start'],
	    aliases: ['requestTxHistory']
	  }, {
	    method: 'requestWalletAccounts',
	    command: 'wallet_accounts',
	    positionals: ['seed']
	  }, {
	    method: 'requestSign',
	    command: 'sign',
	    positionals: ['secret', 'tx_json']
	  }, {
	    method: 'accountSeqCache',
	    command: 'accountseqcache',
	    positionals: ['account', 'ledger']
	  }, {
	    method: 'requestRippleBalance',
	    command: 'ripplebalance',
	    positionals: ['account', 'issuer', 'currency', 'ledger']
	  }, {
	    staticMethod: true,
	    method: 'accountRequest',
	    command: 'accountrequest(*)',
	    positionals: ['*', 'account', 'ledger', 'peer', 'limit', 'marker']
	  }, {
	    staticMethod: true,
	    method: 'accountRootRequest',
	    command: 'accountRootRequest(*)',
	    positionals: ['*', '*', 'account', 'ledger']
	  }];

	  remoteMethods.forEach(addBackwardsCompatibility);
	}

	module.exports = function wrapAPI(index) {
	  wrapRemote(index.Remote);
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	

	// If a ledger is not received in this time, consider the connection offline

	'use strict';

	var _Promise = __webpack_require__(88)['default'];

	var _ = __webpack_require__(51);
	var common = __webpack_require__(50);
	var CONNECTION_TIMEOUT = 1000 * 30;

	function isUpToDate(remote) {
	  var server = remote.getServer();
	  return Boolean(server) && (remote._stand_alone || Date.now() - server._lastLedgerClose <= CONNECTION_TIMEOUT);
	}

	function isConnected() {
	  return Boolean(this.remote._ledger_current_index) && isUpToDate(this.remote);
	}

	function getServerInfoAsync(callback) {
	  this.remote.requestServerInfo(function (error, response) {
	    if (error) {
	      var message = _.get(error, ['remote', 'error_message'], error.message);
	      callback(new common.errors.RippledNetworkError(message));
	    } else {
	      callback(null, common.convertKeysFromSnakeCaseToCamelCase(response.info));
	    }
	  });
	}

	function getFee() {
	  return common.dropsToXrp(this.remote.createTransaction()._computeFee());
	}

	function getLedgerVersion() {
	  return this.remote.getLedgerSequence();
	}

	function connect() {
	  var _this = this;

	  return common.promisify(function (callback) {
	    _this.remote.connect(function () {
	      return callback(null);
	    });
	  })();
	}

	function disconnect() {
	  var _this2 = this;

	  return common.promisify(function (callback) {
	    _this2.remote.disconnect(function () {
	      return callback(null);
	    });
	  })();
	}

	function getServerInfo() {
	  return common.promisify(getServerInfoAsync.bind(this))();
	}

	module.exports = {
	  connect: connect,
	  disconnect: disconnect,
	  isConnected: isConnected,
	  getServerInfo: getServerInfo,
	  getFee: getFee,
	  getLedgerVersion: getLedgerVersion
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';

	var _Promise = __webpack_require__(88)['default'];

	var _ = __webpack_require__(51);
	var async = __webpack_require__(91);
	var utils = __webpack_require__(48);
	var parseTransaction = __webpack_require__(62);
	var validate = utils.common.validate;
	var errors = utils.common.errors;
	var convertErrors = utils.common.convertErrors;
	var RippleError = __webpack_require__(16).RippleError;

	function attachTransactionDate(remote, tx, callback) {
	  if (tx.date) {
	    callback(null, tx);
	    return;
	  }
	  if (!tx.ledger_index) {
	    callback(new errors.NotFoundError('ledger_index not found in tx'));
	    return;
	  }

	  remote.requestLedger(tx.ledger_index, function (error, data) {
	    if (error) {
	      callback(new errors.NotFoundError('Transaction ledger not found'));
	    } else if (typeof data.ledger.close_time === 'number') {
	      callback(null, _.assign({ date: data.ledger.close_time }, tx));
	    } else {
	      callback(new errors.ApiError('Ledger missing close_time'));
	    }
	  });
	}

	function isTransactionInRange(tx, options) {
	  return (!options.minLedgerVersion || tx.ledger_index >= options.minLedgerVersion) && (!options.maxLedgerVersion || tx.ledger_index <= options.maxLedgerVersion);
	}

	function getTransactionAsync(identifier, options, callback) {
	  validate.identifier(identifier);
	  validate.getTransactionOptions(options);

	  var remote = this.remote;
	  var maxLedgerVersion = Math.min(options.maxLedgerVersion || Infinity, remote.getLedgerSequence());

	  function callbackWrapper(error_, tx) {
	    var error = error_;
	    if (error instanceof RippleError && error.remote && error.remote.error === 'txnNotFound') {
	      error = new errors.NotFoundError('Transaction not found');
	    }

	    if (error instanceof errors.NotFoundError && !utils.hasCompleteLedgerRange(remote, options.minLedgerVersion, maxLedgerVersion)) {
	      callback(new errors.MissingLedgerHistoryError('Transaction not found,' + ' but the server\'s ledger history is incomplete'));
	    } else if (!error && tx && !isTransactionInRange(tx, options)) {
	      callback(new errors.NotFoundError('Transaction not found'));
	    } else if (error) {
	      convertErrors(callback)(error);
	    } else if (!tx) {
	      callback(new errors.ApiError('Internal error'));
	    } else {
	      callback(error, parseTransaction(tx));
	    }
	  }

	  async.waterfall([_.partial(remote.requestTx.bind(remote), { hash: identifier, binary: false }), _.partial(attachTransactionDate, remote)], callbackWrapper);
	}

	function getTransaction(identifier) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return utils.promisify(getTransactionAsync).call(this, identifier, options);
	}

	module.exports = getTransaction;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	
	/* eslint-disable max-params */
	'use strict';
	var _ = __webpack_require__(51);
	var utils = __webpack_require__(48);
	var parseTransaction = __webpack_require__(62);
	var getTransaction = __webpack_require__(30);
	var validate = utils.common.validate;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;

	function parseAccountTxTransaction(tx) {
	  // rippled uses a different response format for 'account_tx' than 'tx'
	  tx.tx.meta = tx.meta;
	  tx.tx.validated = tx.validated;
	  return parseTransaction(tx.tx);
	}

	function counterpartyFilter(filters, tx) {
	  if (!filters.counterparty) {
	    return true;
	  }
	  if (tx.address === filters.counterparty || tx.specification && (tx.specification.destination && tx.specification.destination.address === filters.counterparty || tx.specification.counterparty === filters.counterparty)) {
	    return true;
	  }
	  return false;
	}

	function transactionFilter(address, filters, tx) {
	  if (filters.excludeFailures && tx.outcome.result !== 'tesSUCCESS') {
	    return false;
	  }
	  if (filters.types && !_.includes(filters.types, tx.type)) {
	    return false;
	  }
	  if (filters.initiated === true && tx.address !== address) {
	    return false;
	  }
	  if (filters.initiated === false && tx.address === address) {
	    return false;
	  }
	  if (filters.counterparty && !counterpartyFilter(filters, tx)) {
	    return false;
	  }
	  return true;
	}

	function orderFilter(options, tx) {
	  return !options.startTx || (options.earliestFirst ? utils.compareTransactions(tx, options.startTx) > 0 : utils.compareTransactions(tx, options.startTx) < 0);
	}

	function formatPartialResponse(address, options, data) {
	  return {
	    marker: data.marker,
	    results: data.transactions.filter(function (tx) {
	      return tx.validated;
	    }).map(parseAccountTxTransaction).filter(_.partial(transactionFilter, address, options)).filter(_.partial(orderFilter, options))
	  };
	}

	function getAccountTx(remote, address, options, marker, limit, callback) {
	  var params = {
	    account: address,
	    ledger_index_min: options.minLedgerVersion || -1,
	    ledger_index_max: options.maxLedgerVersion || -1,
	    forward: options.earliestFirst,
	    binary: options.binary,
	    limit: utils.clamp(limit, 10, 400),
	    marker: marker
	  };

	  remote.requestAccountTx(params, composeAsync(_.partial(formatPartialResponse, address, options), convertErrors(callback)));
	}

	function checkForLedgerGaps(remote, options, transactions) {
	  var minLedgerVersion = options.minLedgerVersion;
	  var maxLedgerVersion = options.maxLedgerVersion;

	  // if we reached the limit on number of transactions, then we can shrink
	  // the required ledger range to only guarantee that there are no gaps in
	  // the range of ledgers spanned by those transactions
	  if (options.limit && transactions.length === options.limit) {
	    if (options.earliestFirst) {
	      maxLedgerVersion = _.last(transactions).outcome.ledgerVersion;
	    } else {
	      minLedgerVersion = _.last(transactions).outcome.ledgerVersion;
	    }
	  }

	  if (!utils.hasCompleteLedgerRange(remote, minLedgerVersion, maxLedgerVersion)) {
	    throw new utils.common.errors.MissingLedgerHistoryError();
	  }
	}

	function formatResponse(remote, options, transactions) {
	  var compare = options.earliestFirst ? utils.compareTransactions : _.rearg(utils.compareTransactions, 1, 0);
	  var sortedTransactions = transactions.sort(compare);
	  checkForLedgerGaps(remote, options, sortedTransactions);
	  return sortedTransactions;
	}

	function getTransactionsInternal(remote, address, options, callback) {
	  var getter = _.partial(getAccountTx, remote, address, options);
	  var format = _.partial(formatResponse, remote, options);
	  utils.getRecursive(getter, options.limit, composeAsync(format, callback));
	}

	function getTransactionsAsync(account, options, callback) {
	  var _this = this;

	  validate.address(account);
	  validate.getTransactionsOptions(options);

	  var defaults = { maxLedgerVersion: this.remote.getLedgerSequence() };
	  if (options.start) {
	    getTransaction.call(this, options.start).then(function (tx) {
	      var ledgerVersion = tx.outcome.ledgerVersion;
	      var bound = options.earliestFirst ? { minLedgerVersion: ledgerVersion } : { maxLedgerVersion: ledgerVersion };
	      var newOptions = _.assign(defaults, options, { startTx: tx }, bound);
	      getTransactionsInternal(_this.remote, account, newOptions, callback);
	    })['catch'](callback);
	  } else {
	    var newOptions = _.assign(defaults, options);
	    getTransactionsInternal(this.remote, account, newOptions, callback);
	  }
	}

	function getTransactions(account) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return utils.promisify(getTransactionsAsync).call(this, account, options);
	}

	module.exports = getTransactions;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var utils = __webpack_require__(48);
	var validate = utils.common.validate;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;
	var parseAccountTrustline = __webpack_require__(63);

	function currencyFilter(currency, trustline) {
	  return currency === null || trustline.specification.currency === currency;
	}

	function formatResponse(options, data) {
	  return {
	    marker: data.marker,
	    results: data.lines.map(parseAccountTrustline).filter(_.partial(currencyFilter, options.currency || null))
	  };
	}

	function getAccountLines(remote, address, ledgerVersion, options, marker, limit, callback) {
	  var requestOptions = {
	    account: address,
	    ledger: ledgerVersion,
	    marker: marker,
	    limit: utils.clamp(limit, 10, 400),
	    peer: options.counterparty
	  };

	  remote.requestAccountLines(requestOptions, composeAsync(_.partial(formatResponse, options), convertErrors(callback)));
	}

	function getTrustlinesAsync(account, options, callback) {
	  validate.address(account);
	  validate.getTrustlinesOptions(options);

	  var ledgerVersion = options.ledgerVersion || this.remote.getLedgerSequence();
	  var getter = _.partial(getAccountLines, this.remote, account, ledgerVersion, options);
	  utils.getRecursive(getter, options.limit, callback);
	}

	function getTrustlines(account) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return utils.promisify(getTrustlinesAsync).call(this, account, options);
	}

	module.exports = getTrustlines;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var async = __webpack_require__(91);
	var utils = __webpack_require__(48);
	var getTrustlines = __webpack_require__(32);
	var validate = utils.common.validate;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;

	function getTrustlineBalanceAmount(trustline) {
	  return {
	    currency: trustline.specification.currency,
	    counterparty: trustline.specification.counterparty,
	    value: trustline.state.balance
	  };
	}

	function formatBalances(balances) {
	  var xrpBalance = {
	    currency: 'XRP',
	    value: balances.xrp
	  };
	  return [xrpBalance].concat(balances.trustlines.map(getTrustlineBalanceAmount));
	}

	function getTrustlinesAsync(account, options, callback) {
	  getTrustlines.call(this, account, options).then(function (data) {
	    return callback(null, data);
	  })['catch'](callback);
	}

	function getBalancesAsync(account, options, callback) {
	  validate.address(account);
	  validate.getBalancesOptions(options);

	  var ledgerVersion = options.ledgerVersion || this.remote.getLedgerSequence();
	  async.parallel({
	    xrp: _.partial(utils.getXRPBalance, this.remote, account, ledgerVersion),
	    trustlines: _.partial(getTrustlinesAsync.bind(this), account, options)
	  }, composeAsync(formatBalances, convertErrors(callback)));
	}

	function getBalances(account) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return utils.promisify(getBalancesAsync).call(this, account, options);
	}

	module.exports = getBalances;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var async = __webpack_require__(91);
	var BigNumber = __webpack_require__(96);
	var utils = __webpack_require__(48);
	var validate = utils.common.validate;
	var parsePathfind = __webpack_require__(64);
	var NotFoundError = utils.common.errors.NotFoundError;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;

	function addParams(params, result) {
	  return _.assign({}, result, {
	    source_account: params.src_account,
	    source_currencies: params.src_currencies,
	    destination_amount: params.dst_amount
	  });
	}

	function requestPathFind(remote, pathfind, callback) {
	  var params = {
	    src_account: pathfind.source.address,
	    dst_account: pathfind.destination.address,
	    dst_amount: utils.common.toRippledAmount(pathfind.destination.amount)
	  };
	  if (typeof params.dst_amount === 'object' && !params.dst_amount.issuer) {
	    // Convert blank issuer to sender's address
	    // (Ripple convention for 'any issuer')
	    // https://ripple.com/build/transactions/
	    //     #special-issuer-values-for-sendmax-and-amount
	    // https://ripple.com/build/ripple-rest/#counterparties-in-payments
	    params.dst_amount.issuer = params.dst_account;
	  }
	  if (pathfind.source.currencies && pathfind.source.currencies.length > 0) {
	    params.src_currencies = pathfind.source.currencies.map(function (amount) {
	      return _.omit(utils.common.toRippledAmount(amount), 'value');
	    });
	  }

	  remote.createPathFind(params, composeAsync(_.partial(addParams, params), convertErrors(callback)));
	}

	function addDirectXrpPath(paths, xrpBalance) {
	  // Add XRP "path" only if the source acct has enough XRP to make the payment
	  var destinationAmount = paths.destination_amount;
	  if (new BigNumber(xrpBalance).greaterThanOrEqualTo(destinationAmount)) {
	    paths.alternatives.unshift({
	      paths_computed: [],
	      source_amount: paths.destination_amount
	    });
	  }
	  return paths;
	}

	function isRippledIOUAmount(amount) {
	  // rippled XRP amounts are specified as decimal strings
	  return typeof amount === 'object' && amount.currency && amount.currency !== 'XRP';
	}

	function conditionallyAddDirectXRPPath(remote, address, paths, callback) {
	  if (isRippledIOUAmount(paths.destination_amount) || !_.includes(paths.destination_currencies, 'XRP')) {
	    callback(null, paths);
	  } else {
	    utils.getXRPBalance(remote, address, undefined, composeAsync(_.partial(addDirectXrpPath, paths), callback));
	  }
	}

	function formatResponse(pathfind, paths) {
	  if (paths.alternatives && paths.alternatives.length > 0) {
	    var _address = pathfind.source.address;
	    return parsePathfind(_address, pathfind.destination.amount, paths);
	  }
	  if (!_.includes(paths.destination_currencies, pathfind.destination.amount.currency)) {
	    throw new NotFoundError('No paths found. ' + 'The destination_account does not accept ' + pathfind.destination.amount.currency + ', they only accept: ' + paths.destination_currencies.join(', '));
	  } else if (paths.source_currencies && paths.source_currencies.length > 0) {
	    throw new NotFoundError('No paths found. Please ensure' + ' that the source_account has sufficient funds to execute' + ' the payment in one of the specified source_currencies. If it does' + ' there may be insufficient liquidity in the network to execute' + ' this payment right now');
	  } else {
	    throw new NotFoundError('No paths found.' + ' Please ensure that the source_account has sufficient funds to' + ' execute the payment. If it does there may be insufficient liquidity' + ' in the network to execute this payment right now');
	  }
	}

	function getPathsAsync(pathfind, callback) {
	  validate.pathfind(pathfind);

	  var address = pathfind.source.address;
	  async.waterfall([_.partial(requestPathFind, this.remote, pathfind), _.partial(conditionallyAddDirectXRPPath, this.remote, address)], composeAsync(_.partial(formatResponse, pathfind), callback));
	}

	function getPaths(pathfind) {
	  return utils.promisify(getPathsAsync).call(this, pathfind);
	}

	module.exports = getPaths;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var utils = __webpack_require__(48);
	var validate = utils.common.validate;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;
	var parseAccountOrder = __webpack_require__(65);

	function requestAccountOffers(remote, address, ledgerVersion, marker, limit, callback) {
	  remote.requestAccountOffers({
	    account: address,
	    marker: marker,
	    limit: utils.clamp(limit, 10, 400),
	    ledger: ledgerVersion
	  }, composeAsync(function (data) {
	    return {
	      marker: data.marker,
	      results: data.offers.map(_.partial(parseAccountOrder, address))
	    };
	  }, convertErrors(callback)));
	}

	function getOrdersAsync(account, options, callback) {
	  validate.address(account);
	  validate.getOrdersOptions(options);

	  var ledgerVersion = options.ledgerVersion || this.remote.getLedgerSequence();
	  var getter = _.partial(requestAccountOffers, this.remote, account, ledgerVersion);
	  utils.getRecursive(getter, options.limit, composeAsync(function (orders) {
	    return _.sortBy(orders, function (order) {
	      return order.properties.sequence;
	    });
	  }, callback));
	}

	function getOrders(account) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return utils.promisify(getOrdersAsync).call(this, account, options);
	}

	module.exports = getOrders;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var async = __webpack_require__(91);
	var utils = __webpack_require__(48);
	var validate = utils.common.validate;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;
	var parseOrderbookOrder = __webpack_require__(66);

	// account is to specify a "perspective", which affects which unfunded offers
	// are returned
	function getBookOffers(remote, account, ledgerVersion, limit, takerGets, takerPays, callback) {
	  remote.requestBookOffers(utils.renameCounterpartyToIssuerInOrder({
	    taker_gets: takerGets,
	    taker_pays: takerPays,
	    ledger: ledgerVersion || 'validated',
	    limit: limit,
	    taker: account
	  }), composeAsync(function (data) {
	    return data.offers;
	  }, convertErrors(callback)));
	}

	function isSameIssue(a, b) {
	  return a.currency === b.currency && a.counterparty === b.counterparty;
	}

	function directionFilter(direction, order) {
	  return order.specification.direction === direction;
	}

	function flipOrder(order) {
	  var specification = order.specification;
	  var flippedSpecification = {
	    quantity: specification.totalPrice,
	    totalPrice: specification.quantity,
	    direction: specification.direction === 'buy' ? 'sell' : 'buy'
	  };
	  var newSpecification = _.merge({}, specification, flippedSpecification);
	  return _.merge({}, order, { specification: newSpecification });
	}

	function alignOrder(base, order) {
	  var quantity = order.specification.quantity;
	  return isSameIssue(quantity, base) ? order : flipOrder(order);
	}

	function formatBidsAndAsks(orderbook, offers) {
	  // the "base" currency is the currency that you are buying or selling
	  // the "counter" is the currency that the "base" is priced in
	  // a "bid"/"ask" is an order to buy/sell the base, respectively
	  // for bids: takerGets = totalPrice = counter, takerPays = quantity = base
	  // for asks: takerGets = quantity = base, takerPays = totalPrice = counter
	  // quality = takerPays / takerGets; price = totalPrice / quantity
	  // for bids: lowest quality => lowest quantity/totalPrice => highest price
	  // for asks: lowest quality => lowest totalPrice/quantity => lowest price
	  // for both bids and asks, lowest quality is closest to mid-market
	  // we sort the orders so that earlier orders are closer to mid-market
	  var orders = _.sortBy(offers, 'quality').map(parseOrderbookOrder);
	  var alignedOrders = orders.map(_.partial(alignOrder, orderbook.base));
	  var bids = alignedOrders.filter(_.partial(directionFilter, 'buy'));
	  var asks = alignedOrders.filter(_.partial(directionFilter, 'sell'));
	  return { bids: bids, asks: asks };
	}

	function getOrderbookAsync(account, orderbook, options, callback) {
	  validate.address(account);
	  validate.orderbook(orderbook);
	  validate.getOrderbookOptions(options);

	  var getter = _.partial(getBookOffers, this.remote, account, options.ledgerVersion, options.limit);
	  var getOffers = _.partial(getter, orderbook.base, orderbook.counter);
	  var getReverseOffers = _.partial(getter, orderbook.counter, orderbook.base);
	  async.parallel([getOffers, getReverseOffers], composeAsync(function (data) {
	    return formatBidsAndAsks(orderbook, _.flatten(data));
	  }, callback));
	}

	function getOrderbook(account, orderbook) {
	  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  return utils.promisify(getOrderbookAsync).call(this, account, orderbook, options);
	}

	module.exports = getOrderbook;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var utils = __webpack_require__(48);
	var validate = utils.common.validate;
	var parseFields = __webpack_require__(67);
	var composeAsync = utils.common.composeAsync;
	var AccountFlags = utils.common.constants.AccountFlags;
	var convertErrors = utils.common.convertErrors;

	function parseFlags(value) {
	  var settings = {};
	  for (var flagName in AccountFlags) {
	    if (value & AccountFlags[flagName]) {
	      settings[flagName] = true;
	    }
	  }
	  return settings;
	}

	function formatSettings(response) {
	  var data = response.account_data;
	  var parsedFlags = parseFlags(data.Flags);
	  var parsedFields = parseFields(data);
	  return _.assign({}, parsedFlags, parsedFields);
	}

	function getSettingsAsync(account, options, callback) {
	  validate.address(account);
	  validate.getSettingsOptions(options);

	  var request = {
	    account: account,
	    ledger: options.ledgerVersion || 'validated'
	  };

	  this.remote.requestAccountInfo(request, composeAsync(formatSettings, convertErrors(callback)));
	}

	function getSettings(account) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return utils.promisify(getSettingsAsync).call(this, account, options);
	}

	module.exports = getSettings;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	

	'use strict';

	var _Promise = __webpack_require__(88)['default'];

	var utils = __webpack_require__(48);
	var removeUndefined = __webpack_require__(68).removeUndefined;
	var validate = utils.common.validate;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;

	function formatAccountInfo(response) {
	  var data = response.account_data;
	  return removeUndefined({
	    sequence: data.Sequence,
	    xrpBalance: utils.common.dropsToXrp(data.Balance),
	    ownerCount: data.OwnerCount,
	    previousInitiatedTransactionID: data.AccountTxnID,
	    previousAffectingTransactionID: data.PreviousTxnID,
	    previousAffectingTransactionLedgerVersion: data.PreviousTxnLgrSeq
	  });
	}

	function getAccountInfoAsync(account, options, callback) {
	  validate.address(account);
	  validate.getAccountInfoOptions(options);

	  var request = {
	    account: account,
	    ledger: options.ledgerVersion || 'validated'
	  };

	  this.remote.requestAccountInfo(request, composeAsync(formatAccountInfo, convertErrors(callback)));
	}

	function getAccountInfo(account) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  return utils.promisify(getAccountInfoAsync).call(this, account, options);
	}

	module.exports = getAccountInfo;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var utils = __webpack_require__(74);
	var validate = utils.common.validate;
	var toRippledAmount = utils.common.toRippledAmount;
	var Transaction = utils.common.core.Transaction;

	function isXRPToXRPPayment(payment) {
	  var sourceCurrency = _.get(payment, 'source.maxAmount.currency');
	  var destinationCurrency = _.get(payment, 'destination.amount.currency');
	  return sourceCurrency === 'XRP' && destinationCurrency === 'XRP';
	}

	function isIOUWithoutCounterparty(amount) {
	  return amount && amount.currency !== 'XRP' && amount.counterparty === undefined;
	}

	function applyAnyCounterpartyEncoding(payment) {
	  // Convert blank counterparty to sender or receiver's address
	  //   (Ripple convention for 'any counterparty')
	  // https://ripple.com/build/transactions/
	  //    #special-issuer-values-for-sendmax-and-amount
	  // https://ripple.com/build/ripple-rest/#counterparties-in-payments
	  if (isIOUWithoutCounterparty(payment.source.maxAmount)) {
	    payment.source.maxAmount.counterparty = payment.source.address;
	  }
	  if (isIOUWithoutCounterparty(payment.destination.amount)) {
	    payment.destination.amount.counterparty = payment.destination.address;
	  }
	}

	function createPaymentTransaction(account, payment) {
	  applyAnyCounterpartyEncoding(payment);
	  validate.address(account);
	  validate.payment(payment);

	  var transaction = new Transaction();
	  transaction.payment({
	    from: payment.source.address,
	    to: payment.destination.address,
	    amount: toRippledAmount(payment.destination.amount)
	  });

	  if (payment.invoiceID) {
	    transaction.invoiceID(payment.invoiceID);
	  }
	  if (payment.source.tag) {
	    transaction.sourceTag(payment.source.tag);
	  }
	  if (payment.destination.tag) {
	    transaction.destinationTag(payment.destination.tag);
	  }
	  if (payment.memos) {
	    _.forEach(payment.memos, function (memo) {
	      return transaction.addMemo(memo.type, memo.format, memo.data);
	    });
	  }
	  if (payment.allowPartialPayment) {
	    transaction.setFlags(['PartialPayment']);
	  }
	  if (payment.noDirectRipple) {
	    transaction.setFlags(['NoRippleDirect']);
	  }
	  if (payment.limitQuality) {
	    transaction.setFlags(['LimitQuality']);
	  }
	  if (!isXRPToXRPPayment(payment)) {
	    // Don't set SendMax for XRP->XRP payment
	    // temREDUNDANT_SEND_MAX removed in:
	    // https://github.com/ripple/rippled/commit/
	    //  c522ffa6db2648f1d8a987843e7feabf1a0b7de8/
	    transaction.sendMax(toRippledAmount(payment.source.maxAmount));

	    if (payment.paths) {
	      transaction.paths(JSON.parse(payment.paths));
	    }
	  }

	  return transaction;
	}

	function preparePaymentAsync(account, payment, instructions, callback) {
	  var transaction = createPaymentTransaction(account, payment);
	  utils.createTxJSON(transaction, this.remote, instructions, callback);
	}

	function preparePayment(account, payment) {
	  var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  return utils.promisify(preparePaymentAsync.bind(this))(account, payment, instructions);
	}

	module.exports = preparePayment;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(74);
	var validate = utils.common.validate;
	var Transaction = utils.common.core.Transaction;
	var BigNumber = __webpack_require__(96);

	var TrustSetFlags = {
	  authorized: { set: 'SetAuth' },
	  ripplingDisabled: { set: 'NoRipple', unset: 'ClearNoRipple' },
	  frozen: { set: 'SetFreeze', unset: 'ClearFreeze' }
	};

	function convertQuality(quality) {
	  return quality === undefined ? undefined : new BigNumber(quality).shift(9).truncated().toNumber();
	}

	function createTrustlineTransaction(account, trustline) {
	  validate.address(account);
	  validate.trustline(trustline);

	  var limit = {
	    currency: trustline.currency,
	    issuer: trustline.counterparty,
	    value: trustline.limit
	  };

	  var transaction = new Transaction();
	  transaction.trustSet(account, limit, convertQuality(trustline.qualityIn), convertQuality(trustline.qualityOut));
	  utils.setTransactionBitFlags(transaction, trustline, TrustSetFlags);
	  return transaction;
	}

	function prepareTrustlineAsync(account, trustline, instructions, callback) {
	  var transaction = createTrustlineTransaction(account, trustline);
	  utils.createTxJSON(transaction, this.remote, instructions, callback);
	}

	function prepareTrustline(account, trustline) {
	  var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  return utils.promisify(prepareTrustlineAsync.bind(this))(account, trustline, instructions);
	}

	module.exports = prepareTrustline;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(74);
	var validate = utils.common.validate;
	var Transaction = utils.common.core.Transaction;

	var OfferCreateFlags = {
	  passive: { set: 'Passive' },
	  immediateOrCancel: { set: 'ImmediateOrCancel' },
	  fillOrKill: { set: 'FillOrKill' }
	};

	function createOrderTransaction(account, order) {
	  validate.address(account);
	  validate.order(order);

	  var transaction = new Transaction();
	  var takerPays = utils.common.toRippledAmount(order.direction === 'buy' ? order.quantity : order.totalPrice);
	  var takerGets = utils.common.toRippledAmount(order.direction === 'buy' ? order.totalPrice : order.quantity);

	  transaction.offerCreate(account, takerPays, takerGets);

	  utils.setTransactionBitFlags(transaction, order, OfferCreateFlags);
	  if (order.direction === 'sell') {
	    transaction.setFlags('Sell');
	  }

	  return transaction;
	}

	function prepareOrderAsync(account, order, instructions, callback) {
	  var transaction = createOrderTransaction(account, order);
	  utils.createTxJSON(transaction, this.remote, instructions, callback);
	}

	function prepareOrder(account, order) {
	  var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  return utils.promisify(prepareOrderAsync.bind(this))(account, order, instructions);
	}

	module.exports = prepareOrder;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(74);
	var validate = utils.common.validate;
	var Transaction = utils.common.core.Transaction;

	function createOrderCancellationTransaction(account, sequence) {
	  validate.address(account);
	  validate.sequence(sequence);

	  var transaction = new Transaction();
	  transaction.offerCancel(account, sequence);
	  return transaction;
	}

	function prepareOrderCancellationAsync(account, sequence, instructions, callback) {
	  var transaction = createOrderCancellationTransaction(account, sequence);
	  utils.createTxJSON(transaction, this.remote, instructions, callback);
	}

	function prepareOrderCancellation(account, sequence) {
	  var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  return utils.promisify(prepareOrderCancellationAsync.bind(this))(account, sequence, instructions);
	}

	module.exports = prepareOrderCancellation;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	'use strict';

	var _Object$keys = __webpack_require__(89)['default'];

	var assert = __webpack_require__(75);
	var BigNumber = __webpack_require__(96);
	var utils = __webpack_require__(74);
	var validate = utils.common.validate;
	var AccountFlagIndices = utils.common.constants.AccountFlagIndices;
	var AccountFields = utils.common.constants.AccountFields;
	var Transaction = utils.common.core.Transaction;

	// Emptry string passed to setting will clear it
	var CLEAR_SETTING = null;

	function setTransactionFlags(transaction, values) {
	  var keys = _Object$keys(values);
	  assert(keys.length === 1, 'ERROR: can only set one setting per transaction');
	  var flagName = keys[0];
	  var value = values[flagName];
	  var index = AccountFlagIndices[flagName];
	  if (index !== undefined) {
	    if (value) {
	      transaction.tx_json.SetFlag = index;
	    } else {
	      transaction.tx_json.ClearFlag = index;
	    }
	  }
	}

	function setTransactionFields(transaction, input) {
	  var fieldSchema = AccountFields;
	  for (var fieldName in fieldSchema) {
	    var field = fieldSchema[fieldName];
	    var value = input[field.name];

	    if (value === undefined) {
	      continue;
	    }

	    // The value required to clear an account root field varies
	    if (value === CLEAR_SETTING && field.hasOwnProperty('defaults')) {
	      value = field.defaults;
	    }

	    if (field.encoding === 'hex' && !field.length) {
	      // This is currently only used for Domain field
	      value = new Buffer(value, 'ascii').toString('hex').toUpperCase();
	    }

	    transaction.tx_json[fieldName] = value;
	  }
	}

	/**
	 *  Note: A fee of 1% requires 101% of the destination to be sent for the
	 *        destination to receive 100%.
	 *  The transfer rate is specified as the input amount as fraction of 1.
	 *  To specify the default rate of 0%, a 100% input amount, specify 1.
	 *  To specify a rate of 1%, a 101% input amount, specify 1.01
	 *
	 *  @param {Number|String} transferRate
	 *
	 *  @returns {Number|String} numbers will be converted while strings
	 *                           are returned
	 */

	function convertTransferRate(transferRate) {
	  return new BigNumber(transferRate).shift(9).toNumber();
	}

	function createSettingsTransaction(account, settings) {
	  validate.address(account);
	  validate.settings(settings);

	  var transaction = new Transaction();
	  if (settings.regularKey) {
	    return transaction.setRegularKey({
	      account: account,
	      regular_key: settings.regularKey
	    });
	  }

	  transaction.accountSet(account);
	  setTransactionFlags(transaction, settings);
	  setTransactionFields(transaction, settings);

	  if (transaction.tx_json.TransferRate !== undefined) {
	    transaction.tx_json.TransferRate = convertTransferRate(transaction.tx_json.TransferRate);
	  }
	  return transaction;
	}

	function prepareSettingsAsync(account, settings, instructions, callback) {
	  var transaction = createSettingsTransaction(account, settings);
	  utils.createTxJSON(transaction, this.remote, instructions, callback);
	}

	function prepareSettings(account, settings) {
	  var instructions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  return utils.promisify(prepareSettingsAsync.bind(this))(account, settings, instructions);
	}

	module.exports = prepareSettings;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(74);
	var core = utils.common.core;
	var validate = utils.common.validate;

	/**
	 * These prefixes are inserted before the source material used to
	 * generate various hashes. This is done to put each hash in its own
	 * "space." This way, two different types of objects with the
	 * same binary data will produce different hashes.
	 *
	 * Each prefix is a 4-byte value with the last byte set to zero
	 * and the first three bytes formed from the ASCII equivalent of
	 * some arbitrary string. For example "TXN".
	 */
	var HASH_TX_ID = 0x54584E00; // 'TXN'

	function getKeyPair(secret) {
	  return core.Seed.from_json(secret).get_key();
	}

	function getPublicKeyHex(keypair) {
	  return keypair.pubKeyHex();
	}

	function serialize(txJSON) {
	  return core.SerializedObject.from_json(txJSON);
	}

	function hashSerialization(serialized, prefix) {
	  return serialized.hash(prefix || HASH_TX_ID).to_hex();
	}

	function signingData(txJSON) {
	  return core.Transaction.from_json(txJSON).signingData().buffer;
	}

	function computeSignature(txJSON, keypair) {
	  return keypair.signHex(signingData(txJSON));
	}

	function sign(txJSON, secret) {
	  validate.txJSON(txJSON);
	  validate.secret(secret);

	  var keypair = getKeyPair(secret);
	  if (txJSON.SigningPubKey === undefined) {
	    txJSON.SigningPubKey = getPublicKeyHex(keypair);
	  }
	  txJSON.TxnSignature = computeSignature(txJSON, keypair);
	  var serialized = serialize(txJSON);
	  return {
	    signedTransaction: serialized.to_hex(),
	    id: hashSerialization(serialized, HASH_TX_ID)
	  };
	}

	module.exports = sign;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(74);
	var validate = utils.common.validate;
	var Request = utils.common.core.Request;
	var convertErrors = utils.common.convertErrors;

	function submitAsync(txBlob, callback) {
	  validate.blob(txBlob);
	  var request = new Request(this.remote, 'submit');
	  request.message.tx_blob = txBlob;
	  request.request(null, utils.common.composeAsync(function (data) {
	    return utils.common.convertKeysFromSnakeCaseToCamelCase(data);
	  }, convertErrors(callback)));
	}

	function submit(txBlob) {
	  return utils.promisify(submitAsync.bind(this))(txBlob);
	}

	module.exports = submit;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var common = __webpack_require__(50);

	function convertLedgerHeader(header) {
	  return {
	    accepted: header.accepted,
	    closed: header.closed,
	    account_hash: header.stateHash,
	    close_time: header.closeTime,
	    close_time_resolution: header.closeTimeResolution,
	    close_flags: header.closeFlags,
	    hash: header.ledgerHash,
	    ledger_hash: header.ledgerHash,
	    ledger_index: header.ledgerVersion.toString(),
	    seqNum: header.ledgerVersion.toString(),
	    parent_hash: header.parentLedgerHash,
	    parent_close_time: header.parentCloseTime,
	    total_coins: header.totalDrops,
	    totalCoins: header.totalDrops,
	    transaction_hash: header.transactionHash
	  };
	}

	function hashLedgerHeader(ledgerHeader) {
	  var header = convertLedgerHeader(ledgerHeader);
	  return common.core.Ledger.calculateLedgerHash(header);
	}

	function computeTransactionHash(ledger) {
	  if (ledger.rawTransactions === undefined) {
	    return ledger.transactionHash;
	  }
	  var transactions = JSON.parse(ledger.rawTransactions);
	  var txs = _.map(transactions, function (tx) {
	    var mergeTx = _.assign({}, _.omit(tx, 'tx'), tx.tx || {});
	    var renameMeta = _.assign({}, _.omit(mergeTx, 'meta'), tx.meta ? { metaData: tx.meta } : {});
	    return renameMeta;
	  });
	  var ledgerObject = common.core.Ledger.from_json({ transactions: txs });
	  var transactionHash = ledgerObject.calc_tx_hash().to_hex();
	  if (ledger.transactionHash !== undefined && ledger.transactionHash !== transactionHash) {
	    throw new common.errors.ValidationError('transactionHash in header' + ' does not match computed hash of transactions');
	  }
	  return transactionHash;
	}

	function computeStateHash(ledger) {
	  if (ledger.rawState === undefined) {
	    return ledger.stateHash;
	  }
	  var state = JSON.parse(ledger.rawState);
	  var ledgerObject = common.core.Ledger.from_json({ accountState: state });
	  var stateHash = ledgerObject.calc_account_hash().to_hex();
	  if (ledger.stateHash !== undefined && ledger.stateHash !== stateHash) {
	    throw new common.errors.ValidationError('stateHash in header' + ' does not match computed hash of state');
	  }
	  return stateHash;
	}

	function computeLedgerHash(ledger) {
	  var hashes = {
	    transactionHash: computeTransactionHash(ledger),
	    stateHash: computeStateHash(ledger)
	  };
	  return hashLedgerHeader(_.assign({}, ledger, hashes));
	}

	module.exports = computeLedgerHash;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(48);
	var validate = utils.common.validate;
	var composeAsync = utils.common.composeAsync;
	var convertErrors = utils.common.convertErrors;
	var parseLedger = __webpack_require__(69);

	function getLedgerAsync(options, callback) {
	  validate.getLedgerOptions(options);

	  var request = {
	    ledger: options.ledgerVersion || 'validated',
	    expand: options.includeAllData,
	    transactions: options.includeTransactions,
	    accounts: options.includeState
	  };

	  this.remote.requestLedger(request, composeAsync(function (response) {
	    return parseLedger(response.ledger);
	  }, convertErrors(callback)));
	}

	function getLedger() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  return utils.promisify(getLedgerAsync).call(this, options);
	}

	module.exports = getLedger;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var assert = __webpack_require__(75);
	var common = __webpack_require__(50);
	var dropsToXrp = common.dropsToXrp;
	var composeAsync = common.composeAsync;

	function clamp(value, min, max) {
	  assert(min <= max, 'Illegal clamp bounds');
	  return Math.min(Math.max(value, min), max);
	}

	function getXRPBalance(remote, address, ledgerVersion, callback) {
	  remote.requestAccountInfo({ account: address, ledger: ledgerVersion }, composeAsync(function (data) {
	    return dropsToXrp(data.account_data.Balance);
	  }, callback));
	}

	// If the marker is omitted from a response, you have reached the end
	// getter(marker, limit, callback), callback(error, {marker, results})
	function getRecursiveRecur(getter, marker, limit, callback) {
	  getter(marker, limit, function (error, data) {
	    if (error) {
	      return callback(error);
	    }
	    var remaining = limit - data.results.length;
	    if (remaining > 0 && data.marker !== undefined) {
	      getRecursiveRecur(getter, data.marker, remaining, function (_error, results) {
	        return _error ? callback(_error) : callback(null, data.results.concat(results));
	      });
	    } else {
	      return callback(null, data.results.slice(0, limit));
	    }
	  });
	}

	function getRecursive(getter, limit, callback) {
	  getRecursiveRecur(getter, undefined, limit || Infinity, callback);
	}

	function renameCounterpartyToIssuer(amount) {
	  if (amount === undefined) {
	    return undefined;
	  }
	  var issuer = amount.counterparty === undefined ? amount.issuer : amount.counterparty;
	  var withIssuer = _.assign({}, amount, { issuer: issuer });
	  return _.omit(withIssuer, 'counterparty');
	}

	function renameCounterpartyToIssuerInOrder(order) {
	  var taker_gets = renameCounterpartyToIssuer(order.taker_gets);
	  var taker_pays = renameCounterpartyToIssuer(order.taker_pays);
	  var changes = { taker_gets: taker_gets, taker_pays: taker_pays };
	  return _.assign({}, order, _.omit(changes, _.isUndefined));
	}

	function signum(num) {
	  return num === 0 ? 0 : num > 0 ? 1 : -1;
	}

	/**
	 *  Order two rippled transactions based on their ledger_index.
	 *  If two transactions took place in the same ledger, sort
	 *  them based on TransactionIndex
	 *  See: https://ripple.com/build/transactions/
	 *
	 *  @param {Object} first
	 *  @param {Object} second
	 *  @returns {Number} [-1, 0, 1]
	 */

	function compareTransactions(first, second) {
	  if (!first.outcome || !second.outcome) {
	    return 0;
	  }
	  if (first.outcome.ledgerVersion === second.outcome.ledgerVersion) {
	    return signum(first.outcome.indexInLedger - second.outcome.indexInLedger);
	  }
	  return first.outcome.ledgerVersion < second.outcome.ledgerVersion ? -1 : 1;
	}

	function hasCompleteLedgerRange(remote, minLedgerVersion, maxLedgerVersion) {
	  var firstLedgerVersion = 32570; // earlier versions have been lost
	  return remote.getServer().hasLedgerRange(minLedgerVersion || firstLedgerVersion, maxLedgerVersion || remote.getLedgerSequence());
	}

	module.exports = {
	  getXRPBalance: getXRPBalance,
	  compareTransactions: compareTransactions,
	  renameCounterpartyToIssuer: renameCounterpartyToIssuer,
	  renameCounterpartyToIssuerInOrder: renameCounterpartyToIssuerInOrder,
	  getRecursive: getRecursive,
	  hasCompleteLedgerRange: hasCompleteLedgerRange,
	  promisify: common.promisify,
	  clamp: clamp,
	  common: common
	};

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {
	'use strict';

	var _ = __webpack_require__(51);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(82);
	var assert = __webpack_require__(75);
	var validator = __webpack_require__(83);
	var core = __webpack_require__(70).core;
	var ValidationError = __webpack_require__(71).ValidationError;

	var SCHEMAS = {};

	function isValidAddress(address) {
	  return typeof address === 'string' && address.length > 0 && address[0] === 'r' && core.UInt160.is_valid(address);
	}

	function isValidLedgerHash(ledgerHash) {
	  return core.UInt256.is_valid(ledgerHash);
	}

	function loadSchema(filepath) {
	  try {
	    return JSON.parse(fs.readFileSync(filepath, 'utf8'));
	  } catch (e) {
	    throw new Error('Failed to parse schema: ' + filepath);
	  }
	}

	function endsWith(str, suffix) {
	  return str.indexOf(suffix, str.length - suffix.length) !== -1;
	}

	function loadSchemas(dir) {
	  var filenames = fs.readdirSync(dir).filter(function (name) {
	    return endsWith(name, '.json');
	  });
	  var schemas = filenames.map(function (name) {
	    return loadSchema(path.join(dir, name));
	  });
	  var titles = _.map(schemas, function (schema) {
	    return schema.title;
	  });
	  var duplicates = _.keys(_.pick(_.countBy(titles), function (count) {
	    return count > 1;
	  }));
	  assert(duplicates.length === 0, 'Duplicate schemas for: ' + duplicates);
	  return _.indexBy(schemas, 'title');
	}

	function formatSchemaError(error) {
	  return error.field + ' ' + error.message + (error.value ? ' (' + JSON.stringify(error.value) + ')' : '');
	}

	function formatSchemaErrors(errors) {
	  return errors.map(formatSchemaError).join(', ');
	}

	function schemaValidate(schemaName, object) {
	  var formats = { address: isValidAddress,
	    ledgerHash: isValidLedgerHash };
	  var options = { schemas: SCHEMAS, formats: formats,
	    verbose: true, greedy: true };
	  var schema = SCHEMAS[schemaName];
	  if (schema === undefined) {
	    throw new Error('schema not found for: ' + schemaName);
	  }
	  var validate = validator(schema, options);
	  var isValid = validate(object);
	  if (!isValid) {
	    throw new ValidationError(formatSchemaErrors(validate.errors));
	  }
	}

	SCHEMAS = loadSchemas(path.join(__dirname, './schemas'));
	module.exports = {
	  schemaValidate: schemaValidate,
	  isValidAddress: isValidAddress,
	  loadSchema: loadSchema,
	  SCHEMAS: SCHEMAS
	};
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var utils = __webpack_require__(70);

	module.exports = {
	  core: utils.core,
	  constants: __webpack_require__(72),
	  errors: __webpack_require__(71),
	  validate: __webpack_require__(73),
	  dropsToXrp: utils.dropsToXrp,
	  xrpToDrops: utils.xrpToDrops,
	  toRippledAmount: utils.toRippledAmount,
	  generateAddress: utils.generateAddress,
	  composeAsync: utils.composeAsync,
	  wrapCatch: utils.wrapCatch,
	  convertErrors: utils.convertErrors,
	  convertExceptions: utils.convertExceptions,
	  convertKeysFromSnakeCaseToCamelCase: utils.convertKeysFromSnakeCaseToCamelCase,
	  promisify: utils.promisify,
	  isValidAddress: __webpack_require__(49).isValidAddress
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(108)(module), (function() { return this; }())))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// Routines for working with an orderbook.
	//
	// One OrderBook object represents one half of an order book. (i.e. bids OR
	// asks) Which one depends on the ordering of the parameters.
	//
	// Events:
	//  - model
	//  - trade
	//  - transaction

	'use strict';

	var _Object$keys = __webpack_require__(89)['default'];

	var _ = __webpack_require__(51);
	var util = __webpack_require__(81);
	var extend = __webpack_require__(77);
	var assert = __webpack_require__(75);
	var async = __webpack_require__(91);
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var Amount = __webpack_require__(5).Amount;
	var UInt160 = __webpack_require__(11).UInt160;
	var Currency = __webpack_require__(8).Currency;
	var AutobridgeCalculator = __webpack_require__(97);
	var OrderBookUtils = __webpack_require__(98);
	var log = __webpack_require__(23).internal.sub('orderbook');
	var IOUValue = __webpack_require__(55).IOUValue;

	function assertValidNumber(number, message) {
	  assert(!_.isNull(number) && !isNaN(number), message);
	}

	/**
	 * @constructor OrderBook
	 * @param {Remote} remote
	 * @param {String} ask currency
	 * @param {String} ask issuer
	 * @param {String} bid currency
	 * @param {String} bid issuer
	 * @param {String} orderbook key
	 */

	function OrderBook(remote, currencyGets, issuerGets, currencyPays, issuerPays, key) {
	  EventEmitter.call(this);

	  var self = this;

	  this._remote = remote;
	  this._currencyGets = Currency.from_json(currencyGets);
	  this._issuerGets = issuerGets;
	  this._currencyPays = Currency.from_json(currencyPays);
	  this._issuerPays = issuerPays;
	  this._key = key;
	  this._subscribed = false;
	  this._shouldSubscribe = true;
	  this._listeners = 0;
	  this._offers = [];
	  this._offersAutobridged = [];
	  this._mergedOffers = [];
	  this._offerCounts = {};
	  this._ownerFundsUnadjusted = {};
	  this._ownerFunds = {};
	  this._ownerOffersTotal = {};

	  // We consider ourselves synced if we have a current
	  // copy of the offers, we are online and subscribed to updates
	  this._synced = false;

	  // Transfer rate of the taker gets currency issuer
	  this._issuerTransferRate = null;

	  // When orderbook is IOU/IOU, there will be IOU/XRP and XRP/IOU
	  // books that we must keep track of to compute autobridged offers
	  this._legOneBook = null;
	  this._legTwoBook = null;

	  this._isAutobridgeable = !this._currencyGets.is_native() && !this._currencyPays.is_native();

	  function computeAutobridgedOffersWrapper() {
	    self.computeAutobridgedOffers();
	    self.mergeDirectAndAutobridgedBooks();
	  }

	  if (this._isAutobridgeable) {
	    this._legOneBook = remote.createOrderBook({
	      currency_gets: 'XRP',
	      currency_pays: currencyPays,
	      issuer_pays: issuerPays
	    });

	    this._legOneBook.on('model', computeAutobridgedOffersWrapper);

	    this._legTwoBook = remote.createOrderBook({
	      currency_gets: currencyGets,
	      issuer_gets: issuerGets,
	      currency_pays: 'XRP'
	    });

	    this._legTwoBook.on('model', computeAutobridgedOffersWrapper);
	  }

	  function listenersModified(action, event) {
	    // Automatically subscribe and unsubscribe to orderbook
	    // on the basis of existing event listeners
	    if (_.contains(OrderBook.EVENTS, event)) {
	      switch (action) {
	        case 'add':
	          if (++self._listeners === 1) {
	            self.subscribe();
	          }
	          break;
	        case 'remove':
	          if (--self._listeners === 0) {
	            self.unsubscribe();
	          }
	          break;
	      }
	    }
	  }

	  function updateFundedAmountsWrapper(transaction) {
	    self.updateFundedAmounts(transaction);
	  }

	  this.on('newListener', function (event) {
	    listenersModified('add', event);
	  });

	  this.on('removeListener', function (event) {
	    listenersModified('remove', event);
	  });

	  this._remote.on('transaction', updateFundedAmountsWrapper);

	  this.on('unsubscribe', function () {
	    self.resetCache();

	    self._remote.removeListener('transaction', updateFundedAmountsWrapper);
	  });

	  this._remote.once('prepare_subscribe', function () {
	    self.subscribe();
	  });

	  this._remote.on('disconnect', function () {
	    self.resetCache();
	    self._remote.once('prepare_subscribe', function () {
	      self.subscribe();
	    });
	  });

	  return this;
	}

	util.inherits(OrderBook, EventEmitter);

	/**
	 * Events emitted from OrderBook
	 */

	OrderBook.EVENTS = ['transaction', 'model', 'trade', 'offer_added', 'offer_removed', 'offer_changed', 'offer_funds_changed'];

	OrderBook.DEFAULT_TRANSFER_RATE = 1000000000;

	/**
	 * Normalize offers from book_offers and transaction stream
	 *
	 * @param {Object} offer
	 * @return {Object} normalized
	 */

	OrderBook.offerRewrite = function (offer) {
	  var result = {};
	  var keys = _Object$keys(offer);

	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    switch (key) {
	      case 'PreviousTxnID':
	      case 'PreviousTxnLgrSeq':
	        break;
	      default:
	        result[key] = offer[key];
	    }
	  }

	  result.Flags = result.Flags || 0;
	  result.OwnerNode = result.OwnerNode || new Array(16 + 1).join('0');
	  result.BookNode = result.BookNode || new Array(16 + 1).join('0');

	  return result;
	};

	/**
	 * Initialize orderbook. Get orderbook offers and subscribe to transactions
	 */

	OrderBook.prototype.subscribe = function () {
	  var self = this;

	  if (!this._shouldSubscribe) {
	    return;
	  }

	  if (this._remote.trace) {
	    log.info('subscribing', this._key);
	  }

	  var steps = [function (callback) {
	    self.requestTransferRate(callback);
	  }, function (callback) {
	    self.requestOffers(callback);
	  }, function (callback) {
	    self.subscribeTransactions(callback);
	  }];

	  async.series(steps);
	};

	/**
	 * Unhook event listeners and prevent ripple-lib from further work on this
	 * orderbook. There is no more orderbook stream, so "unsubscribe" is nominal
	 */

	OrderBook.prototype.unsubscribe = function () {
	  var self = this;

	  if (this._remote.trace) {
	    log.info('unsubscribing', this._key);
	  }

	  this._subscribed = false;
	  this._shouldSubscribe = false;

	  OrderBook.EVENTS.forEach(function (event) {
	    if (self.listeners(event).length > 0) {
	      self.removeAllListeners(event);
	    }
	  });

	  this.emit('unsubscribe');
	};

	/**
	 * Request orderbook entries from server
	 *
	 * @param {Function} callback
	 */

	OrderBook.prototype.requestOffers = function () {
	  var callback = arguments.length <= 0 || arguments[0] === undefined ? function () {} : arguments[0];

	  var self = this;

	  if (!this._shouldSubscribe) {
	    return callback(new Error('Should not request offers'));
	  }

	  if (this._remote.trace) {
	    log.info('requesting offers', this._key);
	  }

	  function handleOffers(res) {
	    if (!Array.isArray(res.offers)) {
	      // XXX What now?
	      return callback(new Error('Invalid response'));
	    }

	    if (self._remote.trace) {
	      log.info('requested offers', self._key, 'offers: ' + res.offers.length);
	    }

	    self.setOffers(res.offers);
	    self.notifyDirectOffersChanged();

	    callback(null, self._offers);
	  }

	  function handleError(err) {
	    // XXX What now?
	    if (self._remote.trace) {
	      log.info('failed to request offers', self._key, err);
	    }

	    callback(err);
	  }

	  var requestOptions = _.merge({}, this.toJSON(), { ledger: 'validated' });
	  var request = this._remote.requestBookOffers(requestOptions);
	  request.once('success', handleOffers);
	  request.once('error', handleError);
	  request.request();

	  return request;
	};

	/**
	 * Request transfer rate for this orderbook's issuer
	 *
	 * @param {Function} callback
	 */

	OrderBook.prototype.requestTransferRate = function (callback) {
	  assert.strictEqual(typeof callback, 'function');

	  var self = this;

	  if (this._currencyGets.is_native()) {
	    // Transfer rate is default for the native currency
	    this._issuerTransferRate = OrderBook.DEFAULT_TRANSFER_RATE;

	    return callback(null, OrderBook.DEFAULT_TRANSFER_RATE);
	  }

	  if (this._issuerTransferRate) {
	    // Transfer rate has already been cached
	    return callback(null, this._issuerTransferRate);
	  }

	  function handleAccountInfo(err, info) {
	    if (err) {
	      return callback(err);
	    }

	    // When transfer rate is not explicitly set on account, it implies the
	    // default transfer rate
	    self._issuerTransferRate = info.account_data.TransferRate || OrderBook.DEFAULT_TRANSFER_RATE;

	    callback(null, self._issuerTransferRate);
	  }

	  this._remote.requestAccountInfo({ account: this._issuerGets }, handleAccountInfo);
	};

	/**
	 * Subscribe to transactions stream
	 *
	 * @param {Function} callback
	 */

	OrderBook.prototype.subscribeTransactions = function (callback) {
	  var self = this;

	  if (!this._shouldSubscribe) {
	    return callback('Should not subscribe');
	  }

	  if (this._remote.trace) {
	    log.info('subscribing to transactions');
	  }

	  function handleSubscribed(res) {
	    if (self._remote.trace) {
	      log.info('subscribed to transactions');
	    }

	    self._subscribed = true;

	    callback(null, res);
	  }

	  function handleError(err) {
	    if (self._remote.trace) {
	      log.info('failed to subscribe to transactions', self._key, err);
	    }

	    callback(err);
	  }

	  var request = this._remote.requestSubscribe();
	  request.addStream('transactions');
	  request.once('success', handleSubscribed);
	  request.once('error', handleError);
	  request.request();

	  return request;
	};

	/**
	 * Handles notifying listeners that direct offers have changed. For autobridged
	 * books, an additional merge step is also performed
	 */

	OrderBook.prototype.notifyDirectOffersChanged = function () {
	  if (this._isAutobridgeable) {
	    this.mergeDirectAndAutobridgedBooks();
	  } else {
	    this.emit('model', this._offers);
	  }
	};

	/**
	 * Reset cached owner's funds, offer counts, and offer sums
	 */

	OrderBook.prototype.resetCache = function () {
	  this._ownerFunds = {};
	  this._ownerOffersTotal = {};
	  this._offerCounts = {};
	  this._synced = false;
	};

	/**
	 * Check whether owner's funds have been cached
	 *
	 * @param {String} account - owner's account address
	 */

	OrderBook.prototype.hasOwnerFunds = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  return this._ownerFunds[account] !== undefined;
	};

	/**
	 * Set owner's, transfer rate adjusted, funds in cache
	 *
	 * @param {String} account - owner's account address
	 * @param {String} fundedAmount
	 */

	OrderBook.prototype.setOwnerFunds = function (account, fundedAmount) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  assert(!isNaN(fundedAmount), 'Funded amount is invalid');

	  this._ownerFundsUnadjusted[account] = fundedAmount;
	  this._ownerFunds[account] = this.applyTransferRate(fundedAmount);
	};

	/**
	 * Compute adjusted balance that would be left after issuer's transfer fee is
	 * deducted
	 *
	 * @param {String} balance
	 * @return {String}
	 */

	OrderBook.prototype.applyTransferRate = function (balance) {
	  assert(!isNaN(balance), 'Balance is invalid');
	  assertValidNumber(this._issuerTransferRate, 'Transfer rate is invalid');

	  var adjustedBalance = new IOUValue(balance).divide(new IOUValue(this._issuerTransferRate)).multiply(new IOUValue(OrderBook.DEFAULT_TRANSFER_RATE)).toString();

	  return adjustedBalance;
	};

	/**
	 * Get owner's cached, transfer rate adjusted, funds
	 *
	 * @param {String} account - owner's account address
	 * @return {Amount}
	 */

	OrderBook.prototype.getOwnerFunds = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  if (this.hasOwnerFunds(account)) {
	    if (this._currencyGets.is_native()) {
	      return Amount.from_json(this._ownerFunds[account]);
	    }
	    return OrderBookUtils.normalizeAmount(this._ownerFunds[account]);
	  }
	};

	/**
	 * Get owner's cached unadjusted funds
	 *
	 * @param {String} account - owner's account address
	 * @return {String}
	 */

	OrderBook.prototype.getUnadjustedOwnerFunds = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  return this._ownerFundsUnadjusted[account];
	};

	/**
	 * Remove cached owner's funds
	 *
	 * @param {String} account - owner's account address
	 */

	OrderBook.prototype.deleteOwnerFunds = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  this._ownerFunds[account] = undefined;
	};

	/**
	 * Get offer count for owner
	 *
	 * @param {String} account - owner's account address
	 * @return {Number}
	 */

	OrderBook.prototype.getOwnerOfferCount = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  return this._offerCounts[account] || 0;
	};

	/**
	 * Increment offer count for owner
	 *
	 * @param {String} account - owner's account address
	 * @return {Number}
	 */

	OrderBook.prototype.incrementOwnerOfferCount = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  var result = (this._offerCounts[account] || 0) + 1;
	  this._offerCounts[account] = result;
	  return result;
	};

	/**
	 * Decrement offer count for owner
	 * When an account has no more orders, we also stop tracking their account funds
	 *
	 * @param {String} account - owner's account address
	 * @return {Number}
	 */

	OrderBook.prototype.decrementOwnerOfferCount = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  var result = (this._offerCounts[account] || 1) - 1;
	  this._offerCounts[account] = result;

	  if (result < 1) {
	    this.deleteOwnerFunds(account);
	  }

	  return result;
	};

	/**
	 * Add amount sum being offered for owner
	 *
	 * @param {String} account - owner's account address
	 * @param {Object|String} amount - offer amount as native string or IOU
	 *                                 currency format
	 * @return {Amount}
	 */

	OrderBook.prototype.addOwnerOfferTotal = function (account, amount) {
	  assert(UInt160.is_valid(account), 'Account is invalid');

	  var previousAmount = this.getOwnerOfferTotal(account);
	  var currentAmount = previousAmount.add(Amount.from_json(amount));

	  this._ownerOffersTotal[account] = currentAmount;

	  return currentAmount;
	};

	/**
	 * Subtract amount sum being offered for owner
	 *
	 * @param {String} account - owner's account address
	 * @param {Object|String} amount - offer amount as native string or IOU
	 *                                 currency format
	 * @return {Amount}
	 */

	OrderBook.prototype.subtractOwnerOfferTotal = function (account, amount) {
	  assert(UInt160.is_valid(account), 'Account is invalid');

	  var previousAmount = this.getOwnerOfferTotal(account);
	  var newAmount = previousAmount.subtract(Amount.from_json(amount));
	  this._ownerOffersTotal[account] = newAmount;

	  assert(!newAmount.is_negative(), 'Offer total cannot be negative');

	  return newAmount;
	};

	/**
	 * Get offers amount sum for owner
	 *
	 * @param {String} account - owner's account address
	 * @return {Amount}
	 */

	OrderBook.prototype.getOwnerOfferTotal = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  var amount = this._ownerOffersTotal[account];
	  if (amount) {
	    return amount;
	  }
	  if (this._currencyGets.is_native()) {
	    return Amount.from_json('0');
	  }
	  return OrderBookUtils.normalizeAmount('0');
	};

	/**
	 * Reset offers amount sum for owner to 0
	 *
	 * @param {String} account - owner's account address
	 * @return {Amount}
	 */

	OrderBook.prototype.resetOwnerOfferTotal = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  if (this._currencyGets.is_native()) {
	    this._ownerOffersTotal[account] = Amount.from_json('0');
	  } else {
	    this._ownerOffersTotal[account] = OrderBookUtils.normalizeAmount('0');
	  }
	};

	/**
	 * Set funded amount on offer with its owner's cached funds
	 *
	 * is_fully_funded indicates if these funds are sufficient for the offer placed.
	 * taker_gets_funded indicates the amount this account can afford to offer.
	 * taker_pays_funded indicates adjusted TakerPays for partially funded offer.
	 *
	 * @param {Object} offer
	 * @return offer
	 */

	OrderBook.prototype.setOfferFundedAmount = function (offer) {
	  assert.strictEqual(typeof offer, 'object', 'Offer is invalid');

	  var fundedAmount = this.getOwnerFunds(offer.Account);
	  var previousOfferSum = this.getOwnerOfferTotal(offer.Account);
	  var currentOfferSum = previousOfferSum.add(Amount.from_json(offer.TakerGets));

	  offer.owner_funds = this.getUnadjustedOwnerFunds(offer.Account);

	  offer.is_fully_funded = fundedAmount.compareTo(currentOfferSum) >= 0;

	  if (offer.is_fully_funded) {
	    offer.taker_gets_funded = Amount.from_json(offer.TakerGets).to_text();
	    offer.taker_pays_funded = Amount.from_json(offer.TakerPays).to_text();
	  } else if (previousOfferSum.compareTo(fundedAmount) < 0) {
	    offer.taker_gets_funded = fundedAmount.subtract(previousOfferSum).to_text();

	    var quality = OrderBookUtils.getOfferQuality(offer, this._currencyGets);
	    var takerPaysFunded = quality.multiply(OrderBookUtils.getOfferTakerGetsFunded(offer));

	    offer.taker_pays_funded = this._currencyPays.is_native() ? String(Math.floor(takerPaysFunded.to_number())) : takerPaysFunded.to_json().value;
	  } else {
	    offer.taker_gets_funded = '0';
	    offer.taker_pays_funded = '0';
	  }

	  return offer;
	};

	/**
	 * Get account and final balance of a meta node
	 *
	 * @param {Object} node - RippleState or AccountRoot meta node
	 * @return {Object}
	 */

	OrderBook.prototype.parseAccountBalanceFromNode = function (node) {
	  var result = {
	    account: undefined,
	    balance: undefined
	  };

	  switch (node.entryType) {
	    case 'AccountRoot':
	      result.account = node.fields.Account;
	      result.balance = node.fieldsFinal.Balance;
	      break;

	    case 'RippleState':
	      if (node.fields.HighLimit.issuer === this._issuerGets) {
	        result.account = node.fields.LowLimit.issuer;
	        result.balance = node.fieldsFinal.Balance.value;
	      } else if (node.fields.LowLimit.issuer === this._issuerGets) {
	        result.account = node.fields.HighLimit.issuer;

	        // Negate balance on the trust line
	        result.balance = Amount.from_json(node.fieldsFinal.Balance).negate().to_json().value;
	      }
	      break;
	  }

	  assert(!isNaN(result.balance), 'node has an invalid balance');
	  assert(UInt160.is_valid(result.account), 'node has an invalid account');

	  return result;
	};

	/**
	 * Check that affected meta node represents a balance change
	 *
	 * @param {Object} node - RippleState or AccountRoot meta node
	 * @return {Boolean}
	 */

	OrderBook.prototype.isBalanceChangeNode = function (node) {
	  // Check meta node has balance, previous balance, and final balance
	  if (!(node.fields && node.fields.Balance && node.fieldsPrev && node.fieldsFinal && node.fieldsPrev.Balance && node.fieldsFinal.Balance)) {
	    return false;
	  }

	  // Check if taker gets currency is native and balance is not a number
	  if (this._currencyGets.is_native()) {
	    return !isNaN(node.fields.Balance);
	  }

	  // Check if balance change is not for taker gets currency
	  if (node.fields.Balance.currency !== this._currencyGets.to_json()) {
	    return false;
	  }

	  // Check if trustline does not refer to the taker gets currency issuer
	  if (!(node.fields.HighLimit.issuer === this._issuerGets || node.fields.LowLimit.issuer === this._issuerGets)) {
	    return false;
	  }

	  return true;
	};

	/**
	 * Updates funded amounts/balances using modified balance nodes
	 *
	 * Update owner funds using modified AccountRoot and RippleState nodes
	 * Update funded amounts for offers in the orderbook using owner funds
	 *
	 * @param {Object} transaction - transaction that holds meta nodes
	 */

	OrderBook.prototype.updateFundedAmounts = function (transaction) {
	  var self = this;

	  if (!this._currencyGets.is_native() && !this._issuerTransferRate) {
	    if (this._remote.trace) {
	      log.info('waiting for transfer rate');
	    }

	    this.requestTransferRate(function (err) {
	      if (err) {
	        log.error('Failed to request transfer rate, will not update funded amounts: ' + err.toString());
	      } else {
	        // Defer until transfer rate is requested
	        self.updateFundedAmounts(transaction);
	      }
	    });
	    return;
	  }

	  var affectedNodes = transaction.mmeta.getNodes({
	    nodeType: 'ModifiedNode',
	    entryType: this._currencyGets.is_native() ? 'AccountRoot' : 'RippleState'
	  });

	  _.each(affectedNodes, function (node) {
	    if (self.isBalanceChangeNode(node)) {
	      var result = self.parseAccountBalanceFromNode(node);

	      if (self.hasOwnerFunds(result.account)) {
	        // We are only updating owner funds that are already cached
	        self.setOwnerFunds(result.account, result.balance);

	        self.updateOwnerOffersFundedAmount(result.account);
	      }
	    }
	  });
	};

	/**
	 * Update offers' funded amount with their owner's funds
	 *
	 * @param {String} account - owner's account address
	 */

	OrderBook.prototype.updateOwnerOffersFundedAmount = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');

	  var self = this;

	  if (this._remote.trace) {
	    var ownerFunds = this.getOwnerFunds(account);
	    log.info('updating offer funds', this._key, account, ownerFunds ? ownerFunds.to_text() : 'undefined');
	  }

	  this.resetOwnerOfferTotal(account);

	  _.each(this._offers, function (offer) {
	    if (offer.Account !== account) {
	      return;
	    }

	    // Save a copy of the old offer so we can show how the offer has changed
	    var previousOffer = extend({}, offer);
	    var previousFundedGets = undefined;

	    if (_.isString(offer.taker_gets_funded)) {
	      // Offer is not new, so we should consider it for offer_changed and
	      // offer_funds_changed events
	      previousFundedGets = OrderBookUtils.getOfferTakerGetsFunded(offer);
	    }

	    self.setOfferFundedAmount(offer);
	    self.addOwnerOfferTotal(offer.Account, offer.TakerGets);

	    var takerGetsFunded = OrderBookUtils.getOfferTakerGetsFunded(offer);
	    var areFundsChanged = previousFundedGets && !takerGetsFunded.equals(previousFundedGets);

	    if (areFundsChanged) {
	      self.emit('offer_changed', previousOffer, offer);
	      self.emit('offer_funds_changed', offer, previousOffer.taker_gets_funded, offer.taker_gets_funded);
	    }
	  });
	};

	/**
	 * Notify orderbook of a relevant transaction
	 *
	 * @param {Object} transaction
	 * @api private
	 */

	OrderBook.prototype.notify = function (transaction) {
	  var self = this;

	  if (!(this._subscribed && this._synced)) {
	    return;
	  }

	  if (this._remote.trace) {
	    log.info('notifying', this._key, transaction.transaction.hash);
	  }

	  var affectedNodes = transaction.mmeta.getNodes({
	    entryType: 'Offer',
	    bookKey: this._key
	  });

	  if (affectedNodes.length < 1) {
	    return;
	  }

	  var takerGetsTotal = Amount.from_json('0' + (Currency.from_json(this._currencyGets).is_native() ? '' : '/' + this._currencyGets.to_human() + '/' + this._issuerGets));

	  var takerPaysTotal = Amount.from_json('0' + (Currency.from_json(this._currencyPays).is_native() ? '' : '/' + this._currencyPays.to_human() + '/' + this._issuerPays));

	  var isOfferCancel = transaction.transaction.TransactionType === 'OfferCancel';
	  var transactionOwnerFunds = transaction.transaction.owner_funds;

	  function handleNode(node) {
	    switch (node.nodeType) {
	      case 'DeletedNode':
	        self.deleteOffer(node, isOfferCancel);

	        // We don't want to count an OfferCancel as a trade
	        if (!isOfferCancel) {
	          takerGetsTotal = takerGetsTotal.add(node.fieldsFinal.TakerGets);
	          takerPaysTotal = takerPaysTotal.add(node.fieldsFinal.TakerPays);
	        }
	        break;

	      case 'ModifiedNode':
	        self.modifyOffer(node);

	        takerGetsTotal = takerGetsTotal.add(node.fieldsPrev.TakerGets).subtract(node.fieldsFinal.TakerGets);

	        takerPaysTotal = takerPaysTotal.add(node.fieldsPrev.TakerPays).subtract(node.fieldsFinal.TakerPays);
	        break;

	      case 'CreatedNode':
	        // rippled does not set owner_funds if the order maker is the issuer
	        // because the value would be infinite
	        var fundedAmount = transactionOwnerFunds !== undefined ? transactionOwnerFunds : Infinity;
	        self.setOwnerFunds(node.fields.Account, fundedAmount);
	        self.insertOffer(node);
	        break;
	    }
	  }

	  _.each(affectedNodes, handleNode);

	  this.emit('transaction', transaction);
	  this.notifyDirectOffersChanged();
	  if (!takerGetsTotal.is_zero()) {
	    this.emit('trade', takerPaysTotal, takerGetsTotal);
	  }
	};

	/**
	 * Insert an offer into the orderbook
	 *
	 * NOTE: We *MUST* update offers' funded amounts when a new offer is placed
	 *       because funds go to the highest quality offers first.
	 *
	 * @param {Object} node - Offer node
	 */

	OrderBook.prototype.insertOffer = function (node) {
	  if (this._remote.trace) {
	    log.info('inserting offer', this._key, node.fields);
	  }

	  var offer = OrderBook.offerRewrite(node.fields);
	  var takerGets = this.normalizeAmount(this._currencyGets, offer.TakerGets);
	  var takerPays = this.normalizeAmount(this._currencyPays, offer.TakerPays);

	  offer.LedgerEntryType = node.entryType;
	  offer.index = node.ledgerIndex;

	  // We're safe to calculate quality for newly created offers
	  offer.quality = takerPays.divide(takerGets).to_text();

	  var originalLength = this._offers.length;

	  for (var i = 0; i < originalLength; i++) {
	    var quality = OrderBookUtils.getOfferQuality(offer, this._currencyGets);
	    var existingOfferQuality = OrderBookUtils.getOfferQuality(this._offers[i], this._currencyGets);

	    if (quality.compareTo(existingOfferQuality) <= 0) {
	      this._offers.splice(i, 0, offer);

	      break;
	    }
	  }

	  if (this._offers.length === originalLength) {
	    this._offers.push(offer);
	  }

	  this.incrementOwnerOfferCount(offer.Account);

	  this.updateOwnerOffersFundedAmount(offer.Account);

	  this.emit('offer_added', offer);
	};

	/**
	 * Convert any amount into default IOU
	 *
	 * NOTE: This is necessary in some places because Amount.js arithmetic
	 * does not deal with native and non-native amounts well.
	 *
	 * @param {Currency} currency
	 * @param {Object} amountObj
	 */

	OrderBook.prototype.normalizeAmount = function (currency, amountObj) {
	  var value = currency.is_native() ? amountObj : amountObj.value;

	  return OrderBookUtils.normalizeAmount(value);
	};

	/**
	 * Modify an existing offer in the orderbook
	 *
	 * @param {Object} node - Offer node
	 */

	OrderBook.prototype.modifyOffer = function (node) {
	  if (this._remote.trace) {
	    log.info('modifying offer', this._key, node.fields);
	  }

	  for (var i = 0; i < this._offers.length; i++) {
	    var offer = this._offers[i];

	    if (offer.index === node.ledgerIndex) {
	      // TODO: This assumes no fields are deleted, which is
	      // probably a safe assumption, but should be checked.
	      extend(offer, node.fieldsFinal);

	      break;
	    }
	  }

	  this.updateOwnerOffersFundedAmount(node.fields.Account);
	};

	/**
	 * Delete an existing offer in the orderbook
	 *
	 * NOTE: We only update funded amounts when the node comes from an OfferCancel
	 *       transaction because when offers are deleted, it frees up funds to fund
	 *       other existing offers in the book
	 *
	 * @param {Object} node - Offer node
	 * @param {Boolean} isOfferCancel - whether node came from an OfferCancel
	 */

	OrderBook.prototype.deleteOffer = function (node, isOfferCancel) {
	  if (this._remote.trace) {
	    log.info('deleting offer', this._key, node.fields);
	  }

	  for (var i = 0; i < this._offers.length; i++) {
	    var offer = this._offers[i];

	    if (offer.index === node.ledgerIndex) {
	      // Remove offer amount from sum for account
	      this.subtractOwnerOfferTotal(offer.Account, offer.TakerGets);

	      this._offers.splice(i, 1);
	      this.decrementOwnerOfferCount(offer.Account);

	      this.emit('offer_removed', offer);

	      break;
	    }
	  }

	  if (isOfferCancel) {
	    this.updateOwnerOffersFundedAmount(node.fields.Account);
	  }
	};

	/**
	 * Reset internal offers cache from book_offers request
	 *
	 * @param {Array} offers
	 * @api private
	 */

	OrderBook.prototype.setOffers = function (offers) {
	  assert(Array.isArray(offers), 'Offers is not an array');

	  var self = this;

	  this.resetCache();

	  var newOffers = _.map(offers, function (rawOffer) {
	    var offer = OrderBook.offerRewrite(rawOffer);

	    if (offer.hasOwnProperty('owner_funds')) {
	      // The first offer of each owner from book_offers contains owner balance
	      // of offer's output
	      self.setOwnerFunds(offer.Account, offer.owner_funds);
	    }

	    self.incrementOwnerOfferCount(offer.Account);

	    self.setOfferFundedAmount(offer);
	    self.addOwnerOfferTotal(offer.Account, offer.TakerGets);

	    return offer;
	  });

	  this._offers = newOffers;
	  this._synced = true;
	};

	/**
	 * Get offers model asynchronously
	 *
	 * This function takes a callback and calls it with an array containing the
	 * current set of offers in this order book.
	 *
	 * If the data is available immediately, the callback may be called
	 * synchronously
	 *
	 * @param {Function} callback
	 */

	OrderBook.prototype.offers = OrderBook.prototype.getOffers = function (callback) {
	  assert.strictEqual(typeof callback, 'function', 'Callback missing');

	  if (this._synced) {
	    callback(null, this._offers);
	  } else {
	    this.once('model', function (m) {
	      callback(null, m);
	    });
	  }

	  return this;
	};

	/**
	 * Return latest known offers
	 *
	 * Usually, this will just be an empty array if the order book hasn't been
	 * loaded yet. But this accessor may be convenient in some circumstances.
	 *
	 * @return {Array} offers
	 */

	OrderBook.prototype.offersSync = OrderBook.prototype.getOffersSync = function () {
	  return this._offers;
	};

	/**
	 * Get request-representation of orderbook
	 *
	 * @return {Object} json
	 */

	OrderBook.prototype.toJSON = OrderBook.prototype.to_json = function () {
	  var json = {
	    taker_gets: {
	      currency: this._currencyGets.to_hex()
	    },
	    taker_pays: {
	      currency: this._currencyPays.to_hex()
	    }
	  };

	  if (!this._currencyGets.is_native()) {
	    json.taker_gets.issuer = this._issuerGets;
	  }

	  if (!this._currencyPays.is_native()) {
	    json.taker_pays.issuer = this._issuerPays;
	  }

	  return json;
	};

	/**
	 * Whether the OrderBook is valid
	 *
	 * Note: This only checks whether the parameters (currencies and issuer) are
	 *       syntactically valid. It does not check anything against the ledger.
	 *
	 * @return {Boolean} is valid
	 */

	OrderBook.prototype.isValid = OrderBook.prototype.is_valid = function () {
	  // XXX Should check for same currency (non-native) && same issuer
	  return this._currencyPays && this._currencyPays.is_valid() && (this._currencyPays.is_native() || UInt160.is_valid(this._issuerPays)) && this._currencyGets && this._currencyGets.is_valid() && (this._currencyGets.is_native() || UInt160.is_valid(this._issuerGets)) && !(this._currencyPays.is_native() && this._currencyGets.is_native());
	};

	/**
	 * Compute autobridged offers for an IOU:IOU orderbook by merging offers from
	 * IOU:XRP and XRP:IOU books
	 */

	OrderBook.prototype.computeAutobridgedOffers = function () {
	  assert(!this._currencyGets.is_native() && !this._currencyPays.is_native(), 'Autobridging is only for IOU:IOU orderbooks');

	  var autobridgeCalculator = new AutobridgeCalculator(this._currencyGets, this._currencyPays, this._legOneBook.getOffersSync(), this._legTwoBook.getOffersSync(), this._issuerGets, this._issuerPays);

	  this._offersAutobridged = autobridgeCalculator.calculate();
	};

	/**
	 * Merge direct and autobridged offers into a combined orderbook
	 *
	 * @return [Array]
	 */

	OrderBook.prototype.mergeDirectAndAutobridgedBooks = function () {
	  var self = this;

	  if (_.isEmpty(this._offers) && _.isEmpty(this._offersAutobridged)) {
	    // still emit empty offers list to indicate that load is completed
	    this.emit('model', []);
	    return;
	  }

	  this._mergedOffers = this._offers.concat(this._offersAutobridged).sort(function (a, b) {
	    var aQuality = OrderBookUtils.getOfferQuality(a, self._currencyGets);
	    var bQuality = OrderBookUtils.getOfferQuality(b, self._currencyGets);

	    return aQuality.compareTo(bQuality);
	  });

	  this.emit('model', this._mergedOffers);
	};

	exports.OrderBook = OrderBook;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// TODO: move in helpers from serializedtypes to utils

	var _Object$keys = __webpack_require__(89)['default'];

	function toBytes(n) {
	  return [n >>> 24, n >>> 16 & 0xff, n >>> 8 & 0xff, n & 0xff];
	}

	/**
	 * Prefix for hashing functions.
	 *
	 * These prefixes are inserted before the source material used to
	 * generate various hashes. This is done to put each hash in its own
	 * "space." This way, two different types of objects with the
	 * same binary data will produce different hashes.
	 *
	 * Each prefix is a 4-byte value with the last byte set to zero
	 * and the first three bytes formed from the ASCII equivalent of
	 * some arbitrary string. For example "TXN".
	 */

	// transaction plus signature to give transaction ID
	exports.HASH_TX_ID = 0x54584E00; // 'TXN'
	// transaction plus metadata
	exports.HASH_TX_NODE = 0x534E4400; // 'TND'
	// inner node in tree
	exports.HASH_INNER_NODE = 0x4D494E00; // 'MIN'
	// leaf node in tree
	exports.HASH_LEAF_NODE = 0x4D4C4E00; // 'MLN'
	// inner transaction to sign
	exports.HASH_TX_SIGN = 0x53545800; // 'STX'
	// inner transaction to sign (TESTNET)
	exports.HASH_TX_SIGN_TESTNET = 0x73747800; // 'stx'

	_Object$keys(exports).forEach(function (k) {
	  exports[k + '_BYTES'] = toBytes(exports[k]);
	});

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	

	'use strict';

	var _createClass = __webpack_require__(85)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var GlobalBigNumber = __webpack_require__(96);

	var BigNumber = GlobalBigNumber.another({
	  ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
	  DECIMAL_PLACES: 40
	});

	var assert = __webpack_require__(75);

	var Value = (function () {
	  function Value(value) {
	    _classCallCheck(this, Value);

	    if (this.constructor === 'Value') {
	      throw new Error('Cannot instantiate Value directly, it is an abstract base class');
	    }
	    this._value = new BigNumber(value);
	  }

	  _createClass(Value, [{
	    key: 'abs',
	    value: function abs() {
	      var result = this._value.abs();
	      return this._canonicalize(result);
	    }
	  }, {
	    key: 'add',
	    value: function add(addend) {
	      assert(this.constructor === addend.constructor);
	      var result = this._value.plus(addend._value);
	      return this._canonicalize(result);
	    }
	  }, {
	    key: 'subtract',
	    value: function subtract(subtrahend) {
	      assert(this.constructor === subtrahend.constructor);
	      var result = this._value.minus(subtrahend._value);
	      return this._canonicalize(result);
	    }
	  }, {
	    key: 'multiply',
	    value: function multiply(multiplicand) {
	      var result = this._value.times(multiplicand._value);
	      return this._canonicalize(result);
	    }
	  }, {
	    key: 'divide',
	    value: function divide(divisor) {
	      if (divisor.isZero()) {
	        throw new Error('divide by zero');
	      }
	      var result = this._value.dividedBy(divisor._value);
	      return this._canonicalize(result);
	    }
	  }, {
	    key: 'invert',
	    value: function invert() {
	      var result = new BigNumber(this._value).toPower(-1);
	      return this._canonicalize(result);
	    }
	  }, {
	    key: 'round',
	    value: function round(decimalPlaces, roundingMode) {
	      var result = this._value.round(decimalPlaces, roundingMode);
	      return this._canonicalize(result);
	    }
	  }, {
	    key: 'toFixed',
	    value: function toFixed(decimalPlaces, roundingMode) {
	      return this._value.toFixed(decimalPlaces, roundingMode);
	    }
	  }, {
	    key: 'getExponent',
	    value: function getExponent() {
	      return this._value.e;
	    }
	  }, {
	    key: 'isNaN',
	    value: function isNaN() {
	      return this._value.isNaN();
	    }
	  }, {
	    key: 'isZero',
	    value: function isZero() {
	      return this._value.isZero();
	    }
	  }, {
	    key: 'isNegative',
	    value: function isNegative() {
	      return this._value.isNegative();
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return this._value.toString();
	    }
	  }, {
	    key: 'greaterThan',
	    value: function greaterThan(comparator) {
	      assert(this.constructor === comparator.constructor);
	      return this._value.greaterThan(comparator._value);
	    }
	  }, {
	    key: 'lessThan',
	    value: function lessThan(comparator) {
	      assert(this.constructor === comparator.constructor);
	      return this._value.lessThan(comparator._value);
	    }
	  }, {
	    key: 'comparedTo',
	    value: function comparedTo(comparator) {
	      assert(this.constructor === comparator.constructor);
	      return this._value.comparedTo(comparator._value);
	    }
	  }], [{
	    key: 'getBNRoundDown',
	    value: function getBNRoundDown() {
	      return BigNumber.ROUND_DOWN;
	    }
	  }]);

	  return Value;
	})();

	exports.Value = Value;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	

	'use strict';

	var _get = __webpack_require__(100)['default'];

	var _inherits = __webpack_require__(101)['default'];

	var _createClass = __webpack_require__(85)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var Value = __webpack_require__(54).Value;
	var XRPValue = __webpack_require__(56).XRPValue;
	var GlobalBigNumber = __webpack_require__(96);
	var BigNumber = GlobalBigNumber.another({
	  ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
	  DECIMAL_PLACES: 40
	});
	var rippleUnits = new BigNumber(1e6);

	var IOUValue = (function (_Value) {
	  _inherits(IOUValue, _Value);

	  function IOUValue(value) {
	    var roundingMode = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	    var base = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	    _classCallCheck(this, IOUValue);

	    _get(Object.getPrototypeOf(IOUValue.prototype), 'constructor', this).call(this, new BigNumber(value, base).toDigits(16, roundingMode));
	  }

	  _createClass(IOUValue, [{
	    key: 'multiply',
	    value: function multiply(multiplicand) {
	      if (multiplicand instanceof XRPValue) {
	        return _get(Object.getPrototypeOf(IOUValue.prototype), 'multiply', this).call(this, new IOUValue(multiplicand._value.times(rippleUnits)));
	      }
	      return _get(Object.getPrototypeOf(IOUValue.prototype), 'multiply', this).call(this, multiplicand);
	    }
	  }, {
	    key: 'divide',
	    value: function divide(divisor) {
	      if (divisor instanceof XRPValue) {
	        return _get(Object.getPrototypeOf(IOUValue.prototype), 'divide', this).call(this, new IOUValue(divisor._value.times(rippleUnits)));
	      }
	      return _get(Object.getPrototypeOf(IOUValue.prototype), 'divide', this).call(this, divisor);
	    }
	  }, {
	    key: 'negate',
	    value: function negate() {
	      return new IOUValue(this._value.neg());
	    }
	  }, {
	    key: '_canonicalize',
	    value: function _canonicalize(value) {
	      if (value.isNaN()) {
	        throw new Error('Invalid result');
	      }
	      return new IOUValue(value.toPrecision(16));
	    }
	  }, {
	    key: 'equals',
	    value: function equals(comparator) {
	      return comparator instanceof IOUValue && this._value.equals(comparator._value);
	    }
	  }]);

	  return IOUValue;
	})(Value);

	exports.IOUValue = IOUValue;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	

	'use strict';

	var _get = __webpack_require__(100)['default'];

	var _inherits = __webpack_require__(101)['default'];

	var _createClass = __webpack_require__(85)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var GlobalBigNumber = __webpack_require__(96);
	var BigNumber = GlobalBigNumber.another({
	  ROUNDING_MODE: GlobalBigNumber.ROUND_HALF_UP,
	  DECIMAL_PLACES: 40
	});

	var Value = __webpack_require__(54).Value;
	var rippleUnits = new BigNumber(1e6);

	var XRPValue = (function (_Value) {
	  _inherits(XRPValue, _Value);

	  function XRPValue(value) {
	    _classCallCheck(this, XRPValue);

	    _get(Object.getPrototypeOf(XRPValue.prototype), 'constructor', this).call(this, value);
	    if (this._value.dp() > 6) {
	      throw new Error('Value has more than 6 digits of precision past the decimal point, ' + 'an IOUValue may be being cast to an XRPValue');
	    }
	  }

	  _createClass(XRPValue, [{
	    key: 'multiply',
	    value: function multiply(multiplicand) {
	      if (multiplicand instanceof XRPValue) {
	        return _get(Object.getPrototypeOf(XRPValue.prototype), 'multiply', this).call(this, new XRPValue(multiplicand._value.times(rippleUnits)));
	      }
	      return _get(Object.getPrototypeOf(XRPValue.prototype), 'multiply', this).call(this, multiplicand);
	    }
	  }, {
	    key: 'divide',
	    value: function divide(divisor) {
	      if (divisor instanceof XRPValue) {
	        return _get(Object.getPrototypeOf(XRPValue.prototype), 'divide', this).call(this, new XRPValue(divisor._value.times(rippleUnits)));
	      }
	      return _get(Object.getPrototypeOf(XRPValue.prototype), 'divide', this).call(this, divisor);
	    }
	  }, {
	    key: 'negate',
	    value: function negate() {
	      return new XRPValue(this._value.neg());
	    }
	  }, {
	    key: '_canonicalize',
	    value: function _canonicalize(value) {
	      if (value.isNaN()) {
	        throw new Error('Invalid result');
	      }
	      return new XRPValue(value.round(6, BigNumber.ROUND_DOWN));
	    }
	  }, {
	    key: 'equals',
	    value: function equals(comparator) {
	      return comparator instanceof XRPValue && this._value.equals(comparator._value);
	    }
	  }]);

	  return XRPValue;
	})(Value);

	exports.XRPValue = XRPValue;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// Convert a JavaScript number to IEEE-754 Double Precision
	// value represented as an array of 8 bytes (octets)
	//
	// Based on:
	// http://cautionsingularityahead.blogspot.com/2010/04/javascript-and-ieee754-redux.html
	//
	// Found and modified from:
	// https://gist.github.com/bartaz/1119041

	'use strict';

	var Float = exports.Float = {};

	Float.toIEEE754 = function (v, ebits, fbits) {

	  var bias = (1 << ebits - 1) - 1;

	  // Compute sign, exponent, fraction
	  var s, e, f;
	  if (isNaN(v)) {
	    e = (1 << bias) - 1;f = 1;s = 0;
	  } else if (v === Infinity || v === -Infinity) {
	    e = (1 << bias) - 1;f = 0;s = v < 0 ? 1 : 0;
	  } else if (v === 0) {
	    e = 0;f = 0;s = 1 / v === -Infinity ? 1 : 0;
	  } else {
	    s = v < 0;
	    v = Math.abs(v);

	    if (v >= Math.pow(2, 1 - bias)) {
	      var ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
	      e = ln + bias;
	      f = v * Math.pow(2, fbits - ln) - Math.pow(2, fbits);
	    } else {
	      e = 0;
	      f = v / Math.pow(2, 1 - bias - fbits);
	    }
	  }

	  // Pack sign, exponent, fraction
	  var i,
	      bits = [];
	  for (i = fbits; i; i -= 1) {
	    bits.push(f % 2 ? 1 : 0);f = Math.floor(f / 2);
	  }
	  for (i = ebits; i; i -= 1) {
	    bits.push(e % 2 ? 1 : 0);e = Math.floor(e / 2);
	  }
	  bits.push(s ? 1 : 0);
	  bits.reverse();
	  var str = bits.join('');

	  // Bits to bytes
	  var bytes = [];
	  while (str.length) {
	    bytes.push(parseInt(str.substring(0, 8), 2));
	    str = str.substring(8);
	  }
	  return bytes;
	};

	Float.fromIEEE754 = function (bytes, ebits, fbits) {

	  // Bytes to bits
	  var bits = [];
	  for (var i = bytes.length; i; i -= 1) {
	    var byte = bytes[i - 1];
	    for (var j = 8; j; j -= 1) {
	      bits.push(byte % 2 ? 1 : 0);byte = byte >> 1;
	    }
	  }
	  bits.reverse();
	  var str = bits.join('');

	  // Unpack sign, exponent, fraction
	  var bias = (1 << ebits - 1) - 1;
	  var s = parseInt(str.substring(0, 1), 2) ? -1 : 1;
	  var e = parseInt(str.substring(1, 1 + ebits), 2);
	  var f = parseInt(str.substring(1 + ebits), 2);

	  // Produce number
	  if (e === (1 << ebits) - 1) {
	    return f !== 0 ? NaN : s * Infinity;
	  } else if (e > 0) {
	    return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));
	  } else if (f !== 0) {
	    return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));
	  } else {
	    return s * 0;
	  }
	};

	Float.fromIEEE754Double = function (b) {
	  return Float.fromIEEE754(b, 11, 52);
	};
	Float.toIEEE754Double = function (v) {
	  return Float.toIEEE754(v, 11, 52);
	};
	Float.fromIEEE754Single = function (b) {
	  return Float.fromIEEE754(b, 8, 23);
	};
	Float.toIEEE754Single = function (v) {
	  return Float.toIEEE754(v, 8, 23);
	};

	// Convert array of octets to string binary representation
	// by bartaz

	Float.toIEEE754DoubleString = function (v) {
	  return exports.toIEEE754Double(v).map(function (n) {
	    for (n = n.toString(2); n.length < 8; n = "0" + n);return n;
	  }).join('').replace(/(.)(.{11})(.{52})/, "$1 $2 $3");
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* eslint new-cap: 1 */

	var assert = __webpack_require__(75);
	var lodash = __webpack_require__(51);
	var sjclcodec = __webpack_require__(78);
	var utils = __webpack_require__(18);
	var BN = __webpack_require__(93);

	//
	// Abstract UInt class
	//
	// Base class for UInt classes
	//

	function UInt() {
	  // Internal form: NaN or BN
	  this._value = NaN;
	}

	UInt.json_rewrite = function (j, opts) {
	  return this.from_json(j).to_json(opts);
	};

	// Return a new UInt from j.
	UInt.from_generic = function (j) {
	  if (j instanceof this) {
	    return j.clone();
	  }

	  return new this().parse_generic(j);
	};

	// Return a new UInt from j.
	UInt.from_hex = function (j) {
	  if (j instanceof this) {
	    return j.clone();
	  }

	  return new this().parse_hex(j);
	};

	// Return a new UInt from j.
	UInt.from_json = function (j) {
	  if (j instanceof this) {
	    return j.clone();
	  }

	  return new this().parse_json(j);
	};

	// Return a new UInt from j.
	UInt.from_bits = function (j) {
	  if (j instanceof this) {
	    return j.clone();
	  }

	  return new this().parse_bits(j);
	};

	// Return a new UInt from j.
	UInt.from_bytes = function (j) {
	  if (j instanceof this) {
	    return j.clone();
	  }

	  return new this().parse_bytes(j);
	};

	// Return a new UInt from j.
	UInt.from_number = function (j) {
	  if (j instanceof this) {
	    return j.clone();
	  }

	  return new this().parse_number(j);
	};

	UInt.is_valid = function (j) {
	  return this.from_json(j).is_valid();
	};

	UInt.prototype.clone = function () {
	  return this.copyTo(new this.constructor());
	};

	// Returns copy.
	UInt.prototype.copyTo = function (d) {
	  d._value = this._value;

	  if (this._version_byte !== undefined) {
	    d._version_byte = this._version_byte;
	  }

	  if (typeof d._update === 'function') {
	    d._update();
	  }

	  return d;
	};

	UInt.prototype.equals = function (o) {
	  return this.is_valid() && o.is_valid() &&
	  // This throws but the expression will short circuit
	  this.cmp(o) === 0;
	};

	UInt.prototype.cmp = function (o) {
	  assert(this.is_valid() && o.is_valid());
	  return this._value.cmp(o._value);
	};

	UInt.prototype.greater_than = function (o) {
	  return this.cmp(o) > 0;
	};

	UInt.prototype.less_than = function (o) {
	  return this.cmp(o) < 0;
	};

	UInt.prototype.is_valid = function () {
	  return this._value instanceof BN;
	};

	UInt.prototype.is_zero = function () {
	  // cmpn means cmp with N)umber
	  return this.is_valid() && this._value.cmpn(0) === 0;
	};

	/**
	 * Update any derivative values.
	 *
	 * This allows subclasses to maintain caches of any data that they derive from
	 * the main _value. For example, the Currency class keeps the currency type, the
	 * currency code and other information about the currency cached.
	 *
	 * The reason for keeping this mechanism in this class is so every subclass can
	 * call it whenever it modifies the internal state.
	 *
	 * @return {void}
	 */
	UInt.prototype._update = function () {
	  // Nothing to do by default. Subclasses will override this.
	};

	// value = NaN on error.
	UInt.prototype.parse_generic = function (j) {
	  var subclass = this.constructor;

	  assert(typeof subclass.width === 'number', 'UInt missing width');

	  this._value = NaN;

	  switch (j) {
	    case undefined:
	    case '0':
	    case subclass.STR_ZERO:
	    case subclass.ACCOUNT_ZERO:
	    case subclass.HEX_ZERO:
	      this._value = new BN(0);
	      break;

	    case '1':
	    case subclass.STR_ONE:
	    case subclass.ACCOUNT_ONE:
	    case subclass.HEX_ONE:
	      this._value = new BN(1);
	      break;

	    default:
	      if (lodash.isString(j)) {
	        switch (j.length) {
	          case subclass.width:
	            var hex = utils.arrayToHex(utils.stringToArray(j));
	            this._value = new BN(hex, 16);
	            break;
	          case subclass.width * 2:
	            // Assume hex, check char set
	            this.parse_hex(j);
	            break;
	        }
	      } else if (lodash.isNumber(j)) {
	        this.parse_number(j);
	      } else if (lodash.isArray(j)) {
	        // Assume bytes array
	        this.parse_bytes(j);
	      }
	  }

	  this._update();

	  return this;
	};

	UInt.prototype.parse_hex = function (j) {
	  if (new RegExp('^[0-9A-Fa-f]{' + this.constructor.width * 2 + '}$').test(j)) {
	    this._value = new BN(j, 16);
	  } else {
	    this._value = NaN;
	  }

	  this._update();

	  return this;
	};

	UInt.prototype.parse_bits = function (j) {
	  return this.parse_bytes(sjclcodec.bytes.fromBits(j));
	};

	UInt.prototype.parse_bytes = function (j) {
	  if (Array.isArray(j) && j.length === this.constructor.width) {
	    this._value = new BN(j);
	  } else {
	    this._value = NaN;
	  }

	  this._update();

	  return this;
	};

	UInt.prototype.parse_json = UInt.prototype.parse_hex;

	UInt.prototype.parse_number = function (j) {
	  this._value = NaN;

	  if (typeof j === 'number' && isFinite(j) && j >= 0) {
	    this._value = new BN(j);
	  }

	  this._update();

	  return this;
	};

	// Convert from internal form.
	UInt.prototype.to_bytes = function () {
	  if (!this.is_valid()) {
	    return null;
	  }

	  return this._value.toArray('be', this.constructor.width);
	};

	UInt.prototype.to_hex = function () {
	  if (!this.is_valid()) {
	    return null;
	  }

	  return utils.arrayToHex(this.to_bytes());
	};

	UInt.prototype.to_json = UInt.prototype.to_hex;

	// Convert from internal form.
	UInt.prototype.to_bits = function () {
	  if (!this.is_valid()) {
	    return null;
	  }

	  return sjclcodec.bytes.toBits(this.to_bytes());
	};

	exports.UInt = UInt;

	// vim:sw=2:sts=2:ts=8:et

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// If there is no WebSocket, try MozWebSocket (support for some old browsers)
	"use strict";

	try {
	  module.exports = WebSocket;
	} catch (err) {
	  module.exports = MozWebSocket;
	}

	// Some versions of Safari Mac 5 and Safari iOS 4 seem to support websockets,
	// but can't communicate with websocketpp, which is what rippled uses.
	//
	// Note that we check for both the WebSocket protocol version the browser seems
	// to implement as well as the user agent etc. The reason is that we want to err
	// on the side of trying to connect since we don't want to accidentally disable
	// a browser that would normally work fine.
	var match,
	    versionRegexp = /Version\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//;
	if (
	// Is browser
	"object" === typeof navigator && "string" === typeof navigator.userAgent && (
	// Is Safari
	match = versionRegexp.exec(navigator.userAgent)) &&
	// And uses the old websocket protocol
	2 === window.WebSocket.CLOSED) {
	  // Is iOS
	  if (/iP(hone|od|ad)/.test(navigator.platform)) {
	    // Below version 5 is broken
	    if (+match[1] < 5) {
	      module.exports = void 0;
	    }
	    // Is any other Mac OS
	    // If you want to refactor this code, be careful, iOS user agents contain the
	    // string "like Mac OS X".
	  } else if (navigator.appVersion.indexOf("Mac") !== -1) {
	      // Below version 6 is broken
	      if (+match[1] < 6) {
	        module.exports = void 0;
	      }
	    }
	}

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(81);
	var hashprefixes = __webpack_require__(53);

	var UInt256 = __webpack_require__(12).UInt256;
	var SerializedObject = __webpack_require__(15).SerializedObject;

	/**
	 * Abstract class representing a node in a SHAMap tree.
	 *
	 * Can be either SHAMapTreeNodeInner or SHAMapTreeNodeLeaf.
	 *
	 * @class
	 */
	function SHAMapTreeNode() {}

	SHAMapTreeNode.TYPE_INNER = 1;
	SHAMapTreeNode.TYPE_TRANSACTION_NM = 2;
	SHAMapTreeNode.TYPE_TRANSACTION_MD = 3;
	SHAMapTreeNode.TYPE_ACCOUNT_STATE = 4;

	/**
	* @param {String} tag (64 hexadecimal characters)
	* @param {SHAMapTreeNode} node
	* @return {void}
	* @virtual
	*/
	/*eslint-disable no-unused-vars*/
	SHAMapTreeNode.prototype.add_item = function (tag, node) {
	  throw new Error('Called unimplemented virtual method SHAMapTreeNode#add_item.');
	};
	/*eslint-enable no-unused-vars*/

	SHAMapTreeNode.prototype.hash = function () {
	  throw new Error('Called unimplemented virtual method SHAMapTreeNode#hash.');
	};

	/**
	 * Inner (non-leaf) node in a SHAMap tree.
	 * @param {Number} depth (i.e. how many parent inner nodes)
	 * @class
	 */
	function SHAMapTreeNodeInner(depth) {
	  SHAMapTreeNode.call(this);

	  this.leaves = {};

	  this.type = SHAMapTreeNode.INNER;
	  this.depth = depth === undefined ? 0 : depth;

	  this.empty = true;
	}

	util.inherits(SHAMapTreeNodeInner, SHAMapTreeNode);

	/**
	 * @param {String} tag (equates to a ledger entry `index`)
	 * @param {SHAMapTreeNode} node (to add)
	 * @return {void}
	 */
	SHAMapTreeNodeInner.prototype.add_item = function (tag, node) {
	  var depth = this.depth;
	  var existing_node = this.get_node(tag[depth]);

	  if (existing_node) {
	    // A node already exists in this slot
	    if (existing_node instanceof SHAMapTreeNodeInner) {
	      // There is an inner node, so we need to go deeper
	      existing_node.add_item(tag, node);
	    } else if (existing_node.tag === tag) {
	      // Collision
	      throw new Error('Tried to add a node to a SHAMap that was already in there.');
	    } else {
	      // Turn it into an inner node
	      var new_inner_node = new SHAMapTreeNodeInner(depth + 1);

	      // Parent new and existing node
	      new_inner_node.add_item(existing_node.tag, existing_node);
	      new_inner_node.add_item(tag, node);

	      // And place the newly created inner node in the slot
	      this.set_node(tag[depth], new_inner_node);
	    }
	  } else {
	    // Neat, we have a nice open spot for the new node
	    this.set_node(tag[depth], node);
	  }
	};

	/**
	 * Overwrite the node that is currently in a given slot.
	 * @param {String} slot (a character 0-F)
	 * @param {SHAMapTreeNode} node (to place)
	 * @return {void}
	 */
	SHAMapTreeNodeInner.prototype.set_node = function (slot, node) {
	  this.leaves[slot] = node;
	  this.empty = false;
	};

	SHAMapTreeNodeInner.prototype.get_node = function (slot) {
	  return this.leaves[slot];
	};

	SHAMapTreeNodeInner.prototype.hash = function () {
	  if (this.empty) {
	    return UInt256.from_hex(UInt256.HEX_ZERO);
	  }

	  var hash_buffer = new SerializedObject();

	  for (var i = 0; i < 16; i++) {
	    var leafHash = UInt256.from_hex(UInt256.HEX_ZERO);
	    var slot = i.toString(16).toUpperCase();

	    if (typeof this.leaves[slot] === 'object') {
	      leafHash = this.leaves[slot].hash();
	    }

	    hash_buffer.append(leafHash.to_bytes());
	  }

	  var hash = hash_buffer.hash(hashprefixes.HASH_INNER_NODE);

	  return UInt256.from_bits(hash);
	};

	/**
	 * Leaf node in a SHAMap tree.
	 * @param {String} tag (equates to a ledger entry `index`)
	 * @param {SerializedObject} node (bytes of account state, transaction etc)
	 * @param {Number} type (one of TYPE_ACCOUNT_STATE, TYPE_TRANSACTION_MD etc)
	 * @class
	 */
	function SHAMapTreeNodeLeaf(tag, node, type) {
	  SHAMapTreeNode.call(this);

	  if (typeof tag !== 'string') {
	    throw new Error('Tag is unexpected type.');
	  }

	  this.tag = tag;
	  this.tag_bytes = UInt256.from_hex(this.tag).to_bytes();
	  this.type = type;
	  this.node = node;
	}

	util.inherits(SHAMapTreeNodeLeaf, SHAMapTreeNode);

	SHAMapTreeNodeLeaf.prototype.hash = function () {
	  var buffer = new SerializedObject();
	  switch (this.type) {
	    case SHAMapTreeNode.TYPE_ACCOUNT_STATE:
	      buffer.append(this.node);
	      buffer.append(this.tag_bytes);
	      return buffer.hash(hashprefixes.HASH_LEAF_NODE);
	    case SHAMapTreeNode.TYPE_TRANSACTION_NM:
	      return this.tag_bytes;
	    case SHAMapTreeNode.TYPE_TRANSACTION_MD:
	      buffer.append(this.node);
	      buffer.append(this.tag_bytes);
	      return buffer.hash(hashprefixes.HASH_TX_NODE);
	    default:
	      throw new Error('Tried to hash a SHAMap node of unknown type.');
	  }
	};

	function SHAMap() {
	  this.root = new SHAMapTreeNodeInner(0);
	}

	SHAMap.prototype.add_item = function (tag, node, type) {
	  node = new SHAMapTreeNodeLeaf(tag, node, type);
	  this.root.add_item(tag, node);
	};

	SHAMap.prototype.hash = function () {
	  return this.root.hash();
	};

	exports.SHAMap = SHAMap;
	exports.SHAMapTreeNode = SHAMapTreeNode;
	exports.SHAMapTreeNodeInner = SHAMapTreeNodeInner;
	exports.SHAMapTreeNodeLeaf = SHAMapTreeNodeLeaf;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Ripple ledger namespace prefixes.
	 *
	 * The Ripple ledger is a key-value store. In order to avoid name collisions,
	 * names are partitioned into namespaces.
	 *
	 * Each namespace is just a single character prefix.
	 */
	'use strict';

	module.exports = {
	  account: 'a',
	  dirNode: 'd',
	  generatorMap: 'g',
	  nickname: 'n',
	  rippleState: 'r',
	  offer: 'o', // Entry for an offer.
	  ownerDir: 'O', // Directory of things owned by an account.
	  bookDir: 'B', // Directory of order books.
	  contract: 'c',
	  skipList: 's',
	  amendment: 'f',
	  feeSettings: 'e'
	};

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var assert = __webpack_require__(75);
	var utils = __webpack_require__(68);
	var parsePayment = __webpack_require__(102);
	var parseTrustline = __webpack_require__(103);
	var parseOrder = __webpack_require__(104);
	var parseOrderCancellation = __webpack_require__(105);
	var parseSettings = __webpack_require__(106);

	function parseTransactionType(type) {
	  var mapping = {
	    Payment: 'payment',
	    TrustSet: 'trustline',
	    OfferCreate: 'order',
	    OfferCancel: 'orderCancellation',
	    AccountSet: 'settings',
	    SetRegularKey: 'settings'
	  };
	  return mapping[type] || null;
	}

	function parseTransaction(tx) {
	  var type = parseTransactionType(tx.TransactionType);
	  var mapping = {
	    'payment': parsePayment,
	    'trustline': parseTrustline,
	    'order': parseOrder,
	    'orderCancellation': parseOrderCancellation,
	    'settings': parseSettings
	  };
	  var parser = mapping[type];
	  assert(parser !== undefined, 'Unrecognized transaction type');
	  var specification = parser(tx);
	  var outcome = utils.parseOutcome(tx);
	  return utils.removeUndefined({
	    type: type,
	    address: tx.Account,
	    sequence: tx.Sequence,
	    id: tx.hash,
	    specification: utils.removeUndefined(specification),
	    outcome: outcome ? utils.removeUndefined(outcome) : undefined
	  });
	}

	module.exports = parseTransaction;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(68);

	// rippled 'account_lines' returns a different format for
	// trustlines than 'tx'
	function parseAccountTrustline(trustline) {
	  var specification = utils.removeUndefined({
	    limit: trustline.limit,
	    currency: trustline.currency,
	    counterparty: trustline.account,
	    qualityIn: trustline.quality_in || undefined,
	    qualityOut: trustline.quality_out || undefined,
	    ripplingDisabled: trustline.no_ripple || undefined,
	    frozen: trustline.freeze || undefined,
	    authorized: trustline.authorized || undefined
	  });
	  // rippled doesn't provide the counterparty's qualities
	  var counterparty = utils.removeUndefined({
	    limit: trustline.limit_peer,
	    ripplingDisabled: trustline.no_ripple_peer || undefined,
	    frozen: trustline.freeze_peer || undefined,
	    authorized: trustline.peer_authorized || undefined
	  });
	  var state = {
	    balance: trustline.balance
	  };
	  return { specification: specification, counterparty: counterparty, state: state };
	}

	module.exports = parseAccountTrustline;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var parseAmount = __webpack_require__(107);

	function parsePaths(paths) {
	  return paths.map(function (steps) {
	    return steps.map(function (step) {
	      return _.omit(step, ['type', 'type_hex']);
	    });
	  });
	}

	function parsePathfind(sourceAddress, destinationAmount, pathfindResult) {
	  return pathfindResult.alternatives.map(function (alternative) {
	    return {
	      source: {
	        address: sourceAddress,
	        amount: parseAmount(alternative.source_amount)
	      },
	      destination: {
	        address: pathfindResult.destination_account,
	        amount: destinationAmount
	      },
	      paths: JSON.stringify(parsePaths(alternative.paths_computed))
	    };
	  });
	}

	module.exports = parsePathfind;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(68);
	var flags = utils.core.Remote.flags.offer;
	var parseAmount = __webpack_require__(107);
	var BigNumber = __webpack_require__(96);

	// TODO: remove this function once rippled provides quality directly
	function computeQuality(takerGets, takerPays) {
	  var quotient = new BigNumber(takerPays.value).dividedBy(takerGets.value);
	  return quotient.toDigits(16, BigNumber.ROUND_HALF_UP).toString();
	}

	// rippled 'account_offers' returns a different format for orders than 'tx'
	// the flags are also different
	function parseAccountOrder(address, order) {
	  var direction = (order.flags & flags.Sell) === 0 ? 'buy' : 'sell';
	  var takerGetsAmount = parseAmount(order.taker_gets);
	  var takerPaysAmount = parseAmount(order.taker_pays);
	  var quantity = direction === 'buy' ? takerPaysAmount : takerGetsAmount;
	  var totalPrice = direction === 'buy' ? takerGetsAmount : takerPaysAmount;

	  // note: immediateOrCancel and fillOrKill orders cannot enter the order book
	  // so we can omit those flags here
	  var specification = utils.removeUndefined({
	    direction: direction,
	    quantity: quantity,
	    totalPrice: totalPrice,
	    passive: (order.flags & flags.Passive) !== 0 || undefined
	  });

	  var properties = {
	    maker: address,
	    sequence: order.seq,
	    makerExchangeRate: computeQuality(takerGetsAmount, takerPaysAmount)
	  };

	  return { specification: specification, properties: properties };
	}

	module.exports = parseAccountOrder;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var utils = __webpack_require__(68);
	var flags = utils.core.Remote.flags.offer;
	var parseAmount = __webpack_require__(107);

	function parseOrderbookOrder(order) {
	  var direction = (order.Flags & flags.Sell) === 0 ? 'buy' : 'sell';
	  var takerGetsAmount = parseAmount(order.TakerGets);
	  var takerPaysAmount = parseAmount(order.TakerPays);
	  var quantity = direction === 'buy' ? takerPaysAmount : takerGetsAmount;
	  var totalPrice = direction === 'buy' ? takerGetsAmount : takerPaysAmount;

	  // note: immediateOrCancel and fillOrKill orders cannot enter the order book
	  // so we can omit those flags here
	  var specification = utils.removeUndefined({
	    direction: direction,
	    quantity: quantity,
	    totalPrice: totalPrice,
	    passive: (order.Flags & flags.Passive) !== 0 || undefined
	  });

	  var properties = {
	    maker: order.Account,
	    sequence: order.Sequence,
	    makerExchangeRate: utils.adjustQualityForXRP(order.quality, takerGetsAmount.currency, takerPaysAmount.currency)
	  };

	  var takerGetsFunded = order.taker_gets_funded ? parseAmount(order.taker_gets_funded) : undefined;
	  var takerPaysFunded = order.taker_pays_funded ? parseAmount(order.taker_pays_funded) : undefined;
	  var available = utils.removeUndefined({
	    fundedAmount: takerGetsFunded,
	    priceOfFundedAmount: takerPaysFunded
	  });
	  var state = _.isEmpty(available) ? undefined : available;
	  return utils.removeUndefined({ specification: specification, properties: properties, state: state });
	}

	module.exports = parseOrderbookOrder;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	'use strict';
	var BigNumber = __webpack_require__(96);
	var AccountFields = __webpack_require__(68).constants.AccountFields;

	function parseField(info, value) {
	  if (info.encoding === 'hex' && !info.length) {
	    return new Buffer(value, 'hex').toString('ascii');
	  }
	  if (info.shift) {
	    return new BigNumber(value).shift(-info.shift).toNumber();
	  }
	  return value;
	}

	function parseFields(data) {
	  var settings = {};
	  for (var fieldName in AccountFields) {
	    var fieldValue = data[fieldName];
	    if (fieldValue !== undefined) {
	      var info = AccountFields[fieldName];
	      settings[info.name] = parseField(info, fieldValue);
	    }
	  }
	  return settings;
	}

	module.exports = parseFields;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var transactionParser = __webpack_require__(119);
	var toTimestamp = __webpack_require__(18).toTimestamp;
	var utils = __webpack_require__(48);
	var BigNumber = __webpack_require__(96);

	function adjustQualityForXRP(quality, takerGetsCurrency, takerPaysCurrency) {
	  // quality = takerPays.value/takerGets.value
	  // using drops (1e-6 XRP) for XRP values
	  var numeratorShift = takerPaysCurrency === 'XRP' ? -6 : 0;
	  var denominatorShift = takerGetsCurrency === 'XRP' ? -6 : 0;
	  var shift = numeratorShift - denominatorShift;
	  return shift === 0 ? quality : new BigNumber(quality).shift(shift).toString();
	}

	function parseTimestamp(tx) {
	  return tx.date ? new Date(toTimestamp(tx.date)).toISOString() : undefined;
	}

	function removeUndefined(obj) {
	  return _.omit(obj, _.isUndefined);
	}

	function removeEmptyCounterparty(amount) {
	  if (amount.counterparty === '') {
	    delete amount.counterparty;
	  }
	}

	function removeEmptyCounterpartyInBalanceChanges(balanceChanges) {
	  _.forEach(balanceChanges, function (changes) {
	    _.forEach(changes, removeEmptyCounterparty);
	  });
	}

	function removeEmptyCounterpartyInOrderbookChanges(orderbookChanges) {
	  _.forEach(orderbookChanges, function (changes) {
	    _.forEach(changes, function (change) {
	      _.forEach(change, removeEmptyCounterparty);
	    });
	  });
	}

	function parseOutcome(tx) {
	  if (!tx.validated) {
	    return undefined;
	  }

	  var balanceChanges = transactionParser.parseBalanceChanges(tx.meta);
	  var orderbookChanges = transactionParser.parseOrderbookChanges(tx.meta);
	  removeEmptyCounterpartyInBalanceChanges(balanceChanges);
	  removeEmptyCounterpartyInOrderbookChanges(orderbookChanges);

	  return {
	    result: tx.meta.TransactionResult,
	    timestamp: parseTimestamp(tx),
	    fee: utils.common.dropsToXrp(tx.Fee),
	    balanceChanges: balanceChanges,
	    orderbookChanges: orderbookChanges,
	    ledgerVersion: tx.ledger_index,
	    indexInLedger: tx.meta.TransactionIndex
	  };
	}

	module.exports = {
	  parseOutcome: parseOutcome,
	  removeUndefined: removeUndefined,
	  adjustQualityForXRP: adjustQualityForXRP,
	  dropsToXrp: utils.common.dropsToXrp,
	  constants: utils.common.constants,
	  core: utils.common.core
	};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var removeUndefined = __webpack_require__(68).removeUndefined;
	var parseTransaction = __webpack_require__(62);

	function parseTransactions(transactions) {
	  if (_.isEmpty(transactions)) {
	    return {};
	  }
	  if (_.isString(transactions[0])) {
	    return { transactionHashes: transactions };
	  }
	  return {
	    transactions: _.map(transactions, parseTransaction),
	    rawTransactions: JSON.stringify(transactions)
	  };
	}

	function parseState(state) {
	  if (_.isEmpty(state)) {
	    return {};
	  }
	  if (_.isString(state[0])) {
	    return { stateHashes: state };
	  }
	  return { rawState: JSON.stringify(state) };
	}

	function parseLedger(ledger) {
	  return removeUndefined(_.assign({
	    accepted: ledger.accepted,
	    closed: ledger.closed,
	    stateHash: ledger.account_hash,
	    closeTime: ledger.close_time,
	    closeTimeResolution: ledger.close_time_resolution,
	    closeFlags: ledger.close_flags,
	    ledgerHash: ledger.hash || ledger.ledger_hash,
	    ledgerVersion: parseInt(ledger.ledger_index || ledger.seqNum, 10),
	    parentLedgerHash: ledger.parent_hash,
	    parentCloseTime: ledger.parent_close_time,
	    totalDrops: ledger.total_coins || ledger.totalCoins,
	    transactionHash: ledger.transaction_hash
	  }, parseTransactions(ledger.transactions), parseState(ledger.accountState)));
	}

	module.exports = parseLedger;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var BigNumber = __webpack_require__(96);
	var core = __webpack_require__(1);
	var errors = __webpack_require__(71);
	var es6promisify = __webpack_require__(120);
	var keypairs = __webpack_require__(99);

	function dropsToXrp(drops) {
	  return new BigNumber(drops).dividedBy(1000000.0).toString();
	}

	function xrpToDrops(xrp) {
	  return new BigNumber(xrp).times(1000000.0).floor().toString();
	}

	function toRippledAmount(amount) {
	  if (amount.currency === 'XRP') {
	    return xrpToDrops(amount.value);
	  }
	  return {
	    currency: amount.currency,
	    issuer: amount.counterparty ? amount.counterparty : amount.issuer,
	    value: amount.value
	  };
	}

	function generateAddress(options) {
	  var _keypairs$generateWallet = keypairs.generateWallet(options);

	  var accountID = _keypairs$generateWallet.accountID;
	  var seed = _keypairs$generateWallet.seed;

	  return { secret: seed, address: accountID };
	}

	function wrapCatch(asyncFunction) {
	  return function () {
	    try {
	      asyncFunction.apply(this, arguments);
	    } catch (error) {
	      var callback = arguments[arguments.length - 1];
	      callback(error);
	    }
	  };
	}

	function composeAsync(wrapper, callback) {
	  return function (error, data) {
	    if (error) {
	      callback(error);
	      return;
	    }
	    var result = undefined;
	    try {
	      result = wrapper(data);
	    } catch (exception) {
	      callback(exception);
	      return;
	    }
	    callback(null, result);
	  };
	}

	function convertErrors(callback) {
	  return function (error, data) {
	    if (error && !(error instanceof errors.RippleError)) {
	      callback(new errors.RippleError(error));
	    } else {
	      callback(error, data);
	    }
	  };
	}

	function convertExceptions(f) {
	  return function () {
	    try {
	      return f.apply(this, arguments);
	    } catch (error) {
	      throw new errors.ApiError(error.message);
	    }
	  };
	}

	var FINDSNAKE = /([a-zA-Z]_[a-zA-Z])/g;
	function convertKeysFromSnakeCaseToCamelCase(obj) {
	  if (typeof obj === 'object') {
	    var _ret = (function () {
	      var newKey = undefined;
	      return {
	        v: _.reduce(obj, function (result, value, key) {
	          newKey = key;
	          if (FINDSNAKE.test(key)) {
	            newKey = key.replace(FINDSNAKE, function (r) {
	              return r[0] + r[2].toUpperCase();
	            });
	          }
	          result[newKey] = convertKeysFromSnakeCaseToCamelCase(value);
	          return result;
	        }, {})
	      };
	    })();

	    if (typeof _ret === 'object') return _ret.v;
	  }
	  return obj;
	}

	function promisify(asyncFunction) {
	  return es6promisify(wrapCatch(asyncFunction));
	}

	module.exports = {
	  core: core,
	  dropsToXrp: dropsToXrp,
	  xrpToDrops: xrpToDrops,
	  toRippledAmount: toRippledAmount,
	  generateAddress: generateAddress,
	  composeAsync: composeAsync,
	  wrapCatch: wrapCatch,
	  convertExceptions: convertExceptions,
	  convertErrors: convertErrors,
	  convertKeysFromSnakeCaseToCamelCase: convertKeysFromSnakeCaseToCamelCase,
	  promisify: promisify
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable valid-jsdoc */
	'use strict';

	/**
	 * Base class for all errors
	 */
	function RippleError(message) {
	  this.message = message;
	}
	RippleError.prototype = new Error();
	RippleError.prototype.name = 'RippleError';

	function ValidationError(message) {
	  this.message = message;
	}
	ValidationError.prototype = new RippleError();
	ValidationError.prototype.name = 'ValidationError';

	/**
	 * Timeout, disconnects and too busy
	 */
	function NetworkError(message) {
	  this.message = message;
	}
	NetworkError.prototype = new RippleError();
	NetworkError.prototype.name = 'NetworkError';

	/**
	 * Failed transactions, no paths found, not enough balance, etc.
	 */
	function RippledNetworkError(message) {
	  this.message = message !== undefined ? message : 'Cannot connect to rippled';
	}
	RippledNetworkError.prototype = new NetworkError();

	/**
	 * Failed transactions, no paths found, not enough balance, etc.
	 */
	function TransactionError(message) {
	  this.message = message;
	}
	TransactionError.prototype = new RippleError();
	TransactionError.prototype.name = 'TransactionError';

	/**
	 * Asset could not be found
	 */
	function NotFoundError(message) {
	  this.message = message;
	}
	NotFoundError.prototype = new RippleError();
	NotFoundError.prototype.name = 'NotFoundError';

	function MissingLedgerHistoryError(message) {
	  this.message = message || 'Server is missing ledger history in the specified range';
	}
	MissingLedgerHistoryError.prototype = new RippleError();
	MissingLedgerHistoryError.prototype.name = 'MissingLedgerHistoryError';

	/**
	 * Request timed out
	 */
	function TimeOutError(message) {
	  this.message = message;
	}
	TimeOutError.prototype = new RippleError();
	TimeOutError.prototype.name = 'TimeOutError';

	/**
	 * API logic failed to do what it intended
	 */
	function ApiError(message) {
	  this.message = message;
	}
	ApiError.prototype = new RippleError();
	ApiError.prototype.name = 'ApiError';

	module.exports = {
	  ValidationError: ValidationError,
	  NetworkError: NetworkError,
	  TransactionError: TransactionError,
	  RippledNetworkError: RippledNetworkError,
	  NotFoundError: NotFoundError,
	  MissingLedgerHistoryError: MissingLedgerHistoryError,
	  TimeOutError: TimeOutError,
	  ApiError: ApiError,
	  RippleError: RippleError
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var core = __webpack_require__(70).core;
	var flagIndices = core.Transaction.set_clear_flags.AccountSet;
	var flags = core.Remote.flags.account_root;

	var AccountFlags = {
	  passwordSpent: flags.PasswordSpent,
	  requireDestinationTag: flags.RequireDestTag,
	  requireAuthorization: flags.RequireAuth,
	  disallowIncomingXRP: flags.DisallowXRP,
	  disableMasterKey: flags.DisableMaster,
	  noFreeze: flags.NoFreeze,
	  globalFreeze: flags.GlobalFreeze,
	  defaultRipple: flags.DefaultRipple
	};

	var AccountFlagIndices = {
	  requireDestinationTag: flagIndices.asfRequireDest,
	  requireAuthorization: flagIndices.asfRequireAuth,
	  disallowIncomingXRP: flagIndices.asfDisallowXRP,
	  disableMasterKey: flagIndices.asfDisableMaster,
	  enableTransactionIDTracking: flagIndices.asfAccountTxnID,
	  noFreeze: flagIndices.asfNoFreeze,
	  globalFreeze: flagIndices.asfGlobalFreeze,
	  defaultRipple: flagIndices.asfDefaultRipple
	};

	var AccountFields = {
	  EmailHash: { name: 'emailHash', encoding: 'hex',
	    length: 32, defaults: '0' },
	  WalletLocator: { name: 'walletLocator', encoding: 'hex',
	    length: 64, defaults: '0' },
	  WalletSize: { name: 'walletSize', defaults: 0 },
	  MessageKey: { name: 'messageKey' },
	  Domain: { name: 'domain', encoding: 'hex' },
	  TransferRate: { name: 'transferRate', defaults: 0, shift: 9 },
	  Signers: { name: 'signers' }
	};

	module.exports = {
	  AccountFields: AccountFields,
	  AccountFlagIndices: AccountFlagIndices,
	  AccountFlags: AccountFlags
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var core = __webpack_require__(70).core;
	var ValidationError = __webpack_require__(71).ValidationError;
	var schemaValidate = __webpack_require__(49).schemaValidate;

	function error(text) {
	  return new ValidationError(text);
	}

	function validateAddressAndSecret(obj) {
	  var address = obj.address;
	  var secret = obj.secret;
	  schemaValidate('address', address);
	  if (!secret) {
	    throw error('Parameter missing: secret');
	  }
	  if (!core.Seed.from_json(secret).is_valid()) {
	    throw error('secret is invalid');
	  }
	}

	function validateSecret(secret) {
	  if (!secret) {
	    throw error('Parameter missing: secret');
	  }
	  if (typeof secret !== 'string' || secret[0] !== 's') {
	    throw error('Invalid parameter');
	  }

	  var seed = new core.Seed().parse_base58(secret);
	  if (!seed.is_valid()) {
	    throw error('invalid seed');
	  }
	}

	function validateLedgerRange(options) {
	  if (!_.isUndefined(options.minLedgerVersion) && !_.isUndefined(options.maxLedgerVersion)) {
	    if (Number(options.minLedgerVersion) > Number(options.maxLedgerVersion)) {
	      throw error('minLedgerVersion must not be greater than maxLedgerVersion');
	    }
	  }
	}

	function validateOptions(schema, options) {
	  schemaValidate(schema, options);
	  validateLedgerRange(options);
	}

	module.exports = {
	  address: _.partial(schemaValidate, 'address'),
	  addressAndSecret: validateAddressAndSecret,
	  secret: validateSecret,
	  currency: _.partial(schemaValidate, 'currency'),
	  identifier: _.partial(schemaValidate, 'hash256'),
	  ledgerVersion: _.partial(schemaValidate, 'ledgerVersion'),
	  sequence: _.partial(schemaValidate, 'sequence'),
	  order: _.partial(schemaValidate, 'order'),
	  orderbook: _.partial(schemaValidate, 'orderbook'),
	  payment: _.partial(schemaValidate, 'payment'),
	  pathfind: _.partial(schemaValidate, 'pathfind'),
	  settings: _.partial(schemaValidate, 'settings'),
	  trustline: _.partial(schemaValidate, 'trustline'),
	  txJSON: _.partial(schemaValidate, 'tx'),
	  blob: _.partial(schemaValidate, 'blob'),
	  getTransactionsOptions: _.partial(validateOptions, 'transactions-options'),
	  getSettingsOptions: _.partial(validateOptions, 'settings-options'),
	  getAccountInfoOptions: _.partial(validateOptions, 'settings-options'),
	  getTrustlinesOptions: _.partial(validateOptions, 'trustlines-options'),
	  getBalancesOptions: _.partial(validateOptions, 'trustlines-options'),
	  getOrdersOptions: _.partial(validateOptions, 'orders-options'),
	  getOrderbookOptions: _.partial(validateOptions, 'orders-options'),
	  getTransactionOptions: _.partial(validateOptions, 'transaction-options'),
	  getLedgerOptions: _.partial(validateOptions, 'ledger-options'),
	  options: _.partial(validateOptions, 'options'),
	  remoteOptions: _.partial(schemaValidate, 'remote-options'),
	  instructions: _.partial(schemaValidate, 'instructions')
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var BigNumber = __webpack_require__(96);
	var common = __webpack_require__(50);

	function setTransactionBitFlags(transaction, values, flags) {
	  for (var flagName in flags) {
	    var flagValue = values[flagName];
	    var flagConversions = flags[flagName];

	    if (flagValue === true && flagConversions.set !== undefined) {
	      transaction.setFlags(flagConversions.set);
	    }
	    if (flagValue === false && flagConversions.unset !== undefined) {
	      transaction.setFlags(flagConversions.unset);
	    }
	  }
	}

	function getFeeDrops(remote) {
	  var feeUnits = 10; // all transactions currently have a fee of 10 fee units
	  return remote.feeTx(feeUnits).to_text();
	}

	function createTxJSON(transaction, remote, instructions, callback) {
	  common.validate.instructions(instructions);

	  transaction.complete();
	  var account = transaction.getAccount();
	  var txJSON = transaction.tx_json;

	  if (instructions.maxLedgerVersion !== undefined) {
	    txJSON.LastLedgerSequence = parseInt(instructions.maxLedgerVersion, 10);
	  } else {
	    var offset = instructions.maxLedgerVersionOffset !== undefined ? parseInt(instructions.maxLedgerVersionOffset, 10) : 3;
	    txJSON.LastLedgerSequence = remote.getLedgerSequence() + offset;
	  }

	  if (instructions.fee !== undefined) {
	    txJSON.Fee = common.xrpToDrops(instructions.fee);
	  } else {
	    var serverFeeDrops = getFeeDrops(remote);
	    if (instructions.maxFee !== undefined) {
	      var maxFeeDrops = common.xrpToDrops(instructions.maxFee);
	      txJSON.Fee = BigNumber.min(serverFeeDrops, maxFeeDrops).toString();
	    } else {
	      txJSON.Fee = serverFeeDrops;
	    }
	  }

	  if (instructions.sequence !== undefined) {
	    txJSON.Sequence = parseInt(instructions.sequence, 10);
	    callback(null, txJSON);
	  } else {
	    remote.findAccount(account).getNextSequence(function (error, sequence) {
	      txJSON.Sequence = sequence;
	      callback(null, txJSON);
	    });
	  }
	}

	module.exports = {
	  setTransactionBitFlags: setTransactionBitFlags,
	  createTxJSON: createTxJSON,
	  common: common,
	  promisify: common.promisify
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(81);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	function isPlainObject(obj) {
		if (!obj || toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval)
			return false;

		var has_own_constructor = hasOwn.call(obj, 'constructor');
		var has_is_property_of_method = hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !has_own_constructor && !has_is_property_of_method)
			return false;

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	};

	module.exports = function extend() {
		var options, name, src, copy, copyIsArray, clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && typeof target !== "function") {
			target = {};
		}

		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( isPlainObject(copy) || (copyIsArray = Array.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray(src) ? src : [];

						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(109).codec;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(137)
	var ieee754 = __webpack_require__(130)
	var isArray = __webpack_require__(132)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(128);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(131);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(118);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(138);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(129)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129)))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var genobj = __webpack_require__(133)
	var genfun = __webpack_require__(134)
	var jsonpointer = __webpack_require__(139)
	var xtend = __webpack_require__(140)
	var formats = __webpack_require__(110)

	var get = function(obj, additionalSchemas, ptr) {
	  if (/^https?:\/\//.test(ptr)) return null

	  var visit = function(sub) {
	    if (sub && sub.id === ptr) return sub
	    if (typeof sub !== 'object' || !sub) return null
	    return Object.keys(sub).reduce(function(res, k) {
	      return res || visit(sub[k])
	    }, null)
	  }

	  var res = visit(obj)
	  if (res) return res

	  ptr = ptr.replace(/^#/, '')
	  ptr = ptr.replace(/\/$/, '')

	  try {
	    return jsonpointer.get(obj, decodeURI(ptr))
	  } catch (err) {
	    var end = ptr.indexOf('#')
	    var other
	    // external reference
	    if (end !== 0) {
	      // fragment doesn't exist.
	      if (end === -1) {
	        other = additionalSchemas[ptr]
	      } else {
	        var ext = ptr.slice(0, end)
	        other = additionalSchemas[ext]
	        var fragment = ptr.slice(end).replace(/^#/, '')
	        try {
	          return jsonpointer.get(other, fragment)
	        } catch (err) {}
	      }
	    } else {
	      other = additionalSchemas[ptr]
	    }
	    return other || null
	  }
	}

	var formatName = function(field) {
	  field = JSON.stringify(field)
	  var pattern = /\[([^\[\]"]+)\]/
	  while (pattern.test(field)) field = field.replace(pattern, '."+$1+"')
	  return field
	}

	var types = {}

	types.any = function() {
	  return 'true'
	}

	types.null = function(name) {
	  return name+' === null'
	}

	types.boolean = function(name) {
	  return 'typeof '+name+' === "boolean"'
	}

	types.array = function(name) {
	  return 'Array.isArray('+name+')'
	}

	types.object = function(name) {
	  return 'typeof '+name+' === "object" && '+name+' && !Array.isArray('+name+')'
	}

	types.number = function(name) {
	  return 'typeof '+name+' === "number"'
	}

	types.integer = function(name) {
	  return 'typeof '+name+' === "number" && (Math.floor('+name+') === '+name+' || '+name+' > 9007199254740992 || '+name+' < -9007199254740992)'
	}

	types.string = function(name) {
	  return 'typeof '+name+' === "string"'
	}

	var unique = function(array) {
	  var list = []
	  for (var i = 0; i < array.length; i++) {
	    list.push(typeof array[i] === 'object' ? JSON.stringify(array[i]) : array[i])
	  }
	  for (var i = 1; i < list.length; i++) {
	    if (list.indexOf(list[i]) !== i) return false
	  }
	  return true
	}

	var toType = function(node) {
	  return node.type
	}

	var compile = function(schema, cache, root, reporter, opts) {
	  var fmts = opts ? xtend(formats, opts.formats) : formats
	  var scope = {unique:unique, formats:fmts}
	  var verbose = opts ? !!opts.verbose : false;
	  var greedy = opts && opts.greedy !== undefined ?
	    opts.greedy : false;

	  var syms = {}
	  var gensym = function(name) {
	    return name+(syms[name] = (syms[name] || 0)+1)
	  }

	  var reversePatterns = {}
	  var patterns = function(p) {
	    if (reversePatterns[p]) return reversePatterns[p]
	    var n = gensym('pattern')
	    scope[n] = new RegExp(p)
	    reversePatterns[p] = n
	    return n
	  }

	  var vars = ['i','j','k','l','m','n','o','p','q','r','s','t','u','v','x','y','z']
	  var genloop = function() {
	    var v = vars.shift()
	    vars.push(v+v[0])
	    return v
	  }

	  var visit = function(name, node, reporter, filter) {
	    var properties = node.properties
	    var type = node.type
	    var tuple = false

	    if (Array.isArray(node.items)) { // tuple type
	      properties = {}
	      node.items.forEach(function(item, i) {
	        properties[i] = item
	      })
	      type = 'array'
	      tuple = true
	    }

	    var indent = 0
	    var error = function(msg, prop, value) {
	      validate('errors++')
	      if (reporter === true) {
	        validate('if (validate.errors === null) validate.errors = []')
	        if (verbose) {
	          validate('validate.errors.push({field:%s,message:%s,value:%s})', formatName(prop || name), JSON.stringify(msg), value || name)
	        } else {
	          validate('validate.errors.push({field:%s,message:%s})', formatName(prop || name), JSON.stringify(msg))
	        }
	      }
	    }

	    if (node.required === true) {
	      indent++
	      validate('if (%s === undefined) {', name)
	      error('is required')
	      validate('} else {')
	    } else {
	      indent++
	      validate('if (%s !== undefined) {', name)
	    }

	    var valid = [].concat(type)
	      .map(function(t) {
	        return types[t || 'any'](name)
	      })
	      .join(' || ') || 'true'

	    if (valid !== 'true') {
	      indent++
	      validate('if (!(%s)) {', valid)
	      error('is the wrong type')
	      validate('} else {')
	    }

	    if (tuple) {
	      if (node.additionalItems === false) {
	        validate('if (%s.length > %d) {', name, node.items.length)
	        error('has additional items')
	        validate('}')
	      } else if (node.additionalItems) {
	        var i = genloop()
	        validate('for (var %s = %d; %s < %s.length; %s++) {', i, node.items.length, i, name, i)
	        visit(name+'['+i+']', node.additionalItems, reporter, filter)
	        validate('}')
	      }   
	    }

	    if (node.format && fmts[node.format]) {
	      if (type !== 'string' && formats[node.format]) validate('if (%s) {', types.string(name))
	      var n = gensym('format')
	      scope[n] = fmts[node.format]

	      if (typeof scope[n] === 'function') validate('if (!%s(%s)) {', n, name)
	      else validate('if (!%s.test(%s)) {', n, name)
	      error('must be '+node.format+' format')
	      validate('}')
	      if (type !== 'string' && formats[node.format]) validate('}')
	    }

	    if (Array.isArray(node.required)) {
	      var isUndefined = function(req) {
	        return genobj(name, req) + ' === undefined'
	      }

	      var checkRequired = function (req) {
	        var prop = genobj(name, req);
	        validate('if (%s === undefined) {', prop)
	        error('is required', prop)
	        validate('missing++')
	        validate('}')
	      }
	      validate('if ((%s)) {', type !== 'object' ? types.object(name) : 'true')
	      validate('var missing = 0')
	      node.required.map(checkRequired)
	      validate('}');
	      if (!greedy) {
	        validate('if (missing === 0) {')
	        indent++
	      }
	    }

	    if (node.uniqueItems) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))
	      validate('if (!(unique(%s))) {', name)
	      error('must be unique')
	      validate('}')
	      if (type !== 'array') validate('}')
	    }

	    if (node.enum) {
	      var complex = node.enum.some(function(e) {
	        return typeof e === 'object'
	      })

	      var compare = complex ?
	        function(e) {
	          return 'JSON.stringify('+name+')'+' !== JSON.stringify('+JSON.stringify(e)+')'
	        } :
	        function(e) {
	          return name+' !== '+JSON.stringify(e)
	        }

	      validate('if (%s) {', node.enum.map(compare).join(' && ') || 'false')
	      error('must be an enum value')
	      validate('}')
	    }

	    if (node.dependencies) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))

	      Object.keys(node.dependencies).forEach(function(key) {
	        var deps = node.dependencies[key]
	        if (typeof deps === 'string') deps = [deps]

	        var exists = function(k) {
	          return genobj(name, k) + ' !== undefined'
	        }

	        if (Array.isArray(deps)) {
	          validate('if (%s !== undefined && !(%s)) {', genobj(name, key), deps.map(exists).join(' && ') || 'true')
	          error('dependencies not set')
	          validate('}')
	        }
	        if (typeof deps === 'object') {
	          validate('if (%s !== undefined) {', genobj(name, key))
	          visit(name, deps, reporter, filter)
	          validate('}')
	        }
	      })

	      if (type !== 'object') validate('}')
	    }

	    if (node.additionalProperties || node.additionalProperties === false) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))

	      var i = genloop()
	      var keys = gensym('keys')

	      var toCompare = function(p) {
	        return keys+'['+i+'] !== '+JSON.stringify(p)
	      }

	      var toTest = function(p) {
	        return '!'+patterns(p)+'.test('+keys+'['+i+'])'
	      }

	      var additionalProp = Object.keys(properties || {}).map(toCompare)
	        .concat(Object.keys(node.patternProperties || {}).map(toTest))
	        .join(' && ') || 'true'

	      validate('var %s = Object.keys(%s)', keys, name)
	        ('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i)
	          ('if (%s) {', additionalProp)

	      if (node.additionalProperties === false) {
	        if (filter) validate('delete %s', name+'['+keys+'['+i+']]')
	        error('has additional properties', null, JSON.stringify(name+'.') + ' + ' + keys + '['+i+']')
	      } else {
	        visit(name+'['+keys+'['+i+']]', node.additionalProperties, reporter, filter)
	      }

	      validate
	          ('}')
	        ('}')

	      if (type !== 'object') validate('}')
	    }

	    if (node.$ref) {
	      var sub = get(root, opts && opts.schemas || {}, node.$ref)
	      if (sub) {
	        var fn = cache[node.$ref]
	        if (!fn) {
	          cache[node.$ref] = function proxy(data) {
	            return fn(data)
	          }
	          fn = compile(sub, cache, root, false, opts)
	        }
	        var n = gensym('ref')
	        scope[n] = fn
	        validate('if (!(%s(%s))) {', n, name)
	        error('referenced schema does not match')
	        validate('}')
	      }
	    }

	    if (node.not) {
	      var prev = gensym('prev')
	      validate('var %s = errors', prev)
	      visit(name, node.not, false, filter)
	      validate('if (%s === errors) {', prev)
	      error('negative schema matches')
	      validate('} else {')
	        ('errors = %s', prev)
	      ('}')
	    }

	    if (node.items && !tuple) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))

	      var i = genloop()
	      validate('for (var %s = 0; %s < %s.length; %s++) {', i, i, name, i)
	      visit(name+'['+i+']', node.items, reporter, filter)
	      validate('}')

	      if (type !== 'array') validate('}')
	    }

	    if (node.patternProperties) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))
	      var keys = gensym('keys')
	      var i = genloop()
	      validate
	        ('var %s = Object.keys(%s)', keys, name)
	        ('for (var %s = 0; %s < %s.length; %s++) {', i, i, keys, i)

	      Object.keys(node.patternProperties).forEach(function(key) {
	        var p = patterns(key)
	        validate('if (%s.test(%s)) {', p, keys+'['+i+']')
	        visit(name+'['+keys+'['+i+']]', node.patternProperties[key], reporter, filter)
	        validate('}')
	      })

	      validate('}')
	      if (type !== 'object') validate('}')
	    }

	    if (node.pattern) {
	      var p = patterns(node.pattern)
	      if (type !== 'string') validate('if (%s) {', types.string(name))
	      validate('if (!(%s.test(%s))) {', p, name)
	      error('pattern mismatch')
	      validate('}')
	      if (type !== 'string') validate('}')
	    }

	    if (node.allOf) {
	      node.allOf.forEach(function(sch) {
	        visit(name, sch, reporter, filter)
	      })
	    }

	    if (node.anyOf && node.anyOf.length) {
	      var prev = gensym('prev')

	      node.anyOf.forEach(function(sch, i) {
	        if (i === 0) {
	          validate('var %s = errors', prev)
	        } else {          
	          validate('if (errors !== %s) {', prev)
	            ('errors = %s', prev)
	        }
	        visit(name, sch, false, false)
	      })
	      node.anyOf.forEach(function(sch, i) {
	        if (i) validate('}')
	      })
	      validate('if (%s !== errors) {', prev)
	      error('no schemas match')
	      validate('}')
	    }

	    if (node.oneOf && node.oneOf.length) {
	      var prev = gensym('prev')
	      var passes = gensym('passes')

	      validate
	        ('var %s = errors', prev)
	        ('var %s = 0', passes)

	      node.oneOf.forEach(function(sch, i) {
	        visit(name, sch, false, false)
	        validate('if (%s === errors) {', prev)
	          ('%s++', passes)
	        ('} else {')
	          ('errors = %s', prev)
	        ('}')
	      })

	      validate('if (%s !== 1) {', passes)
	      error('no (or more than one) schemas match')
	      validate('}')
	    }

	    if (node.multipleOf !== undefined) {
	      if (type !== 'number' && type !== 'integer') validate('if (%s) {', types.number(name))

	      var factor = ((node.multipleOf | 0) !== node.multipleOf) ? Math.pow(10, node.multipleOf.toString().split('.').pop().length) : 1
	      if (factor > 1) validate('if ((%d*%s) % %d) {', factor, name, factor*node.multipleOf)
	      else validate('if (%s % %d) {', name, node.multipleOf)

	      error('has a remainder')
	      validate('}')

	      if (type !== 'number' && type !== 'integer') validate('}')
	    }

	    if (node.maxProperties !== undefined) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))
	      
	      validate('if (Object.keys(%s).length > %d) {', name, node.maxProperties)
	      error('has more properties than allowed')
	      validate('}')

	      if (type !== 'object') validate('}')
	    }

	    if (node.minProperties !== undefined) {
	      if (type !== 'object') validate('if (%s) {', types.object(name))
	      
	      validate('if (Object.keys(%s).length < %d) {', name, node.minProperties)
	      error('has less properties than allowed')
	      validate('}')

	      if (type !== 'object') validate('}')
	    }

	    if (node.maxItems !== undefined) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))
	      
	      validate('if (%s.length > %d) {', name, node.maxItems)
	      error('has more items than allowed')
	      validate('}')

	      if (type !== 'array') validate('}')
	    }

	    if (node.minItems !== undefined) {
	      if (type !== 'array') validate('if (%s) {', types.array(name))
	      
	      validate('if (%s.length < %d) {', name, node.minItems)
	      error('has less items than allowed')
	      validate('}')

	      if (type !== 'array') validate('}')
	    }

	    if (node.maxLength !== undefined) {
	      if (type !== 'string') validate('if (%s) {', types.string(name))

	      validate('if (%s.length > %d) {', name, node.maxLength)
	      error('has longer length than allowed')
	      validate('}')

	      if (type !== 'string') validate('}')
	    }

	    if (node.minLength !== undefined) {
	      if (type !== 'string') validate('if (%s) {', types.string(name))

	      validate('if (%s.length < %d) {', name, node.minLength)
	      error('has less length than allowed')
	      validate('}')

	      if (type !== 'string') validate('}')
	    }

	    if (node.minimum !== undefined) {
	      validate('if (%s %s %d) {', name, node.exclusiveMinimum ? '<=' : '<', node.minimum)
	      error('is less than minimum')
	      validate('}')
	    }

	    if (node.maximum !== undefined) {
	      validate('if (%s %s %d) {', name, node.exclusiveMaximum ? '>=' : '>', node.maximum)
	      error('is more than maximum')
	      validate('}')
	    }

	    if (properties) {
	      Object.keys(properties).forEach(function(p) {
	        if (Array.isArray(type) && type.indexOf('null') !== -1) validate('if (%s !== null) {', name)

	        visit(genobj(name, p), properties[p], reporter, filter)

	        if (Array.isArray(type) && type.indexOf('null') !== -1) validate('}')
	      })
	    }

	    while (indent--) validate('}')
	  }

	  var validate = genfun
	    ('function validate(data) {')
	      ('validate.errors = null')
	      ('var errors = 0')

	  visit('data', schema, reporter, opts && opts.filter)

	  validate
	      ('return errors === 0')
	    ('}')

	  validate = validate.toFunction(scope)
	  validate.errors = null

	  validate.__defineGetter__('error', function() {
	    if (!validate.errors) return ''
	    return validate.errors
	      .map(function(err) {
	        return err.field+' '+err.message
	      })
	      .join('\n')
	  })

	  validate.toJSON = function() {
	    return schema
	  }

	  return validate
	}

	module.exports = function(schema, opts) {
	  if (typeof schema === 'string') schema = JSON.parse(schema)
	  return compile(schema, {}, schema, true, opts)
	}

	module.exports.filter = function(schema, opts) {
	  var validate = module.exports(schema, xtend(opts, {filter: true}))
	  return function(sch) {
	    validate(sch)
	    return sch
	  }
	}


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Array$from = __webpack_require__(111)["default"];

	exports["default"] = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  } else {
	    return _Array$from(arr);
	  }
	};

	exports.__esModule = true;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$defineProperty = __webpack_require__(112)["default"];

	exports["default"] = (function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;

	      _Object$defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	})();

	exports.__esModule = true;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(149), __esModule: true };

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(147), __esModule: true };

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(148), __esModule: true };

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	;(function () { // closure for web browsers

	if (typeof module === 'object' && module.exports) {
	  module.exports = LRUCache
	} else {
	  // just set the global for non-node platforms.
	  this.LRUCache = LRUCache
	}

	function hOP (obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key)
	}

	function naiveLength () { return 1 }

	function LRUCache (options) {
	  if (!(this instanceof LRUCache))
	    return new LRUCache(options)

	  if (typeof options === 'number')
	    options = { max: options }

	  if (!options)
	    options = {}

	  this._max = options.max
	  // Kind of weird to have a default max of Infinity, but oh well.
	  if (!this._max || !(typeof this._max === "number") || this._max <= 0 )
	    this._max = Infinity

	  this._lengthCalculator = options.length || naiveLength
	  if (typeof this._lengthCalculator !== "function")
	    this._lengthCalculator = naiveLength

	  this._allowStale = options.stale || false
	  this._maxAge = options.maxAge || null
	  this._dispose = options.dispose
	  this.reset()
	}

	// resize the cache when the max changes.
	Object.defineProperty(LRUCache.prototype, "max",
	  { set : function (mL) {
	      if (!mL || !(typeof mL === "number") || mL <= 0 ) mL = Infinity
	      this._max = mL
	      if (this._length > this._max) trim(this)
	    }
	  , get : function () { return this._max }
	  , enumerable : true
	  })

	// resize the cache when the lengthCalculator changes.
	Object.defineProperty(LRUCache.prototype, "lengthCalculator",
	  { set : function (lC) {
	      if (typeof lC !== "function") {
	        this._lengthCalculator = naiveLength
	        this._length = this._itemCount
	        for (var key in this._cache) {
	          this._cache[key].length = 1
	        }
	      } else {
	        this._lengthCalculator = lC
	        this._length = 0
	        for (var key in this._cache) {
	          this._cache[key].length = this._lengthCalculator(this._cache[key].value)
	          this._length += this._cache[key].length
	        }
	      }

	      if (this._length > this._max) trim(this)
	    }
	  , get : function () { return this._lengthCalculator }
	  , enumerable : true
	  })

	Object.defineProperty(LRUCache.prototype, "length",
	  { get : function () { return this._length }
	  , enumerable : true
	  })


	Object.defineProperty(LRUCache.prototype, "itemCount",
	  { get : function () { return this._itemCount }
	  , enumerable : true
	  })

	LRUCache.prototype.forEach = function (fn, thisp) {
	  thisp = thisp || this
	  var i = 0;
	  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {
	    i++
	    var hit = this._lruList[k]
	    if (this._maxAge && (Date.now() - hit.now > this._maxAge)) {
	      del(this, hit)
	      if (!this._allowStale) hit = undefined
	    }
	    if (hit) {
	      fn.call(thisp, hit.value, hit.key, this)
	    }
	  }
	}

	LRUCache.prototype.keys = function () {
	  var keys = new Array(this._itemCount)
	  var i = 0
	  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {
	    var hit = this._lruList[k]
	    keys[i++] = hit.key
	  }
	  return keys
	}

	LRUCache.prototype.values = function () {
	  var values = new Array(this._itemCount)
	  var i = 0
	  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {
	    var hit = this._lruList[k]
	    values[i++] = hit.value
	  }
	  return values
	}

	LRUCache.prototype.reset = function () {
	  if (this._dispose && this._cache) {
	    for (var k in this._cache) {
	      this._dispose(k, this._cache[k].value)
	    }
	  }

	  this._cache = Object.create(null) // hash of items by key
	  this._lruList = Object.create(null) // list of items in order of use recency
	  this._mru = 0 // most recently used
	  this._lru = 0 // least recently used
	  this._length = 0 // number of items in the list
	  this._itemCount = 0
	}

	// Provided for debugging/dev purposes only. No promises whatsoever that
	// this API stays stable.
	LRUCache.prototype.dump = function () {
	  return this._cache
	}

	LRUCache.prototype.dumpLru = function () {
	  return this._lruList
	}

	LRUCache.prototype.set = function (key, value) {
	  if (hOP(this._cache, key)) {
	    // dispose of the old one before overwriting
	    if (this._dispose) this._dispose(key, this._cache[key].value)
	    if (this._maxAge) this._cache[key].now = Date.now()
	    this._cache[key].value = value
	    this.get(key)
	    return true
	  }

	  var len = this._lengthCalculator(value)
	  var age = this._maxAge ? Date.now() : 0
	  var hit = new Entry(key, value, this._mru++, len, age)

	  // oversized objects fall out of cache automatically.
	  if (hit.length > this._max) {
	    if (this._dispose) this._dispose(key, value)
	    return false
	  }

	  this._length += hit.length
	  this._lruList[hit.lu] = this._cache[key] = hit
	  this._itemCount ++

	  if (this._length > this._max) trim(this)
	  return true
	}

	LRUCache.prototype.has = function (key) {
	  if (!hOP(this._cache, key)) return false
	  var hit = this._cache[key]
	  if (this._maxAge && (Date.now() - hit.now > this._maxAge)) {
	    return false
	  }
	  return true
	}

	LRUCache.prototype.get = function (key) {
	  return get(this, key, true)
	}

	LRUCache.prototype.peek = function (key) {
	  return get(this, key, false)
	}

	LRUCache.prototype.pop = function () {
	  var hit = this._lruList[this._lru]
	  del(this, hit)
	  return hit || null
	}

	LRUCache.prototype.del = function (key) {
	  del(this, this._cache[key])
	}

	function get (self, key, doUse) {
	  var hit = self._cache[key]
	  if (hit) {
	    if (self._maxAge && (Date.now() - hit.now > self._maxAge)) {
	      del(self, hit)
	      if (!self._allowStale) hit = undefined
	    } else {
	      if (doUse) use(self, hit)
	    }
	    if (hit) hit = hit.value
	  }
	  return hit
	}

	function use (self, hit) {
	  shiftLU(self, hit)
	  hit.lu = self._mru ++
	  if (self._maxAge) hit.now = Date.now()
	  self._lruList[hit.lu] = hit
	}

	function trim (self) {
	  while (self._lru < self._mru && self._length > self._max)
	    del(self, self._lruList[self._lru])
	}

	function shiftLU (self, hit) {
	  delete self._lruList[ hit.lu ]
	  while (self._lru < self._mru && !self._lruList[self._lru]) self._lru ++
	}

	function del (self, hit) {
	  if (hit) {
	    if (self._dispose) self._dispose(hit.key, hit.value)
	    self._length -= hit.length
	    self._itemCount --
	    delete self._cache[ hit.key ]
	    shiftLU(self, hit)
	  }
	}

	// classy, since V8 prefers predictable objects.
	function Entry (key, value, lu, length, now) {
	  this.key = key
	  this.value = value
	  this.lu = lu
	  this.length = length
	  this.now = now
	}

	})()


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	/*jshint onevar: false, indent:4 */
	/*global setImmediate: false, setTimeout: false, console: false */
	(function () {

	    var async = {};

	    // global on the server, window in the browser
	    var root, previous_async;

	    root = this;
	    if (root != null) {
	      previous_async = root.async;
	    }

	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };

	    function only_once(fn) {
	        var called = false;
	        return function() {
	            if (called) throw new Error("Callback was already called.");
	            called = true;
	            fn.apply(root, arguments);
	        }
	    }

	    //// cross-browser compatiblity functions ////

	    var _toString = Object.prototype.toString;

	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };

	    var _each = function (arr, iterator) {
	        for (var i = 0; i < arr.length; i += 1) {
	            iterator(arr[i], i, arr);
	        }
	    };

	    var _map = function (arr, iterator) {
	        if (arr.map) {
	            return arr.map(iterator);
	        }
	        var results = [];
	        _each(arr, function (x, i, a) {
	            results.push(iterator(x, i, a));
	        });
	        return results;
	    };

	    var _reduce = function (arr, iterator, memo) {
	        if (arr.reduce) {
	            return arr.reduce(iterator, memo);
	        }
	        _each(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    };

	    var _keys = function (obj) {
	        if (Object.keys) {
	            return Object.keys(obj);
	        }
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };

	    //// exported async module functions ////

	    //// nextTick implementation with browser-compatible fallback ////
	    if (typeof process === 'undefined' || !(process.nextTick)) {
	        if (typeof setImmediate === 'function') {
	            async.nextTick = function (fn) {
	                // not a direct alias for IE10 compatibility
	                setImmediate(fn);
	            };
	            async.setImmediate = async.nextTick;
	        }
	        else {
	            async.nextTick = function (fn) {
	                setTimeout(fn, 0);
	            };
	            async.setImmediate = async.nextTick;
	        }
	    }
	    else {
	        async.nextTick = process.nextTick;
	        if (typeof setImmediate !== 'undefined') {
	            async.setImmediate = function (fn) {
	              // not a direct alias for IE10 compatibility
	              setImmediate(fn);
	            };
	        }
	        else {
	            async.setImmediate = async.nextTick;
	        }
	    }

	    async.each = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        _each(arr, function (x) {
	            iterator(x, only_once(done) );
	        });
	        function done(err) {
	          if (err) {
	              callback(err);
	              callback = function () {};
	          }
	          else {
	              completed += 1;
	              if (completed >= arr.length) {
	                  callback();
	              }
	          }
	        }
	    };
	    async.forEach = async.each;

	    async.eachSeries = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        var iterate = function () {
	            iterator(arr[completed], function (err) {
	                if (err) {
	                    callback(err);
	                    callback = function () {};
	                }
	                else {
	                    completed += 1;
	                    if (completed >= arr.length) {
	                        callback();
	                    }
	                    else {
	                        iterate();
	                    }
	                }
	            });
	        };
	        iterate();
	    };
	    async.forEachSeries = async.eachSeries;

	    async.eachLimit = function (arr, limit, iterator, callback) {
	        var fn = _eachLimit(limit);
	        fn.apply(null, [arr, iterator, callback]);
	    };
	    async.forEachLimit = async.eachLimit;

	    var _eachLimit = function (limit) {

	        return function (arr, iterator, callback) {
	            callback = callback || function () {};
	            if (!arr.length || limit <= 0) {
	                return callback();
	            }
	            var completed = 0;
	            var started = 0;
	            var running = 0;

	            (function replenish () {
	                if (completed >= arr.length) {
	                    return callback();
	                }

	                while (running < limit && started < arr.length) {
	                    started += 1;
	                    running += 1;
	                    iterator(arr[started - 1], function (err) {
	                        if (err) {
	                            callback(err);
	                            callback = function () {};
	                        }
	                        else {
	                            completed += 1;
	                            running -= 1;
	                            if (completed >= arr.length) {
	                                callback();
	                            }
	                            else {
	                                replenish();
	                            }
	                        }
	                    });
	                }
	            })();
	        };
	    };


	    var doParallel = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.each].concat(args));
	        };
	    };
	    var doParallelLimit = function(limit, fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [_eachLimit(limit)].concat(args));
	        };
	    };
	    var doSeries = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.eachSeries].concat(args));
	        };
	    };


	    var _asyncMap = function (eachfn, arr, iterator, callback) {
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        if (!callback) {
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err) {
	                    callback(err);
	                });
	            });
	        } else {
	            var results = [];
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err, v) {
	                    results[x.index] = v;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = function (arr, limit, iterator, callback) {
	        return _mapLimit(limit)(arr, iterator, callback);
	    };

	    var _mapLimit = function(limit) {
	        return doParallelLimit(limit, _asyncMap);
	    };

	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachSeries(arr, function (x, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };
	    // inject alias
	    async.inject = async.reduce;
	    // foldl alias
	    async.foldl = async.reduce;

	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, function (x) {
	            return x;
	        }).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };
	    // foldr alias
	    async.foldr = async.reduceRight;

	    var _filter = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.filter = doParallel(_filter);
	    async.filterSeries = doSeries(_filter);
	    // select alias
	    async.select = async.filter;
	    async.selectSeries = async.filterSeries;

	    var _reject = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (!v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.reject = doParallel(_reject);
	    async.rejectSeries = doSeries(_reject);

	    var _detect = function (eachfn, arr, iterator, main_callback) {
	        eachfn(arr, function (x, callback) {
	            iterator(x, function (result) {
	                if (result) {
	                    main_callback(x);
	                    main_callback = function () {};
	                }
	                else {
	                    callback();
	                }
	            });
	        }, function (err) {
	            main_callback();
	        });
	    };
	    async.detect = doParallel(_detect);
	    async.detectSeries = doSeries(_detect);

	    async.some = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    main_callback(true);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(false);
	        });
	    };
	    // any alias
	    async.any = async.some;

	    async.every = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (!v) {
	                    main_callback(false);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(true);
	        });
	    };
	    // all alias
	    async.all = async.every;

	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                var fn = function (left, right) {
	                    var a = left.criteria, b = right.criteria;
	                    return a < b ? -1 : a > b ? 1 : 0;
	                };
	                callback(null, _map(results.sort(fn), function (x) {
	                    return x.value;
	                }));
	            }
	        });
	    };

	    async.auto = function (tasks, callback) {
	        callback = callback || function () {};
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length
	        if (!remainingTasks) {
	            return callback();
	        }

	        var results = {};

	        var listeners = [];
	        var addListener = function (fn) {
	            listeners.unshift(fn);
	        };
	        var removeListener = function (fn) {
	            for (var i = 0; i < listeners.length; i += 1) {
	                if (listeners[i] === fn) {
	                    listeners.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        var taskComplete = function () {
	            remainingTasks--
	            _each(listeners.slice(0), function (fn) {
	                fn();
	            });
	        };

	        addListener(function () {
	            if (!remainingTasks) {
	                var theCallback = callback;
	                // prevent final callback from calling itself if it errors
	                callback = function () {};

	                theCallback(null, results);
	            }
	        });

	        _each(keys, function (k) {
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _each(_keys(results), function(rkey) {
	                        safeResults[rkey] = results[rkey];
	                    });
	                    safeResults[k] = args;
	                    callback(err, safeResults);
	                    // stop subsequent errors hitting callback multiple times
	                    callback = function () {};
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            };
	            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
	            var ready = function () {
	                return _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            };
	            if (ready()) {
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                var listener = function () {
	                    if (ready()) {
	                        removeListener(listener);
	                        task[task.length - 1](taskCallback, results);
	                    }
	                };
	                addListener(listener);
	            }
	        });
	    };

	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var attempts = [];
	        // Use defaults if times not passed
	        if (typeof times === 'function') {
	            callback = task;
	            task = times;
	            times = DEFAULT_TIMES;
	        }
	        // Make sure times is a number
	        times = parseInt(times, 10) || DEFAULT_TIMES;
	        var wrappedTask = function(wrappedCallback, wrappedResults) {
	            var retryAttempt = function(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            };
	            while (times) {
	                attempts.push(retryAttempt(task, !(times-=1)));
	            }
	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || callback)(data.err, data.result);
	            });
	        }
	        // If a callback is passed, run this as a controll flow
	        return callback ? wrappedTask() : wrappedTask
	    };

	    async.waterfall = function (tasks, callback) {
	        callback = callback || function () {};
	        if (!_isArray(tasks)) {
	          var err = new Error('First argument to waterfall must be an array of functions');
	          return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        var wrapIterator = function (iterator) {
	            return function (err) {
	                if (err) {
	                    callback.apply(null, arguments);
	                    callback = function () {};
	                }
	                else {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    async.setImmediate(function () {
	                        iterator.apply(null, args);
	                    });
	                }
	            };
	        };
	        wrapIterator(async.iterator(tasks))();
	    };

	    var _parallel = function(eachfn, tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            eachfn.map(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            eachfn.each(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };

	    async.parallel = function (tasks, callback) {
	        _parallel({ map: async.map, each: async.each }, tasks, callback);
	    };

	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
	    };

	    async.series = function (tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            async.mapSeries(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            async.eachSeries(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };

	    async.iterator = function (tasks) {
	        var makeCallback = function (index) {
	            var fn = function () {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            };
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        };
	        return makeCallback(0);
	    };

	    async.apply = function (fn) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return function () {
	            return fn.apply(
	                null, args.concat(Array.prototype.slice.call(arguments))
	            );
	        };
	    };

	    var _concat = function (eachfn, arr, fn, callback) {
	        var r = [];
	        eachfn(arr, function (x, cb) {
	            fn(x, function (err, y) {
	                r = r.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, r);
	        });
	    };
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);

	    async.whilst = function (test, iterator, callback) {
	        if (test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.whilst(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };

	    async.doWhilst = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (test.apply(null, args)) {
	                async.doWhilst(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };

	    async.until = function (test, iterator, callback) {
	        if (!test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.until(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };

	    async.doUntil = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (!test.apply(null, args)) {
	                async.doUntil(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };

	    async.queue = function (worker, concurrency) {
	        if (concurrency === undefined) {
	            concurrency = 1;
	        }
	        function _insert(q, data, pos, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  callback: typeof callback === 'function' ? callback : null
	              };

	              if (pos) {
	                q.tasks.unshift(item);
	              } else {
	                q.tasks.push(item);
	              }

	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }

	        var workers = 0;
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            saturated: null,
	            empty: null,
	            drain: null,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	              _insert(q, data, false, callback);
	            },
	            kill: function () {
	              q.drain = null;
	              q.tasks = [];
	            },
	            unshift: function (data, callback) {
	              _insert(q, data, true, callback);
	            },
	            process: function () {
	                if (!q.paused && workers < q.concurrency && q.tasks.length) {
	                    var task = q.tasks.shift();
	                    if (q.empty && q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    var next = function () {
	                        workers -= 1;
	                        if (task.callback) {
	                            task.callback.apply(task, arguments);
	                        }
	                        if (q.drain && q.tasks.length + workers === 0) {
	                            q.drain();
	                        }
	                        q.process();
	                    };
	                    var cb = only_once(next);
	                    worker(task.data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                if (q.paused === true) { return; }
	                q.paused = true;
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                // Need to call q.process once per concurrent
	                // worker to preserve full concurrency after pause
	                for (var w = 1; w <= q.concurrency; w++) {
	                    async.setImmediate(q.process);
	                }
	            }
	        };
	        return q;
	    };

	    async.priorityQueue = function (worker, concurrency) {

	        function _compareTasks(a, b){
	          return a.priority - b.priority;
	        };

	        function _binarySearch(sequence, item, compare) {
	          var beg = -1,
	              end = sequence.length - 1;
	          while (beg < end) {
	            var mid = beg + ((end - beg + 1) >>> 1);
	            if (compare(item, sequence[mid]) >= 0) {
	              beg = mid;
	            } else {
	              end = mid - 1;
	            }
	          }
	          return beg;
	        }

	        function _insert(q, data, priority, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  priority: priority,
	                  callback: typeof callback === 'function' ? callback : null
	              };

	              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }

	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);

	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	          _insert(q, data, priority, callback);
	        };

	        // Remove unshift function
	        delete q.unshift;

	        return q;
	    };

	    async.cargo = function (worker, payload) {
	        var working     = false,
	            tasks       = [];

	        var cargo = {
	            tasks: tasks,
	            payload: payload,
	            saturated: null,
	            empty: null,
	            drain: null,
	            drained: true,
	            push: function (data, callback) {
	                if (!_isArray(data)) {
	                    data = [data];
	                }
	                _each(data, function(task) {
	                    tasks.push({
	                        data: task,
	                        callback: typeof callback === 'function' ? callback : null
	                    });
	                    cargo.drained = false;
	                    if (cargo.saturated && tasks.length === payload) {
	                        cargo.saturated();
	                    }
	                });
	                async.setImmediate(cargo.process);
	            },
	            process: function process() {
	                if (working) return;
	                if (tasks.length === 0) {
	                    if(cargo.drain && !cargo.drained) cargo.drain();
	                    cargo.drained = true;
	                    return;
	                }

	                var ts = typeof payload === 'number'
	                            ? tasks.splice(0, payload)
	                            : tasks.splice(0, tasks.length);

	                var ds = _map(ts, function (task) {
	                    return task.data;
	                });

	                if(cargo.empty) cargo.empty();
	                working = true;
	                worker(ds, function () {
	                    working = false;

	                    var args = arguments;
	                    _each(ts, function (data) {
	                        if (data.callback) {
	                            data.callback.apply(null, args);
	                        }
	                    });

	                    process();
	                });
	            },
	            length: function () {
	                return tasks.length;
	            },
	            running: function () {
	                return working;
	            }
	        };
	        return cargo;
	    };

	    var _console_fn = function (name) {
	        return function (fn) {
	            var args = Array.prototype.slice.call(arguments, 1);
	            fn.apply(null, args.concat([function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (typeof console !== 'undefined') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _each(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            }]));
	        };
	    };
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/

	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        hasher = hasher || function (x) {
	            return x;
	        };
	        var memoized = function () {
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (key in memo) {
	                async.nextTick(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (key in queues) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([function () {
	                    memo[key] = arguments;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                      q[i].apply(null, arguments);
	                    }
	                }]));
	            }
	        };
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };

	    async.unmemoize = function (fn) {
	      return function () {
	        return (fn.unmemoized || fn).apply(null, arguments);
	      };
	    };

	    async.times = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.map(counter, iterator, callback);
	    };

	    async.timesSeries = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.mapSeries(counter, iterator, callback);
	    };

	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([function () {
	                    var err = arguments[0];
	                    var nextargs = Array.prototype.slice.call(arguments, 1);
	                    cb(err, nextargs);
	                }]))
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        };
	    };

	    async.compose = function (/* functions... */) {
	      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };

	    var _applyEach = function (eachfn, fns /*args...*/) {
	        var go = function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            return eachfn(fns, function (fn, cb) {
	                fn.apply(that, args.concat([cb]));
	            },
	            callback);
	        };
	        if (arguments.length > 2) {
	            var args = Array.prototype.slice.call(arguments, 2);
	            return go.apply(this, args);
	        }
	        else {
	            return go;
	        }
	    };
	    async.applyEach = doParallel(_applyEach);
	    async.applyEachSeries = doSeries(_applyEach);

	    async.forever = function (fn, callback) {
	        function next(err) {
	            if (err) {
	                if (callback) {
	                    return callback(err);
	                }
	                throw err;
	            }
	            fn(next);
	        }
	        next();
	    };

	    // Node.js
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }

	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129), __webpack_require__(135).setImmediate))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hashjs = __webpack_require__(94);
	var apiFactory = __webpack_require__(154);

	var NODE_PUBLIC = 28;
	var NODE_PRIVATE = 32;
	var ACCOUNT_ID = 0;
	var FAMILY_SEED = 33;
	var ED25519_SEED = [0x01, 0xE1, 0x4B];

	module.exports = apiFactory({
	  sha256: function(bytes) {
	    return hashjs.sha256().update(bytes).digest();
	  },
	  defaultAlphabet: 'ripple',
	  codecMethods: {
	    EdSeed: {
	      expectedLength: 16,
	      version: ED25519_SEED
	    },
	    Seed: {
	      // TODO: Use a map, not a parallel array
	      versionTypes: ['ed25519', 'secp256k1'],
	      versions: [ED25519_SEED, FAMILY_SEED],
	      expectedLength: 16
	    },
	    AccountID: {version: ACCOUNT_ID},
	    NodePublic: {version: NODE_PUBLIC},
	    NodePrivate: {version: NODE_PRIVATE},
	    K256Seed: {version: FAMILY_SEED}
	  }
	});


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {

	'use strict';

	// Utils

	function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	// Could use `inherits` module, but don't want to move from single file
	// architecture yet.
	function inherits(ctor, superCtor) {
	  ctor.super_ = superCtor;
	  var TempCtor = function () {};
	  TempCtor.prototype = superCtor.prototype;
	  ctor.prototype = new TempCtor();
	  ctor.prototype.constructor = ctor;
	}

	// BN

	function BN(number, base, endian) {
	  // May be `new BN(bn)` ?
	  if (number !== null &&
	      typeof number === 'object' &&
	      Array.isArray(number.words)) {
	    return number;
	  }

	  this.sign = false;
	  this.words = null;
	  this.length = 0;

	  // Reduction context
	  this.red = null;

	  if (base === 'le' || base === 'be') {
	    endian = base;
	    base = 10;
	  }

	  if (number !== null)
	    this._init(number || 0, base || 10, endian || 'be');
	}
	if (typeof module === 'object')
	  module.exports = BN;
	else
	  exports.BN = BN;

	BN.BN = BN;
	BN.wordSize = 26;

	BN.prototype._init = function init(number, base, endian) {
	  if (typeof number === 'number') {
	    return this._initNumber(number, base, endian);
	  } else if (typeof number === 'object') {
	    return this._initArray(number, base, endian);
	  }
	  if (base === 'hex')
	    base = 16;
	  assert(base === (base | 0) && base >= 2 && base <= 36);

	  number = number.toString().replace(/\s+/g, '');
	  var start = 0;
	  if (number[0] === '-')
	    start++;

	  if (base === 16)
	    this._parseHex(number, start);
	  else
	    this._parseBase(number, base, start);

	  if (number[0] === '-')
	    this.sign = true;

	  this.strip();

	  if (endian !== 'le')
	    return;

	  this._initArray(this.toArray(), base, endian);
	};

	BN.prototype._initNumber = function _initNumber(number, base, endian) {
	  if (number < 0) {
	    this.sign = true;
	    number = -number;
	  }
	  if (number < 0x4000000) {
	    this.words = [ number & 0x3ffffff ];
	    this.length = 1;
	  } else if (number < 0x10000000000000) {
	    this.words = [
	      number & 0x3ffffff,
	      (number / 0x4000000) & 0x3ffffff
	    ];
	    this.length = 2;
	  } else {
	    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	    this.words = [
	      number & 0x3ffffff,
	      (number / 0x4000000) & 0x3ffffff,
	      1
	    ];
	    this.length = 3;
	  }

	  if (endian !== 'le')
	    return;

	  // Reverse the bytes
	  this._initArray(this.toArray(), base, endian);
	};

	BN.prototype._initArray = function _initArray(number, base, endian) {
	  // Perhaps a Uint8Array
	  assert(typeof number.length === 'number');
	  if (number.length <= 0) {
	    this.words = [ 0 ];
	    this.length = 1;
	    return this;
	  }

	  this.length = Math.ceil(number.length / 3);
	  this.words = new Array(this.length);
	  for (var i = 0; i < this.length; i++)
	    this.words[i] = 0;

	  var off = 0;
	  if (endian === 'be') {
	    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
	      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	  } else if (endian === 'le') {
	    for (var i = 0, j = 0; i < number.length; i += 3) {
	      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	  }
	  return this.strip();
	};

	function parseHex(str, start, end) {
	  var r = 0;
	  var len = Math.min(str.length, end);
	  for (var i = start; i < len; i++) {
	    var c = str.charCodeAt(i) - 48;

	    r <<= 4;

	    // 'a' - 'f'
	    if (c >= 49 && c <= 54)
	      r |= c - 49 + 0xa;

	    // 'A' - 'F'
	    else if (c >= 17 && c <= 22)
	      r |= c - 17 + 0xa;

	    // '0' - '9'
	    else
	      r |= c & 0xf;
	  }
	  return r;
	}

	BN.prototype._parseHex = function _parseHex(number, start) {
	  // Create possibly bigger array to ensure that it fits the number
	  this.length = Math.ceil((number.length - start) / 6);
	  this.words = new Array(this.length);
	  for (var i = 0; i < this.length; i++)
	    this.words[i] = 0;

	  // Scan 24-bit chunks and add them to the number
	  var off = 0;
	  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
	    var w = parseHex(number, i, i + 6);
	    this.words[j] |= (w << off) & 0x3ffffff;
	    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	    off += 24;
	    if (off >= 26) {
	      off -= 26;
	      j++;
	    }
	  }
	  if (i + 6 !== start) {
	    var w = parseHex(number, start, i + 6);
	    this.words[j] |= (w << off) & 0x3ffffff;
	    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	  }
	  this.strip();
	};

	function parseBase(str, start, end, mul) {
	  var r = 0;
	  var len = Math.min(str.length, end);
	  for (var i = start; i < len; i++) {
	    var c = str.charCodeAt(i) - 48;

	    r *= mul;

	    // 'a'
	    if (c >= 49)
	      r += c - 49 + 0xa;

	    // 'A'
	    else if (c >= 17)
	      r += c - 17 + 0xa;

	    // '0' - '9'
	    else
	      r += c;
	  }
	  return r;
	}

	BN.prototype._parseBase = function _parseBase(number, base, start) {
	  // Initialize as zero
	  this.words = [ 0 ];
	  this.length = 1;

	  // Find length of limb in base
	  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)
	    limbLen++;
	  limbLen--;
	  limbPow = (limbPow / base) | 0;

	  var total = number.length - start;
	  var mod = total % limbLen;
	  var end = Math.min(total, total - mod) + start;

	  var word = 0;
	  for (var i = start; i < end; i += limbLen) {
	    word = parseBase(number, i, i + limbLen, base);

	    this.imuln(limbPow);
	    if (this.words[0] + word < 0x4000000)
	      this.words[0] += word;
	    else
	      this._iaddn(word);
	  }

	  if (mod !== 0) {
	    var pow = 1;
	    var word = parseBase(number, i, number.length, base);

	    for (var i = 0; i < mod; i++)
	      pow *= base;
	    this.imuln(pow);
	    if (this.words[0] + word < 0x4000000)
	      this.words[0] += word;
	    else
	      this._iaddn(word);
	  }
	};

	BN.prototype.copy = function copy(dest) {
	  dest.words = new Array(this.length);
	  for (var i = 0; i < this.length; i++)
	    dest.words[i] = this.words[i];
	  dest.length = this.length;
	  dest.sign = this.sign;
	  dest.red = this.red;
	};

	BN.prototype.clone = function clone() {
	  var r = new BN(null);
	  this.copy(r);
	  return r;
	};

	// Remove leading `0` from `this`
	BN.prototype.strip = function strip() {
	  while (this.length > 1 && this.words[this.length - 1] === 0)
	    this.length--;
	  return this._normSign();
	};

	BN.prototype._normSign = function _normSign() {
	  // -0 = 0
	  if (this.length === 1 && this.words[0] === 0)
	    this.sign = false;
	  return this;
	};

	BN.prototype.inspect = function inspect() {
	  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	};

	/*

	var zeros = [];
	var groupSizes = [];
	var groupBases = [];

	var s = '';
	var i = -1;
	while (++i < BN.wordSize) {
	  zeros[i] = s;
	  s += '0';
	}
	groupSizes[0] = 0;
	groupSizes[1] = 0;
	groupBases[0] = 0;
	groupBases[1] = 0;
	var base = 2 - 1;
	while (++base < 36 + 1) {
	  var groupSize = 0;
	  var groupBase = 1;
	  while (groupBase < (1 << BN.wordSize) / base) {
	    groupBase *= base;
	    groupSize += 1;
	  }
	  groupSizes[base] = groupSize;
	  groupBases[base] = groupBase;
	}

	*/

	var zeros = [
	  '',
	  '0',
	  '00',
	  '000',
	  '0000',
	  '00000',
	  '000000',
	  '0000000',
	  '00000000',
	  '000000000',
	  '0000000000',
	  '00000000000',
	  '000000000000',
	  '0000000000000',
	  '00000000000000',
	  '000000000000000',
	  '0000000000000000',
	  '00000000000000000',
	  '000000000000000000',
	  '0000000000000000000',
	  '00000000000000000000',
	  '000000000000000000000',
	  '0000000000000000000000',
	  '00000000000000000000000',
	  '000000000000000000000000',
	  '0000000000000000000000000'
	];

	var groupSizes = [
	  0, 0,
	  25, 16, 12, 11, 10, 9, 8,
	  8, 7, 7, 7, 7, 6, 6,
	  6, 6, 6, 6, 6, 5, 5,
	  5, 5, 5, 5, 5, 5, 5,
	  5, 5, 5, 5, 5, 5, 5
	];

	var groupBases = [
	  0, 0,
	  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	];

	BN.prototype.toString = function toString(base, padding) {
	  base = base || 10;
	  if (base === 16 || base === 'hex') {
	    var out = '';
	    var off = 0;
	    var padding = padding | 0 || 1;
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = this.words[i];
	      var word = (((w << off) | carry) & 0xffffff).toString(16);
	      carry = (w >>> (24 - off)) & 0xffffff;
	      if (carry !== 0 || i !== this.length - 1)
	        out = zeros[6 - word.length] + word + out;
	      else
	        out = word + out;
	      off += 2;
	      if (off >= 26) {
	        off -= 26;
	        i--;
	      }
	    }
	    if (carry !== 0)
	      out = carry.toString(16) + out;
	    while (out.length % padding !== 0)
	      out = '0' + out;
	    if (this.sign)
	      out = '-' + out;
	    return out;
	  } else if (base === (base | 0) && base >= 2 && base <= 36) {
	    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	    var groupSize = groupSizes[base];
	    // var groupBase = Math.pow(base, groupSize);
	    var groupBase = groupBases[base];
	    var out = '';
	    var c = this.clone();
	    c.sign = false;
	    while (c.cmpn(0) !== 0) {
	      var r = c.modn(groupBase).toString(base);
	      c = c.idivn(groupBase);

	      if (c.cmpn(0) !== 0)
	        out = zeros[groupSize - r.length] + r + out;
	      else
	        out = r + out;
	    }
	    if (this.cmpn(0) === 0)
	      out = '0' + out;
	    if (this.sign)
	      out = '-' + out;
	    return out;
	  } else {
	    assert(false, 'Base should be between 2 and 36');
	  }
	};

	BN.prototype.toJSON = function toJSON() {
	  return this.toString(16);
	};

	BN.prototype.toArray = function toArray(endian, length) {
	  this.strip();
	  var littleEndian = endian === 'le';
	  var res = new Array(this.byteLength());
	  res[0] = 0;

	  var q = this.clone();
	  if (!littleEndian) {
	    // Assume big-endian
	    for (var i = 0; q.cmpn(0) !== 0; i++) {
	      var b = q.andln(0xff);
	      q.iushrn(8);

	      res[res.length - i - 1] = b;
	    }
	  } else {
	    for (var i = 0; q.cmpn(0) !== 0; i++) {
	      var b = q.andln(0xff);
	      q.iushrn(8);

	      res[i] = b;
	    }
	  }

	  if (length) {
	    assert(res.length <= length, 'byte array longer than desired length');

	    while (res.length < length) {
	      if (littleEndian)
	        res.push(0);
	      else
	        res.unshift(0);
	    }
	  }

	  return res;
	};

	if (Math.clz32) {
	  BN.prototype._countBits = function _countBits(w) {
	    return 32 - Math.clz32(w);
	  };
	} else {
	  BN.prototype._countBits = function _countBits(w) {
	    var t = w;
	    var r = 0;
	    if (t >= 0x1000) {
	      r += 13;
	      t >>>= 13;
	    }
	    if (t >= 0x40) {
	      r += 7;
	      t >>>= 7;
	    }
	    if (t >= 0x8) {
	      r += 4;
	      t >>>= 4;
	    }
	    if (t >= 0x02) {
	      r += 2;
	      t >>>= 2;
	    }
	    return r + t;
	  };
	}

	BN.prototype._zeroBits = function _zeroBits(w) {
	  // Short-cut
	  if (w === 0)
	    return 26;

	  var t = w;
	  var r = 0;
	  if ((t & 0x1fff) === 0) {
	    r += 13;
	    t >>>= 13;
	  }
	  if ((t & 0x7f) === 0) {
	    r += 7;
	    t >>>= 7;
	  }
	  if ((t & 0xf) === 0) {
	    r += 4;
	    t >>>= 4;
	  }
	  if ((t & 0x3) === 0) {
	    r += 2;
	    t >>>= 2;
	  }
	  if ((t & 0x1) === 0)
	    r++;
	  return r;
	};

	// Return number of used bits in a BN
	BN.prototype.bitLength = function bitLength() {
	  var hi = 0;
	  var w = this.words[this.length - 1];
	  var hi = this._countBits(w);
	  return (this.length - 1) * 26 + hi;
	};

	// Number of trailing zero bits
	BN.prototype.zeroBits = function zeroBits() {
	  if (this.cmpn(0) === 0)
	    return 0;

	  var r = 0;
	  for (var i = 0; i < this.length; i++) {
	    var b = this._zeroBits(this.words[i]);
	    r += b;
	    if (b !== 26)
	      break;
	  }
	  return r;
	};

	BN.prototype.byteLength = function byteLength() {
	  return Math.ceil(this.bitLength() / 8);
	};

	// Return negative clone of `this`
	BN.prototype.neg = function neg() {
	  if (this.cmpn(0) === 0)
	    return this.clone();

	  var r = this.clone();
	  r.sign = !this.sign;
	  return r;
	};


	// Or `num` with `this` in-place
	BN.prototype.iuor = function iuor(num) {
	  while (this.length < num.length)
	    this.words[this.length++] = 0;

	  for (var i = 0; i < num.length; i++)
	    this.words[i] = this.words[i] | num.words[i];

	  return this.strip();
	};

	BN.prototype.ior = function ior(num) {
	  assert(!this.sign && !num.sign);
	  return this.iuor(num);
	};


	// Or `num` with `this`
	BN.prototype.or = function or(num) {
	  if (this.length > num.length)
	    return this.clone().ior(num);
	  else
	    return num.clone().ior(this);
	};

	BN.prototype.uor = function uor(num) {
	  if (this.length > num.length)
	    return this.clone().iuor(num);
	  else
	    return num.clone().iuor(this);
	};


	// And `num` with `this` in-place
	BN.prototype.iuand = function iuand(num) {
	  // b = min-length(num, this)
	  var b;
	  if (this.length > num.length)
	    b = num;
	  else
	    b = this;

	  for (var i = 0; i < b.length; i++)
	    this.words[i] = this.words[i] & num.words[i];

	  this.length = b.length;

	  return this.strip();
	};

	BN.prototype.iand = function iand(num) {
	  assert(!this.sign && !num.sign);
	  return this.iuand(num);
	};


	// And `num` with `this`
	BN.prototype.and = function and(num) {
	  if (this.length > num.length)
	    return this.clone().iand(num);
	  else
	    return num.clone().iand(this);
	};

	BN.prototype.uand = function uand(num) {
	  if (this.length > num.length)
	    return this.clone().iuand(num);
	  else
	    return num.clone().iuand(this);
	};


	// Xor `num` with `this` in-place
	BN.prototype.iuxor = function iuxor(num) {
	  // a.length > b.length
	  var a;
	  var b;
	  if (this.length > num.length) {
	    a = this;
	    b = num;
	  } else {
	    a = num;
	    b = this;
	  }

	  for (var i = 0; i < b.length; i++)
	    this.words[i] = a.words[i] ^ b.words[i];

	  if (this !== a)
	    for (; i < a.length; i++)
	      this.words[i] = a.words[i];

	  this.length = a.length;

	  return this.strip();
	};

	BN.prototype.ixor = function ixor(num) {
	  assert(!this.sign && !num.sign);
	  return this.iuxor(num);
	};


	// Xor `num` with `this`
	BN.prototype.xor = function xor(num) {
	  if (this.length > num.length)
	    return this.clone().ixor(num);
	  else
	    return num.clone().ixor(this);
	};

	BN.prototype.uxor = function uxor(num) {
	  if (this.length > num.length)
	    return this.clone().iuxor(num);
	  else
	    return num.clone().iuxor(this);
	};


	// Set `bit` of `this`
	BN.prototype.setn = function setn(bit, val) {
	  assert(typeof bit === 'number' && bit >= 0);

	  var off = (bit / 26) | 0;
	  var wbit = bit % 26;

	  while (this.length <= off)
	    this.words[this.length++] = 0;

	  if (val)
	    this.words[off] = this.words[off] | (1 << wbit);
	  else
	    this.words[off] = this.words[off] & ~(1 << wbit);

	  return this.strip();
	};


	// Add `num` to `this` in-place
	BN.prototype.iadd = function iadd(num) {
	  // negative + positive
	  if (this.sign && !num.sign) {
	    this.sign = false;
	    var r = this.isub(num);
	    this.sign = !this.sign;
	    return this._normSign();

	  // positive + negative
	  } else if (!this.sign && num.sign) {
	    num.sign = false;
	    var r = this.isub(num);
	    num.sign = true;
	    return r._normSign();
	  }

	  // a.length > b.length
	  var a;
	  var b;
	  if (this.length > num.length) {
	    a = this;
	    b = num;
	  } else {
	    a = num;
	    b = this;
	  }

	  var carry = 0;
	  for (var i = 0; i < b.length; i++) {
	    var r = a.words[i] + b.words[i] + carry;
	    this.words[i] = r & 0x3ffffff;
	    carry = r >>> 26;
	  }
	  for (; carry !== 0 && i < a.length; i++) {
	    var r = a.words[i] + carry;
	    this.words[i] = r & 0x3ffffff;
	    carry = r >>> 26;
	  }

	  this.length = a.length;
	  if (carry !== 0) {
	    this.words[this.length] = carry;
	    this.length++;
	  // Copy the rest of the words
	  } else if (a !== this) {
	    for (; i < a.length; i++)
	      this.words[i] = a.words[i];
	  }

	  return this;
	};

	// Add `num` to `this`
	BN.prototype.add = function add(num) {
	  if (num.sign && !this.sign) {
	    num.sign = false;
	    var res = this.sub(num);
	    num.sign = true;
	    return res;
	  } else if (!num.sign && this.sign) {
	    this.sign = false;
	    var res = num.sub(this);
	    this.sign = true;
	    return res;
	  }

	  if (this.length > num.length)
	    return this.clone().iadd(num);
	  else
	    return num.clone().iadd(this);
	};

	// Subtract `num` from `this` in-place
	BN.prototype.isub = function isub(num) {
	  // this - (-num) = this + num
	  if (num.sign) {
	    num.sign = false;
	    var r = this.iadd(num);
	    num.sign = true;
	    return r._normSign();

	  // -this - num = -(this + num)
	  } else if (this.sign) {
	    this.sign = false;
	    this.iadd(num);
	    this.sign = true;
	    return this._normSign();
	  }

	  // At this point both numbers are positive
	  var cmp = this.cmp(num);

	  // Optimization - zeroify
	  if (cmp === 0) {
	    this.sign = false;
	    this.length = 1;
	    this.words[0] = 0;
	    return this;
	  }

	  // a > b
	  var a;
	  var b;
	  if (cmp > 0) {
	    a = this;
	    b = num;
	  } else {
	    a = num;
	    b = this;
	  }

	  var carry = 0;
	  for (var i = 0; i < b.length; i++) {
	    var r = a.words[i] - b.words[i] + carry;
	    carry = r >> 26;
	    this.words[i] = r & 0x3ffffff;
	  }
	  for (; carry !== 0 && i < a.length; i++) {
	    var r = a.words[i] + carry;
	    carry = r >> 26;
	    this.words[i] = r & 0x3ffffff;
	  }

	  // Copy rest of the words
	  if (carry === 0 && i < a.length && a !== this)
	    for (; i < a.length; i++)
	      this.words[i] = a.words[i];
	  this.length = Math.max(this.length, i);

	  if (a !== this)
	    this.sign = true;

	  return this.strip();
	};

	// Subtract `num` from `this`
	BN.prototype.sub = function sub(num) {
	  return this.clone().isub(num);
	};

	/*
	// NOTE: This could be potentionally used to generate loop-less multiplications
	function _genCombMulTo(alen, blen) {
	  var len = alen + blen - 1;
	  var src = [
	    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
	        'mask = 0x3ffffff, shift = 0x4000000;',
	    'out.length = ' + len + ';'
	  ];
	  for (var k = 0; k < len; k++) {
	    var minJ = Math.max(0, k - alen + 1);
	    var maxJ = Math.min(k, blen - 1);

	    for (var j = minJ; j <= maxJ; j++) {
	      var i = k - j;
	      var mul = 'a[' + i + '] * b[' + j + ']';

	      if (j === minJ) {
	        src.push('w = ' + mul + ' + c;');
	        src.push('c = (w / shift) | 0;');
	      } else {
	        src.push('w += ' + mul + ';');
	        src.push('c += (w / shift) | 0;');
	      }
	      src.push('w &= mask;');
	    }
	    src.push('o[' + k + '] = w;');
	  }
	  src.push('if (c !== 0) {',
	           '  o[' + k + '] = c;',
	           '  out.length++;',
	           '}',
	           'return out;');

	  return src.join('\n');
	}
	*/

	BN.prototype._smallMulTo = function _smallMulTo(num, out) {
	  out.sign = num.sign !== this.sign;
	  out.length = this.length + num.length;

	  var carry = 0;
	  for (var k = 0; k < out.length - 1; k++) {
	    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	    // note that ncarry could be >= 0x3ffffff
	    var ncarry = carry >>> 26;
	    var rword = carry & 0x3ffffff;
	    var maxJ = Math.min(k, num.length - 1);
	    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
	      var i = k - j;
	      var a = this.words[i] | 0;
	      var b = num.words[j] | 0;
	      var r = a * b;

	      var lo = r & 0x3ffffff;
	      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	      lo = (lo + rword) | 0;
	      rword = lo & 0x3ffffff;
	      ncarry = (ncarry + (lo >>> 26)) | 0;
	    }
	    out.words[k] = rword;
	    carry = ncarry;
	  }
	  if (carry !== 0) {
	    out.words[k] = carry;
	  } else {
	    out.length--;
	  }

	  return out.strip();
	};

	BN.prototype._bigMulTo = function _bigMulTo(num, out) {
	  out.sign = num.sign !== this.sign;
	  out.length = this.length + num.length;

	  var carry = 0;
	  var hncarry = 0;
	  for (var k = 0; k < out.length - 1; k++) {
	    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	    // note that ncarry could be >= 0x3ffffff
	    var ncarry = hncarry;
	    hncarry = 0;
	    var rword = carry & 0x3ffffff;
	    var maxJ = Math.min(k, num.length - 1);
	    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
	      var i = k - j;
	      var a = this.words[i] | 0;
	      var b = num.words[j] | 0;
	      var r = a * b;

	      var lo = r & 0x3ffffff;
	      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	      lo = (lo + rword) | 0;
	      rword = lo & 0x3ffffff;
	      ncarry = (ncarry + (lo >>> 26)) | 0;

	      hncarry += ncarry >>> 26;
	      ncarry &= 0x3ffffff;
	    }
	    out.words[k] = rword;
	    carry = ncarry;
	    ncarry = hncarry;
	  }
	  if (carry !== 0) {
	    out.words[k] = carry;
	  } else {
	    out.length--;
	  }

	  return out.strip();
	};

	BN.prototype.mulTo = function mulTo(num, out) {
	  var res;
	  if (this.length + num.length < 63)
	    res = this._smallMulTo(num, out);
	  else
	    res = this._bigMulTo(num, out);
	  return res;
	};

	// Multiply `this` by `num`
	BN.prototype.mul = function mul(num) {
	  var out = new BN(null);
	  out.words = new Array(this.length + num.length);
	  return this.mulTo(num, out);
	};

	// In-place Multiplication
	BN.prototype.imul = function imul(num) {
	  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
	    this.words[0] = 0;
	    this.length = 1;
	    return this;
	  }

	  var tlen = this.length;
	  var nlen = num.length;

	  this.sign = num.sign !== this.sign;
	  this.length = this.length + num.length;
	  this.words[this.length - 1] = 0;

	  for (var k = this.length - 2; k >= 0; k--) {
	    // Sum all words with the same `i + j = k` and accumulate `carry`,
	    // note that carry could be >= 0x3ffffff
	    var carry = 0;
	    var rword = 0;
	    var maxJ = Math.min(k, nlen - 1);
	    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
	      var i = k - j;
	      var a = this.words[i];
	      var b = num.words[j];
	      var r = a * b;

	      var lo = r & 0x3ffffff;
	      carry += (r / 0x4000000) | 0;
	      lo += rword;
	      rword = lo & 0x3ffffff;
	      carry += lo >>> 26;
	    }
	    this.words[k] = rword;
	    this.words[k + 1] += carry;
	    carry = 0;
	  }

	  // Propagate overflows
	  var carry = 0;
	  for (var i = 1; i < this.length; i++) {
	    var w = this.words[i] + carry;
	    this.words[i] = w & 0x3ffffff;
	    carry = w >>> 26;
	  }

	  return this.strip();
	};

	BN.prototype.imuln = function imuln(num) {
	  assert(typeof num === 'number');

	  // Carry
	  var carry = 0;
	  for (var i = 0; i < this.length; i++) {
	    var w = this.words[i] * num;
	    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	    carry >>= 26;
	    carry += (w / 0x4000000) | 0;
	    // NOTE: lo is 27bit maximum
	    carry += lo >>> 26;
	    this.words[i] = lo & 0x3ffffff;
	  }

	  if (carry !== 0) {
	    this.words[i] = carry;
	    this.length++;
	  }

	  return this;
	};

	BN.prototype.muln = function muln(num) {
	  return this.clone().imuln(num);
	};

	// `this` * `this`
	BN.prototype.sqr = function sqr() {
	  return this.mul(this);
	};

	// `this` * `this` in-place
	BN.prototype.isqr = function isqr() {
	  return this.mul(this);
	};

	// Shift-left in-place
	BN.prototype.iushln = function iushln(bits) {
	  assert(typeof bits === 'number' && bits >= 0);
	  var r = bits % 26;
	  var s = (bits - r) / 26;
	  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

	  if (r !== 0) {
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var newCarry = this.words[i] & carryMask;
	      var c = (this.words[i] - newCarry) << r;
	      this.words[i] = c | carry;
	      carry = newCarry >>> (26 - r);
	    }
	    if (carry) {
	      this.words[i] = carry;
	      this.length++;
	    }
	  }

	  if (s !== 0) {
	    for (var i = this.length - 1; i >= 0; i--)
	      this.words[i + s] = this.words[i];
	    for (var i = 0; i < s; i++)
	      this.words[i] = 0;
	    this.length += s;
	  }

	  return this.strip();
	};

	BN.prototype.ishln = function ishln(bits) {
	  // TODO(indutny): implement me
	  assert(!this.sign);
	  return this.iushln(bits);
	};

	// Shift-right in-place
	// NOTE: `hint` is a lowest bit before trailing zeroes
	// NOTE: if `extended` is present - it will be filled with destroyed bits
	BN.prototype.iushrn = function iushrn(bits, hint, extended) {
	  assert(typeof bits === 'number' && bits >= 0);
	  var h;
	  if (hint)
	    h = (hint - (hint % 26)) / 26;
	  else
	    h = 0;

	  var r = bits % 26;
	  var s = Math.min((bits - r) / 26, this.length);
	  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	  var maskedWords = extended;

	  h -= s;
	  h = Math.max(0, h);

	  // Extended mode, copy masked part
	  if (maskedWords) {
	    for (var i = 0; i < s; i++)
	      maskedWords.words[i] = this.words[i];
	    maskedWords.length = s;
	  }

	  if (s === 0) {
	    // No-op, we should not move anything at all
	  } else if (this.length > s) {
	    this.length -= s;
	    for (var i = 0; i < this.length; i++)
	      this.words[i] = this.words[i + s];
	  } else {
	    this.words[0] = 0;
	    this.length = 1;
	  }

	  var carry = 0;
	  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	    var word = this.words[i];
	    this.words[i] = (carry << (26 - r)) | (word >>> r);
	    carry = word & mask;
	  }

	  // Push carried bits as a mask
	  if (maskedWords && carry !== 0)
	    maskedWords.words[maskedWords.length++] = carry;

	  if (this.length === 0) {
	    this.words[0] = 0;
	    this.length = 1;
	  }

	  this.strip();

	  return this;
	};

	BN.prototype.ishrn = function ishrn(bits, hint, extended) {
	  // TODO(indutny): implement me
	  assert(!this.sign);
	  return this.iushrn(bits, hint, extended);
	};

	// Shift-left
	BN.prototype.shln = function shln(bits) {
	  return this.clone().ishln(bits);
	};

	BN.prototype.ushln = function ushln(bits) {
	  return this.clone().iushln(bits);
	};

	// Shift-right
	BN.prototype.shrn = function shrn(bits) {
	  return this.clone().ishrn(bits);
	};

	BN.prototype.ushrn = function ushrn(bits) {
	  return this.clone().iushrn(bits);
	};

	// Test if n bit is set
	BN.prototype.testn = function testn(bit) {
	  assert(typeof bit === 'number' && bit >= 0);
	  var r = bit % 26;
	  var s = (bit - r) / 26;
	  var q = 1 << r;

	  // Fast case: bit is much higher than all existing words
	  if (this.length <= s) {
	    return false;
	  }

	  // Check bit and return
	  var w = this.words[s];

	  return !!(w & q);
	};

	// Return only lowers bits of number (in-place)
	BN.prototype.imaskn = function imaskn(bits) {
	  assert(typeof bits === 'number' && bits >= 0);
	  var r = bits % 26;
	  var s = (bits - r) / 26;

	  assert(!this.sign, 'imaskn works only with positive numbers');

	  if (r !== 0)
	    s++;
	  this.length = Math.min(s, this.length);

	  if (r !== 0) {
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    this.words[this.length - 1] &= mask;
	  }

	  return this.strip();
	};

	// Return only lowers bits of number
	BN.prototype.maskn = function maskn(bits) {
	  return this.clone().imaskn(bits);
	};

	// Add plain number `num` to `this`
	BN.prototype.iaddn = function iaddn(num) {
	  assert(typeof num === 'number');
	  if (num < 0)
	    return this.isubn(-num);

	  // Possible sign change
	  if (this.sign) {
	    if (this.length === 1 && this.words[0] < num) {
	      this.words[0] = num - this.words[0];
	      this.sign = false;
	      return this;
	    }

	    this.sign = false;
	    this.isubn(num);
	    this.sign = true;
	    return this;
	  }

	  // Add without checks
	  return this._iaddn(num);
	};

	BN.prototype._iaddn = function _iaddn(num) {
	  this.words[0] += num;

	  // Carry
	  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	    this.words[i] -= 0x4000000;
	    if (i === this.length - 1)
	      this.words[i + 1] = 1;
	    else
	      this.words[i + 1]++;
	  }
	  this.length = Math.max(this.length, i + 1);

	  return this;
	};

	// Subtract plain number `num` from `this`
	BN.prototype.isubn = function isubn(num) {
	  assert(typeof num === 'number');
	  if (num < 0)
	    return this.iaddn(-num);

	  if (this.sign) {
	    this.sign = false;
	    this.iaddn(num);
	    this.sign = true;
	    return this;
	  }

	  this.words[0] -= num;

	  // Carry
	  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	    this.words[i] += 0x4000000;
	    this.words[i + 1] -= 1;
	  }

	  return this.strip();
	};

	BN.prototype.addn = function addn(num) {
	  return this.clone().iaddn(num);
	};

	BN.prototype.subn = function subn(num) {
	  return this.clone().isubn(num);
	};

	BN.prototype.iabs = function iabs() {
	  this.sign = false;

	  return this;
	};

	BN.prototype.abs = function abs() {
	  return this.clone().iabs();
	};

	BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
	  // Bigger storage is needed
	  var len = num.length + shift;
	  var i;
	  if (this.words.length < len) {
	    var t = new Array(len);
	    for (var i = 0; i < this.length; i++)
	      t[i] = this.words[i];
	    this.words = t;
	  } else {
	    i = this.length;
	  }

	  // Zeroify rest
	  this.length = Math.max(this.length, len);
	  for (; i < this.length; i++)
	    this.words[i] = 0;

	  var carry = 0;
	  for (var i = 0; i < num.length; i++) {
	    var w = this.words[i + shift] + carry;
	    var right = num.words[i] * mul;
	    w -= right & 0x3ffffff;
	    carry = (w >> 26) - ((right / 0x4000000) | 0);
	    this.words[i + shift] = w & 0x3ffffff;
	  }
	  for (; i < this.length - shift; i++) {
	    var w = this.words[i + shift] + carry;
	    carry = w >> 26;
	    this.words[i + shift] = w & 0x3ffffff;
	  }

	  if (carry === 0)
	    return this.strip();

	  // Subtraction overflow
	  assert(carry === -1);
	  carry = 0;
	  for (var i = 0; i < this.length; i++) {
	    var w = -this.words[i] + carry;
	    carry = w >> 26;
	    this.words[i] = w & 0x3ffffff;
	  }
	  this.sign = true;

	  return this.strip();
	};

	BN.prototype._wordDiv = function _wordDiv(num, mode) {
	  var shift = this.length - num.length;

	  var a = this.clone();
	  var b = num;

	  // Normalize
	  var bhi = b.words[b.length - 1];
	  var bhiBits = this._countBits(bhi);
	  shift = 26 - bhiBits;
	  if (shift !== 0) {
	    b = b.ushln(shift);
	    a.iushln(shift);
	    bhi = b.words[b.length - 1];
	  }

	  // Initialize quotient
	  var m = a.length - b.length;
	  var q;

	  if (mode !== 'mod') {
	    q = new BN(null);
	    q.length = m + 1;
	    q.words = new Array(q.length);
	    for (var i = 0; i < q.length; i++)
	      q.words[i] = 0;
	  }

	  var diff = a.clone()._ishlnsubmul(b, 1, m);
	  if (!diff.sign) {
	    a = diff;
	    if (q)
	      q.words[m] = 1;
	  }

	  for (var j = m - 1; j >= 0; j--) {
	    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];

	    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	    // (0x7ffffff)
	    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	    a._ishlnsubmul(b, qj, j);
	    while (a.sign) {
	      qj--;
	      a.sign = false;
	      a._ishlnsubmul(b, 1, j);
	      if (a.cmpn(0) !== 0)
	        a.sign = !a.sign;
	    }
	    if (q)
	      q.words[j] = qj;
	  }
	  if (q)
	    q.strip();
	  a.strip();

	  // Denormalize
	  if (mode !== 'div' && shift !== 0)
	    a.iushrn(shift);
	  return { div: q ? q : null, mod: a };
	};

	BN.prototype.divmod = function divmod(num, mode, positive) {
	  assert(num.cmpn(0) !== 0);

	  if (this.sign && !num.sign) {
	    var res = this.neg().divmod(num, mode);
	    var div;
	    var mod;
	    if (mode !== 'mod')
	      div = res.div.neg();
	    if (mode !== 'div') {
	      mod = res.mod.neg();
	      if (positive && mod.neg)
	        mod = mod.add(num);
	    }
	    return {
	      div: div,
	      mod: mod
	    };
	  } else if (!this.sign && num.sign) {
	    var res = this.divmod(num.neg(), mode);
	    var div;
	    if (mode !== 'mod')
	      div = res.div.neg();
	    return { div: div, mod: res.mod };
	  } else if (this.sign && num.sign) {
	    var res = this.neg().divmod(num.neg(), mode);
	    var mod;
	    if (mode !== 'div') {
	      mod = res.mod.neg();
	      if (positive && mod.neg)
	        mod = mod.isub(num);
	    }
	    return {
	      div: res.div,
	      mod: mod
	    };
	  }

	  // Both numbers are positive at this point

	  // Strip both numbers to approximate shift value
	  if (num.length > this.length || this.cmp(num) < 0)
	    return { div: new BN(0), mod: this };

	  // Very short reduction
	  if (num.length === 1) {
	    if (mode === 'div')
	      return { div: this.divn(num.words[0]), mod: null };
	    else if (mode === 'mod')
	      return { div: null, mod: new BN(this.modn(num.words[0])) };
	    return {
	      div: this.divn(num.words[0]),
	      mod: new BN(this.modn(num.words[0]))
	    };
	  }

	  return this._wordDiv(num, mode);
	};

	// Find `this` / `num`
	BN.prototype.div = function div(num) {
	  return this.divmod(num, 'div', false).div;
	};

	// Find `this` % `num`
	BN.prototype.mod = function mod(num) {
	  return this.divmod(num, 'mod', false).mod;
	};

	BN.prototype.umod = function umod(num) {
	  return this.divmod(num, 'mod', true).mod;
	};

	// Find Round(`this` / `num`)
	BN.prototype.divRound = function divRound(num) {
	  var dm = this.divmod(num);

	  // Fast case - exact division
	  if (dm.mod.cmpn(0) === 0)
	    return dm.div;

	  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

	  var half = num.ushrn(1);
	  var r2 = num.andln(1);
	  var cmp = mod.cmp(half);

	  // Round down
	  if (cmp < 0 || r2 === 1 && cmp === 0)
	    return dm.div;

	  // Round up
	  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
	};

	BN.prototype.modn = function modn(num) {
	  assert(num <= 0x3ffffff);
	  var p = (1 << 26) % num;

	  var acc = 0;
	  for (var i = this.length - 1; i >= 0; i--)
	    acc = (p * acc + this.words[i]) % num;

	  return acc;
	};

	// In-place division by number
	BN.prototype.idivn = function idivn(num) {
	  assert(num <= 0x3ffffff);

	  var carry = 0;
	  for (var i = this.length - 1; i >= 0; i--) {
	    var w = this.words[i] + carry * 0x4000000;
	    this.words[i] = (w / num) | 0;
	    carry = w % num;
	  }

	  return this.strip();
	};

	BN.prototype.divn = function divn(num) {
	  return this.clone().idivn(num);
	};

	BN.prototype.egcd = function egcd(p) {
	  assert(!p.sign);
	  assert(p.cmpn(0) !== 0);

	  var x = this;
	  var y = p.clone();

	  if (x.sign)
	    x = x.umod(p);
	  else
	    x = x.clone();

	  // A * x + B * y = x
	  var A = new BN(1);
	  var B = new BN(0);

	  // C * x + D * y = y
	  var C = new BN(0);
	  var D = new BN(1);

	  var g = 0;

	  while (x.isEven() && y.isEven()) {
	    x.iushrn(1);
	    y.iushrn(1);
	    ++g;
	  }

	  var yp = y.clone();
	  var xp = x.clone();

	  while (x.cmpn(0) !== 0) {
	    while (x.isEven()) {
	      x.iushrn(1);
	      if (A.isEven() && B.isEven()) {
	        A.iushrn(1);
	        B.iushrn(1);
	      } else {
	        A.iadd(yp).iushrn(1);
	        B.isub(xp).iushrn(1);
	      }
	    }

	    while (y.isEven()) {
	      y.iushrn(1);
	      if (C.isEven() && D.isEven()) {
	        C.iushrn(1);
	        D.iushrn(1);
	      } else {
	        C.iadd(yp).iushrn(1);
	        D.isub(xp).iushrn(1);
	      }
	    }

	    if (x.cmp(y) >= 0) {
	      x.isub(y);
	      A.isub(C);
	      B.isub(D);
	    } else {
	      y.isub(x);
	      C.isub(A);
	      D.isub(B);
	    }
	  }

	  return {
	    a: C,
	    b: D,
	    gcd: y.iushln(g)
	  };
	};

	// This is reduced incarnation of the binary EEA
	// above, designated to invert members of the
	// _prime_ fields F(p) at a maximal speed
	BN.prototype._invmp = function _invmp(p) {
	  assert(!p.sign);
	  assert(p.cmpn(0) !== 0);

	  var a = this;
	  var b = p.clone();

	  if (a.sign)
	    a = a.umod(p);
	  else
	    a = a.clone();

	  var x1 = new BN(1);
	  var x2 = new BN(0);

	  var delta = b.clone();

	  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	    while (a.isEven()) {
	      a.iushrn(1);
	      if (x1.isEven())
	        x1.iushrn(1);
	      else
	        x1.iadd(delta).iushrn(1);
	    }
	    while (b.isEven()) {
	      b.iushrn(1);
	      if (x2.isEven())
	        x2.iushrn(1);
	      else
	        x2.iadd(delta).iushrn(1);
	    }
	    if (a.cmp(b) >= 0) {
	      a.isub(b);
	      x1.isub(x2);
	    } else {
	      b.isub(a);
	      x2.isub(x1);
	    }
	  }

	  var res;
	  if (a.cmpn(1) === 0)
	    res = x1;
	  else
	    res = x2;

	  if (res.cmpn(0) < 0)
	    res.iadd(p);

	  return res;
	};

	BN.prototype.gcd = function gcd(num) {
	  if (this.cmpn(0) === 0)
	    return num.clone();
	  if (num.cmpn(0) === 0)
	    return this.clone();

	  var a = this.clone();
	  var b = num.clone();
	  a.sign = false;
	  b.sign = false;

	  // Remove common factor of two
	  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	    a.iushrn(1);
	    b.iushrn(1);
	  }

	  do {
	    while (a.isEven())
	      a.iushrn(1);
	    while (b.isEven())
	      b.iushrn(1);

	    var r = a.cmp(b);
	    if (r < 0) {
	      // Swap `a` and `b` to make `a` always bigger than `b`
	      var t = a;
	      a = b;
	      b = t;
	    } else if (r === 0 || b.cmpn(1) === 0) {
	      break;
	    }

	    a.isub(b);
	  } while (true);

	  return b.iushln(shift);
	};

	// Invert number in the field F(num)
	BN.prototype.invm = function invm(num) {
	  return this.egcd(num).a.umod(num);
	};

	BN.prototype.isEven = function isEven() {
	  return (this.words[0] & 1) === 0;
	};

	BN.prototype.isOdd = function isOdd() {
	  return (this.words[0] & 1) === 1;
	};

	// And first word and num
	BN.prototype.andln = function andln(num) {
	  return this.words[0] & num;
	};

	// Increment at the bit position in-line
	BN.prototype.bincn = function bincn(bit) {
	  assert(typeof bit === 'number');
	  var r = bit % 26;
	  var s = (bit - r) / 26;
	  var q = 1 << r;

	  // Fast case: bit is much higher than all existing words
	  if (this.length <= s) {
	    for (var i = this.length; i < s + 1; i++)
	      this.words[i] = 0;
	    this.words[s] |= q;
	    this.length = s + 1;
	    return this;
	  }

	  // Add bit and propagate, if needed
	  var carry = q;
	  for (var i = s; carry !== 0 && i < this.length; i++) {
	    var w = this.words[i];
	    w += carry;
	    carry = w >>> 26;
	    w &= 0x3ffffff;
	    this.words[i] = w;
	  }
	  if (carry !== 0) {
	    this.words[i] = carry;
	    this.length++;
	  }
	  return this;
	};

	BN.prototype.cmpn = function cmpn(num) {
	  var sign = num < 0;
	  if (sign)
	    num = -num;

	  if (this.sign && !sign)
	    return -1;
	  else if (!this.sign && sign)
	    return 1;

	  num &= 0x3ffffff;
	  this.strip();

	  var res;
	  if (this.length > 1) {
	    res = 1;
	  } else {
	    var w = this.words[0];
	    res = w === num ? 0 : w < num ? -1 : 1;
	  }
	  if (this.sign)
	    res = -res;
	  return res;
	};

	// Compare two numbers and return:
	// 1 - if `this` > `num`
	// 0 - if `this` == `num`
	// -1 - if `this` < `num`
	BN.prototype.cmp = function cmp(num) {
	  if (this.sign && !num.sign)
	    return -1;
	  else if (!this.sign && num.sign)
	    return 1;

	  var res = this.ucmp(num);
	  if (this.sign)
	    return -res;
	  else
	    return res;
	};

	// Unsigned comparison
	BN.prototype.ucmp = function ucmp(num) {
	  // At this point both numbers have the same sign
	  if (this.length > num.length)
	    return 1;
	  else if (this.length < num.length)
	    return -1;

	  var res = 0;
	  for (var i = this.length - 1; i >= 0; i--) {
	    var a = this.words[i];
	    var b = num.words[i];

	    if (a === b)
	      continue;
	    if (a < b)
	      res = -1;
	    else if (a > b)
	      res = 1;
	    break;
	  }
	  return res;
	};

	//
	// A reduce context, could be using montgomery or something better, depending
	// on the `m` itself.
	//
	BN.red = function red(num) {
	  return new Red(num);
	};

	BN.prototype.toRed = function toRed(ctx) {
	  assert(!this.red, 'Already a number in reduction context');
	  assert(!this.sign, 'red works only with positives');
	  return ctx.convertTo(this)._forceRed(ctx);
	};

	BN.prototype.fromRed = function fromRed() {
	  assert(this.red, 'fromRed works only with numbers in reduction context');
	  return this.red.convertFrom(this);
	};

	BN.prototype._forceRed = function _forceRed(ctx) {
	  this.red = ctx;
	  return this;
	};

	BN.prototype.forceRed = function forceRed(ctx) {
	  assert(!this.red, 'Already a number in reduction context');
	  return this._forceRed(ctx);
	};

	BN.prototype.redAdd = function redAdd(num) {
	  assert(this.red, 'redAdd works only with red numbers');
	  return this.red.add(this, num);
	};

	BN.prototype.redIAdd = function redIAdd(num) {
	  assert(this.red, 'redIAdd works only with red numbers');
	  return this.red.iadd(this, num);
	};

	BN.prototype.redSub = function redSub(num) {
	  assert(this.red, 'redSub works only with red numbers');
	  return this.red.sub(this, num);
	};

	BN.prototype.redISub = function redISub(num) {
	  assert(this.red, 'redISub works only with red numbers');
	  return this.red.isub(this, num);
	};

	BN.prototype.redShl = function redShl(num) {
	  assert(this.red, 'redShl works only with red numbers');
	  return this.red.ushl(this, num);
	};

	BN.prototype.redMul = function redMul(num) {
	  assert(this.red, 'redMul works only with red numbers');
	  this.red._verify2(this, num);
	  return this.red.mul(this, num);
	};

	BN.prototype.redIMul = function redIMul(num) {
	  assert(this.red, 'redMul works only with red numbers');
	  this.red._verify2(this, num);
	  return this.red.imul(this, num);
	};

	BN.prototype.redSqr = function redSqr() {
	  assert(this.red, 'redSqr works only with red numbers');
	  this.red._verify1(this);
	  return this.red.sqr(this);
	};

	BN.prototype.redISqr = function redISqr() {
	  assert(this.red, 'redISqr works only with red numbers');
	  this.red._verify1(this);
	  return this.red.isqr(this);
	};

	// Square root over p
	BN.prototype.redSqrt = function redSqrt() {
	  assert(this.red, 'redSqrt works only with red numbers');
	  this.red._verify1(this);
	  return this.red.sqrt(this);
	};

	BN.prototype.redInvm = function redInvm() {
	  assert(this.red, 'redInvm works only with red numbers');
	  this.red._verify1(this);
	  return this.red.invm(this);
	};

	// Return negative clone of `this` % `red modulo`
	BN.prototype.redNeg = function redNeg() {
	  assert(this.red, 'redNeg works only with red numbers');
	  this.red._verify1(this);
	  return this.red.neg(this);
	};

	BN.prototype.redPow = function redPow(num) {
	  assert(this.red && !num.red, 'redPow(normalNum)');
	  this.red._verify1(this);
	  return this.red.pow(this, num);
	};

	// Prime numbers with efficient reduction
	var primes = {
	  k256: null,
	  p224: null,
	  p192: null,
	  p25519: null
	};

	// Pseudo-Mersenne prime
	function MPrime(name, p) {
	  // P = 2 ^ N - K
	  this.name = name;
	  this.p = new BN(p, 16);
	  this.n = this.p.bitLength();
	  this.k = new BN(1).iushln(this.n).isub(this.p);

	  this.tmp = this._tmp();
	}

	MPrime.prototype._tmp = function _tmp() {
	  var tmp = new BN(null);
	  tmp.words = new Array(Math.ceil(this.n / 13));
	  return tmp;
	};

	MPrime.prototype.ireduce = function ireduce(num) {
	  // Assumes that `num` is less than `P^2`
	  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	  var r = num;
	  var rlen;

	  do {
	    this.split(r, this.tmp);
	    r = this.imulK(r);
	    r = r.iadd(this.tmp);
	    rlen = r.bitLength();
	  } while (rlen > this.n);

	  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	  if (cmp === 0) {
	    r.words[0] = 0;
	    r.length = 1;
	  } else if (cmp > 0) {
	    r.isub(this.p);
	  } else {
	    r.strip();
	  }

	  return r;
	};

	MPrime.prototype.split = function split(input, out) {
	  input.iushrn(this.n, 0, out);
	};

	MPrime.prototype.imulK = function imulK(num) {
	  return num.imul(this.k);
	};

	function K256() {
	  MPrime.call(
	    this,
	    'k256',
	    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	}
	inherits(K256, MPrime);

	K256.prototype.split = function split(input, output) {
	  // 256 = 9 * 26 + 22
	  var mask = 0x3fffff;

	  var outLen = Math.min(input.length, 9);
	  for (var i = 0; i < outLen; i++)
	    output.words[i] = input.words[i];
	  output.length = outLen;

	  if (input.length <= 9) {
	    input.words[0] = 0;
	    input.length = 1;
	    return;
	  }

	  // Shift by 9 limbs
	  var prev = input.words[9];
	  output.words[output.length++] = prev & mask;

	  for (var i = 10; i < input.length; i++) {
	    var next = input.words[i];
	    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	    prev = next;
	  }
	  input.words[i - 10] = prev >>> 22;
	  input.length -= 9;
	};

	K256.prototype.imulK = function imulK(num) {
	  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	  num.words[num.length] = 0;
	  num.words[num.length + 1] = 0;
	  num.length += 2;

	  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	  var hi;
	  var lo = 0;
	  for (var i = 0; i < num.length; i++) {
	    var w = num.words[i];
	    hi = w * 0x40;
	    lo += w * 0x3d1;
	    hi += (lo / 0x4000000) | 0;
	    lo &= 0x3ffffff;

	    num.words[i] = lo;

	    lo = hi;
	  }

	  // Fast length reduction
	  if (num.words[num.length - 1] === 0) {
	    num.length--;
	    if (num.words[num.length - 1] === 0)
	      num.length--;
	  }
	  return num;
	};

	function P224() {
	  MPrime.call(
	    this,
	    'p224',
	    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	}
	inherits(P224, MPrime);

	function P192() {
	  MPrime.call(
	    this,
	    'p192',
	    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	}
	inherits(P192, MPrime);

	function P25519() {
	  // 2 ^ 255 - 19
	  MPrime.call(
	    this,
	    '25519',
	    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	}
	inherits(P25519, MPrime);

	P25519.prototype.imulK = function imulK(num) {
	  // K = 0x13
	  var carry = 0;
	  for (var i = 0; i < num.length; i++) {
	    var hi = num.words[i] * 0x13 + carry;
	    var lo = hi & 0x3ffffff;
	    hi >>>= 26;

	    num.words[i] = lo;
	    carry = hi;
	  }
	  if (carry !== 0)
	    num.words[num.length++] = carry;
	  return num;
	};

	// Exported mostly for testing purposes, use plain name instead
	BN._prime = function prime(name) {
	  // Cached version of prime
	  if (primes[name])
	    return primes[name];

	  var prime;
	  if (name === 'k256')
	    prime = new K256();
	  else if (name === 'p224')
	    prime = new P224();
	  else if (name === 'p192')
	    prime = new P192();
	  else if (name === 'p25519')
	    prime = new P25519();
	  else
	    throw new Error('Unknown prime ' + name);
	  primes[name] = prime;

	  return prime;
	};

	//
	// Base reduction engine
	//
	function Red(m) {
	  if (typeof m === 'string') {
	    var prime = BN._prime(m);
	    this.m = prime.p;
	    this.prime = prime;
	  } else {
	    this.m = m;
	    this.prime = null;
	  }
	}

	Red.prototype._verify1 = function _verify1(a) {
	  assert(!a.sign, 'red works only with positives');
	  assert(a.red, 'red works only with red numbers');
	};

	Red.prototype._verify2 = function _verify2(a, b) {
	  assert(!a.sign && !b.sign, 'red works only with positives');
	  assert(a.red && a.red === b.red,
	         'red works only with red numbers');
	};

	Red.prototype.imod = function imod(a) {
	  if (this.prime)
	    return this.prime.ireduce(a)._forceRed(this);
	  return a.umod(this.m)._forceRed(this);
	};

	Red.prototype.neg = function neg(a) {
	  var r = a.clone();
	  r.sign = !r.sign;
	  return r.iadd(this.m)._forceRed(this);
	};

	Red.prototype.add = function add(a, b) {
	  this._verify2(a, b);

	  var res = a.add(b);
	  if (res.cmp(this.m) >= 0)
	    res.isub(this.m);
	  return res._forceRed(this);
	};

	Red.prototype.iadd = function iadd(a, b) {
	  this._verify2(a, b);

	  var res = a.iadd(b);
	  if (res.cmp(this.m) >= 0)
	    res.isub(this.m);
	  return res;
	};

	Red.prototype.sub = function sub(a, b) {
	  this._verify2(a, b);

	  var res = a.sub(b);
	  if (res.cmpn(0) < 0)
	    res.iadd(this.m);
	  return res._forceRed(this);
	};

	Red.prototype.isub = function isub(a, b) {
	  this._verify2(a, b);

	  var res = a.isub(b);
	  if (res.cmpn(0) < 0)
	    res.iadd(this.m);
	  return res;
	};

	Red.prototype.shl = function shl(a, num) {
	  this._verify1(a);
	  return this.imod(a.ushln(num));
	};

	Red.prototype.imul = function imul(a, b) {
	  this._verify2(a, b);
	  return this.imod(a.imul(b));
	};

	Red.prototype.mul = function mul(a, b) {
	  this._verify2(a, b);
	  return this.imod(a.mul(b));
	};

	Red.prototype.isqr = function isqr(a) {
	  return this.imul(a, a);
	};

	Red.prototype.sqr = function sqr(a) {
	  return this.mul(a, a);
	};

	Red.prototype.sqrt = function sqrt(a) {
	  if (a.cmpn(0) === 0)
	    return a.clone();

	  var mod3 = this.m.andln(3);
	  assert(mod3 % 2 === 1);

	  // Fast case
	  if (mod3 === 3) {
	    var pow = this.m.add(new BN(1)).iushrn(2);
	    var r = this.pow(a, pow);
	    return r;
	  }

	  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	  //
	  // Find Q and S, that Q * 2 ^ S = (P - 1)
	  var q = this.m.subn(1);
	  var s = 0;
	  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
	    s++;
	    q.iushrn(1);
	  }
	  assert(q.cmpn(0) !== 0);

	  var one = new BN(1).toRed(this);
	  var nOne = one.redNeg();

	  // Find quadratic non-residue
	  // NOTE: Max is such because of generalized Riemann hypothesis.
	  var lpow = this.m.subn(1).iushrn(1);
	  var z = this.m.bitLength();
	  z = new BN(2 * z * z).toRed(this);
	  while (this.pow(z, lpow).cmp(nOne) !== 0)
	    z.redIAdd(nOne);

	  var c = this.pow(z, q);
	  var r = this.pow(a, q.addn(1).iushrn(1));
	  var t = this.pow(a, q);
	  var m = s;
	  while (t.cmp(one) !== 0) {
	    var tmp = t;
	    for (var i = 0; tmp.cmp(one) !== 0; i++)
	      tmp = tmp.redSqr();
	    assert(i < m);
	    var b = this.pow(c, new BN(1).iushln(m - i - 1));

	    r = r.redMul(b);
	    c = b.redSqr();
	    t = t.redMul(c);
	    m = i;
	  }

	  return r;
	};

	Red.prototype.invm = function invm(a) {
	  var inv = a._invmp(this.m);
	  if (inv.sign) {
	    inv.sign = false;
	    return this.imod(inv).redNeg();
	  } else {
	    return this.imod(inv);
	  }
	};

	Red.prototype.pow = function pow(a, num) {
	  var w = [];

	  if (num.cmpn(0) === 0)
	    return new BN(1);

	  var q = num.clone();

	  while (q.cmpn(0) !== 0) {
	    w.push(q.andln(1));
	    q.iushrn(1);
	  }

	  // Skip leading zeroes
	  var res = a;
	  for (var i = 0; i < w.length; i++, res = this.sqr(res))
	    if (w[i] !== 0)
	      break;

	  if (++i < w.length) {
	    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
	      if (w[i] === 0)
	        continue;
	      res = this.mul(res, q);
	    }
	  }

	  return res;
	};

	Red.prototype.convertTo = function convertTo(num) {
	  var r = num.umod(this.m);
	  if (r === num)
	    return r.clone();
	  else
	    return r;
	};

	Red.prototype.convertFrom = function convertFrom(num) {
	  var res = num.clone();
	  res.red = null;
	  return res;
	};

	//
	// Montgomery method engine
	//

	BN.mont = function mont(num) {
	  return new Mont(num);
	};

	function Mont(m) {
	  Red.call(this, m);

	  this.shift = this.m.bitLength();
	  if (this.shift % 26 !== 0)
	    this.shift += 26 - (this.shift % 26);
	  this.r = new BN(1).iushln(this.shift);
	  this.r2 = this.imod(this.r.sqr());
	  this.rinv = this.r._invmp(this.m);

	  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	  this.minv = this.minv.umod(this.r);
	  this.minv = this.r.sub(this.minv);
	}
	inherits(Mont, Red);

	Mont.prototype.convertTo = function convertTo(num) {
	  return this.imod(num.ushln(this.shift));
	};

	Mont.prototype.convertFrom = function convertFrom(num) {
	  var r = this.imod(num.mul(this.rinv));
	  r.red = null;
	  return r;
	};

	Mont.prototype.imul = function imul(a, b) {
	  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
	    a.words[0] = 0;
	    a.length = 1;
	    return a;
	  }

	  var t = a.imul(b);
	  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	  var u = t.isub(c).iushrn(this.shift);
	  var res = u;
	  if (u.cmp(this.m) >= 0)
	    res = u.isub(this.m);
	  else if (u.cmpn(0) < 0)
	    res = u.iadd(this.m);

	  return res._forceRed(this);
	};

	Mont.prototype.mul = function mul(a, b) {
	  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
	    return new BN(0)._forceRed(this);

	  var t = a.mul(b);
	  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	  var u = t.isub(c).iushrn(this.shift);
	  var res = u;
	  if (u.cmp(this.m) >= 0)
	    res = u.isub(this.m);
	  else if (u.cmpn(0) < 0)
	    res = u.iadd(this.m);

	  return res._forceRed(this);
	};

	Mont.prototype.invm = function invm(a) {
	  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	  var res = this.imod(a._invmp(this.m).mul(this.r2));
	  return res._forceRed(this);
	};

	})(typeof module === 'undefined' || module, this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(108)(module)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var hash = exports;

	hash.utils = __webpack_require__(113);
	hash.common = __webpack_require__(114);
	hash.sha = __webpack_require__(115);
	hash.ripemd = __webpack_require__(116);
	hash.hmac = __webpack_require__(117);

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	/**
	 * Module dependencies.
	 */

	var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var url = __webpack_require__(80);
	var extend = __webpack_require__(136);
	var Agent = __webpack_require__(142);
	var inherits = __webpack_require__(81).inherits;
	var debug = __webpack_require__(143)('https-proxy-agent');

	/**
	 * Module exports.
	 */

	module.exports = HttpsProxyAgent;

	/**
	 * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to the
	 * specified "HTTP(s) proxy server" in order to proxy HTTPS requests.
	 *
	 * @api public
	 */

	function HttpsProxyAgent (opts) {
	  if (!(this instanceof HttpsProxyAgent)) return new HttpsProxyAgent(opts);
	  if ('string' == typeof opts) opts = url.parse(opts);
	  if (!opts) throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');
	  debug('creating new HttpsProxyAgent instance: %o', opts);
	  Agent.call(this, connect);

	  var proxy = extend({}, opts);

	  // if `true`, then connect to the proxy server over TLS. defaults to `false`.
	  this.secureProxy = proxy.protocol ? /^https:?$/i.test(proxy.protocol) : false;

	  // prefer `hostname` over `host`, and set the `port` if needed
	  proxy.host = proxy.hostname || proxy.host;
	  proxy.port = +proxy.port || (this.secureProxy ? 443 : 80);

	  if (proxy.host && proxy.path) {
	    // if both a `host` and `path` are specified then it's most likely the
	    // result of a `url.parse()` call... we need to remove the `path` portion so
	    // that `net.connect()` doesn't attempt to open that as a unix socket file.
	    delete proxy.path;
	    delete proxy.pathname;
	  }

	  this.proxy = proxy;
	}
	inherits(HttpsProxyAgent, Agent);

	/**
	 * Called when the node-core HTTP client library is creating a new HTTP request.
	 *
	 * @api public
	 */

	function connect (req, opts, fn) {

	  var proxy = this.proxy;

	  // create a socket connection to the proxy server
	  var socket;
	  if (this.secureProxy) {
	    socket = tls.connect(proxy);
	  } else {
	    socket = net.connect(proxy);
	  }

	  // we need to buffer any HTTP traffic that happens with the proxy before we get
	  // the CONNECT response, so that if the response is anything other than an "200"
	  // response code, then we can re-play the "data" events on the socket once the
	  // HTTP parser is hooked up...
	  var buffers = [];
	  var buffersLength = 0;

	  function read () {
	    var b = socket.read();
	    if (b) ondata(b);
	    else socket.once('readable', read);
	  }

	  function cleanup () {
	    socket.removeListener('data', ondata);
	    socket.removeListener('end', onend);
	    socket.removeListener('error', onerror);
	    socket.removeListener('close', onclose);
	    socket.removeListener('readable', read);
	  }

	  function onclose (err) {
	    debug('onclose had error %o', err);
	  }

	  function onend () {
	    debug('onend');
	  }

	  function onerror (err) {
	    cleanup();
	    fn(err);
	  }

	  function ondata (b) {
	    buffers.push(b);
	    buffersLength += b.length;
	    var buffered = Buffer.concat(buffers, buffersLength);
	    var str = buffered.toString('ascii');

	    if (!~str.indexOf('\r\n\r\n')) {
	      // keep buffering
	      debug('have not received end of HTTP headers yet...');
	      if (socket.read) {
	        read();
	      } else {
	        socket.once('data', ondata);
	      }
	      return;
	    }

	    var firstLine = str.substring(0, str.indexOf('\r\n'));
	    var statusCode = +firstLine.split(' ')[1];
	    debug('got proxy server response: %o', firstLine);

	    if (200 == statusCode) {
	      // 200 Connected status code!
	      var sock = socket;

	      // nullify the buffered data since we won't be needing it
	      buffers = buffered = null;

	      if (opts.secureEndpoint) {
	        // since the proxy is connecting to an SSL server, we have
	        // to upgrade this socket connection to an SSL connection
	        debug('upgrading proxy-connected socket to TLS connection: %o', opts.host);
	        opts.socket = socket;
	        opts.servername = opts.host;
	        opts.host = null;
	        opts.hostname = null;
	        opts.port = null;
	        sock = tls.connect(opts);
	      }

	      cleanup();
	      fn(null, sock);
	    } else {
	      // some other status code that's not 200... need to re-play the HTTP header
	      // "data" events onto the socket once the HTTP machinery is attached so that
	      // the user can parse and handle the error status code
	      cleanup();

	      // save a reference to the concat'd Buffer for the `onsocket` callback
	      buffers = buffered;

	      // need to wait for the "socket" event to re-play the "data" events
	      req.once('socket', onsocket);
	      fn(null, socket);
	    }
	  }

	  function onsocket (socket) {
	    // replay the "buffers" Buffer onto the `socket`, since at this point
	    // the HTTP module machinery has been hooked up for the user
	    if ('function' == typeof socket.ondata) {
	      // node <= v0.11.3, the `ondata` function is set on the socket
	      socket.ondata(buffers, 0, buffers.length);
	    } else if (socket.listeners('data').length > 0) {
	      // node > v0.11.3, the "data" event is listened for directly
	      socket.emit('data', buffers);
	    } else {
	      // never?
	      throw new Error('should not happen...');
	    }

	    // nullify the cached Buffer instance
	    buffers = null;
	  }

	  socket.on('error', onerror);
	  socket.on('close', onclose);
	  socket.on('end', onend);

	  if (socket.read) {
	    read();
	  } else {
	    socket.once('data', ondata);
	  }

	  var hostname = opts.host + ':' + opts.port;
	  var msg = 'CONNECT ' + hostname + ' HTTP/1.1\r\n';
	  var auth = proxy.auth;
	  if (auth) {
	    msg += 'Proxy-Authorization: Basic ' + new Buffer(auth).toString('base64') + '\r\n';
	  }
	  msg += 'Host: ' + hostname + '\r\n' +
	         'Connection: close\r\n' +
	         '\r\n';
	  socket.write(msg);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */

	;(function (global) {
	    'use strict';

	    /*
	      bignumber.js v2.0.7
	      A JavaScript library for arbitrary-precision arithmetic.
	      https://github.com/MikeMcl/bignumber.js
	      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
	      MIT Expat Licence
	    */


	    var BigNumber, crypto, parseNumeric,
	        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	        mathceil = Math.ceil,
	        mathfloor = Math.floor,
	        notBool = ' not a boolean or binary digit',
	        roundingMode = 'rounding mode',
	        tooManyDigits = 'number type has more than 15 significant digits',
	        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
	        BASE = 1e14,
	        LOG_BASE = 14,
	        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	        SQRT_BASE = 1e7,

	        /*
	         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
	         * exception is thrown (if ERRORS is true).
	         */
	        MAX = 1E9;                                   // 0 to MAX_INT32


	    /*
	     * Create and return a BigNumber constructor.
	     */
	    function another(configObj) {
	        var div,

	            // id tracks the caller function, so its name can be included in error messages.
	            id = 0,
	            P = BigNumber.prototype,
	            ONE = new BigNumber(1),


	            /********************************* EDITABLE DEFAULTS **********************************/


	            /*
	             * The default values below must be integers within the inclusive ranges stated.
	             * The values can also be changed at run-time using BigNumber.config.
	             */

	            // The maximum number of decimal places for operations involving division.
	            DECIMAL_PLACES = 20,                     // 0 to MAX

	            /*
	             * The rounding mode used when rounding to the above decimal places, and when using
	             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
	             * UP         0 Away from zero.
	             * DOWN       1 Towards zero.
	             * CEIL       2 Towards +Infinity.
	             * FLOOR      3 Towards -Infinity.
	             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	             */
	            ROUNDING_MODE = 4,                       // 0 to 8

	            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	            // The exponent value at and beneath which toString returns exponential notation.
	            // Number type: -7
	            TO_EXP_NEG = -7,                         // 0 to -MAX

	            // The exponent value at and above which toString returns exponential notation.
	            // Number type: 21
	            TO_EXP_POS = 21,                         // 0 to MAX

	            // RANGE : [MIN_EXP, MAX_EXP]

	            // The minimum exponent value, beneath which underflow to zero occurs.
	            // Number type: -324  (5e-324)
	            MIN_EXP = -1e7,                          // -1 to -MAX

	            // The maximum exponent value, above which overflow to Infinity occurs.
	            // Number type:  308  (1.7976931348623157e+308)
	            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	            MAX_EXP = 1e7,                           // 1 to MAX

	            // Whether BigNumber Errors are ever thrown.
	            ERRORS = true,                           // true or false

	            // Change to intValidatorNoErrors if ERRORS is false.
	            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

	            // Whether to use cryptographically-secure random number generation, if available.
	            CRYPTO = false,                          // true or false

	            /*
	             * The modulo mode used when calculating the modulus: a mod n.
	             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	             * The remainder (r) is calculated as: r = a - n * q.
	             *
	             * UP        0 The remainder is positive if the dividend is negative, else is negative.
	             * DOWN      1 The remainder has the same sign as the dividend.
	             *             This modulo mode is commonly known as 'truncated division' and is
	             *             equivalent to (a % n) in JavaScript.
	             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
	             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	             *             The remainder is always positive.
	             *
	             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
	             * modes are commonly used for the modulus operation.
	             * Although the other rounding modes can also be used, they may not give useful results.
	             */
	            MODULO_MODE = 1,                         // 0 to 9

	            // The maximum number of significant digits of the result of the toPower operation.
	            // If POW_PRECISION is 0, there will be unlimited significant digits.
	            POW_PRECISION = 100,                     // 0 to MAX

	            // The format specification used by the BigNumber.prototype.toFormat method.
	            FORMAT = {
	                decimalSeparator: '.',
	                groupSeparator: ',',
	                groupSize: 3,
	                secondaryGroupSize: 0,
	                fractionGroupSeparator: '\xA0',      // non-breaking space
	                fractionGroupSize: 0
	            };


	        /******************************************************************************************/


	        // CONSTRUCTOR


	        /*
	         * The BigNumber constructor and exported function.
	         * Create and return a new instance of a BigNumber object.
	         *
	         * n {number|string|BigNumber} A numeric value.
	         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
	         */
	        function BigNumber( n, b ) {
	            var c, e, i, num, len, str,
	                x = this;

	            // Enable constructor usage without new.
	            if ( !( x instanceof BigNumber ) ) {

	                // 'BigNumber() constructor call without new: {n}'
	                if (ERRORS) raise( 26, 'constructor call without new', n );
	                return new BigNumber( n, b );
	            }

	            // 'new BigNumber() base not an integer: {b}'
	            // 'new BigNumber() base out of range: {b}'
	            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {

	                // Duplicate.
	                if ( n instanceof BigNumber ) {
	                    x.s = n.s;
	                    x.e = n.e;
	                    x.c = ( n = n.c ) ? n.slice() : n;
	                    id = 0;
	                    return;
	                }

	                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {
	                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;

	                    // Fast path for integers.
	                    if ( n === ~~n ) {
	                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );
	                        x.e = e;
	                        x.c = [n];
	                        id = 0;
	                        return;
	                    }

	                    str = n + '';
	                } else {
	                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }
	            } else {
	                b = b | 0;
	                str = n + '';

	                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
	                // Allow exponential notation to be used with base 10 argument.
	                if ( b == 10 ) {
	                    x = new BigNumber( n instanceof BigNumber ? n : str );
	                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );
	                }

	                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	                // Any number in exponential form will fail due to the [Ee][+-].
	                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||
	                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +
	                    '(?:\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {
	                    return parseNumeric( x, str, num, b );
	                }

	                if (num) {
	                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;

	                    if ( ERRORS && str.replace( /^0\.0*|\./, '' ).length > 15 ) {

	                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                        raise( id, tooManyDigits, n );
	                    }

	                    // Prevent later check for length on converted number.
	                    num = false;
	                } else {
	                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;
	                }

	                str = convertBase( str, 10, b, x.s );
	            }

	            // Decimal point?
	            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );

	            // Exponential form?
	            if ( ( i = str.search( /e/i ) ) > 0 ) {

	                // Determine exponent.
	                if ( e < 0 ) e = i;
	                e += +str.slice( i + 1 );
	                str = str.substring( 0, i );
	            } else if ( e < 0 ) {

	                // Integer.
	                e = str.length;
	            }

	            // Determine leading zeros.
	            for ( i = 0; str.charCodeAt(i) === 48; i++ );

	            // Determine trailing zeros.
	            for ( len = str.length; str.charCodeAt(--len) === 48; );
	            str = str.slice( i, len + 1 );

	            if (str) {
	                len = str.length;

	                // Disallow numbers with over 15 significant digits if number type.
	                // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );

	                e = e - i - 1;

	                 // Overflow?
	                if ( e > MAX_EXP ) {

	                    // Infinity.
	                    x.c = x.e = null;

	                // Underflow?
	                } else if ( e < MIN_EXP ) {

	                    // Zero.
	                    x.c = [ x.e = 0 ];
	                } else {
	                    x.e = e;
	                    x.c = [];

	                    // Transform base

	                    // e is the base 10 exponent.
	                    // i is where to slice str to get the first element of the coefficient array.
	                    i = ( e + 1 ) % LOG_BASE;
	                    if ( e < 0 ) i += LOG_BASE;

	                    if ( i < len ) {
	                        if (i) x.c.push( +str.slice( 0, i ) );

	                        for ( len -= LOG_BASE; i < len; ) {
	                            x.c.push( +str.slice( i, i += LOG_BASE ) );
	                        }

	                        str = str.slice(i);
	                        i = LOG_BASE - str.length;
	                    } else {
	                        i -= len;
	                    }

	                    for ( ; i--; str += '0' );
	                    x.c.push( +str );
	                }
	            } else {

	                // Zero.
	                x.c = [ x.e = 0 ];
	            }

	            id = 0;
	        }


	        // CONSTRUCTOR PROPERTIES


	        BigNumber.another = another;

	        BigNumber.ROUND_UP = 0;
	        BigNumber.ROUND_DOWN = 1;
	        BigNumber.ROUND_CEIL = 2;
	        BigNumber.ROUND_FLOOR = 3;
	        BigNumber.ROUND_HALF_UP = 4;
	        BigNumber.ROUND_HALF_DOWN = 5;
	        BigNumber.ROUND_HALF_EVEN = 6;
	        BigNumber.ROUND_HALF_CEIL = 7;
	        BigNumber.ROUND_HALF_FLOOR = 8;
	        BigNumber.EUCLID = 9;


	        /*
	         * Configure infrequently-changing library-wide settings.
	         *
	         * Accept an object or an argument list, with one or many of the following properties or
	         * parameters respectively:
	         *
	         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
	         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
	         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
	         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
	         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
	         *   ERRORS          {boolean|number}   true, false, 1 or 0
	         *   CRYPTO          {boolean|number}   true, false, 1 or 0
	         *   MODULO_MODE     {number}           0 to 9 inclusive
	         *   POW_PRECISION   {number}           0 to MAX inclusive
	         *   FORMAT          {object}           See BigNumber.prototype.toFormat
	         *      decimalSeparator       {string}
	         *      groupSeparator         {string}
	         *      groupSize              {number}
	         *      secondaryGroupSize     {number}
	         *      fractionGroupSeparator {string}
	         *      fractionGroupSize      {number}
	         *
	         * (The values assigned to the above FORMAT object properties are not checked for validity.)
	         *
	         * E.g.
	         * BigNumber.config(20, 4) is equivalent to
	         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	         *
	         * Ignore properties/parameters set to null or undefined.
	         * Return an object with the properties current values.
	         */
	        BigNumber.config = function () {
	            var v, p,
	                i = 0,
	                r = {},
	                a = arguments,
	                o = a[0],
	                has = o && typeof o == 'object'
	                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }
	                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };

	            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	            // 'config() DECIMAL_PLACES not an integer: {v}'
	            // 'config() DECIMAL_PLACES out of range: {v}'
	            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                DECIMAL_PLACES = v | 0;
	            }
	            r[p] = DECIMAL_PLACES;

	            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	            // 'config() ROUNDING_MODE not an integer: {v}'
	            // 'config() ROUNDING_MODE out of range: {v}'
	            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {
	                ROUNDING_MODE = v | 0;
	            }
	            r[p] = ROUNDING_MODE;

	            // EXPONENTIAL_AT {number|number[]}
	            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	            // 'config() EXPONENTIAL_AT not an integer: {v}'
	            // 'config() EXPONENTIAL_AT out of range: {v}'
	            if ( has( p = 'EXPONENTIAL_AT' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {
	                        TO_EXP_NEG = v[0] | 0;
	                        TO_EXP_POS = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );
	                }
	            }
	            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

	            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	            // 'config() RANGE not an integer: {v}'
	            // 'config() RANGE cannot be zero: {v}'
	            // 'config() RANGE out of range: {v}'
	            if ( has( p = 'RANGE' ) ) {

	                if ( isArray(v) ) {
	                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {
	                        MIN_EXP = v[0] | 0;
	                        MAX_EXP = v[1] | 0;
	                    }
	                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {
	                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );
	                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );
	                }
	            }
	            r[p] = [ MIN_EXP, MAX_EXP ];

	            // ERRORS {boolean|number} true, false, 1 or 0.
	            // 'config() ERRORS not a boolean or binary digit: {v}'
	            if ( has( p = 'ERRORS' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    id = 0;
	                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = ERRORS;

	            // CRYPTO {boolean|number} true, false, 1 or 0.
	            // 'config() CRYPTO not a boolean or binary digit: {v}'
	            // 'config() crypto unavailable: {crypto}'
	            if ( has( p = 'CRYPTO' ) ) {

	                if ( v === !!v || v === 1 || v === 0 ) {
	                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );
	                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );
	                } else if (ERRORS) {
	                    raise( 2, p + notBool, v );
	                }
	            }
	            r[p] = CRYPTO;

	            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	            // 'config() MODULO_MODE not an integer: {v}'
	            // 'config() MODULO_MODE out of range: {v}'
	            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {
	                MODULO_MODE = v | 0;
	            }
	            r[p] = MODULO_MODE;

	            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	            // 'config() POW_PRECISION not an integer: {v}'
	            // 'config() POW_PRECISION out of range: {v}'
	            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {
	                POW_PRECISION = v | 0;
	            }
	            r[p] = POW_PRECISION;

	            // FORMAT {object}
	            // 'config() FORMAT not an object: {v}'
	            if ( has( p = 'FORMAT' ) ) {

	                if ( typeof v == 'object' ) {
	                    FORMAT = v;
	                } else if (ERRORS) {
	                    raise( 2, p + ' not an object', v );
	                }
	            }
	            r[p] = FORMAT;

	            return r;
	        };


	        /*
	         * Return a new BigNumber whose value is the maximum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };


	        /*
	         * Return a new BigNumber whose value is the minimum of the arguments.
	         *
	         * arguments {number|string|BigNumber}
	         */
	        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };


	        /*
	         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	         * zeros are produced).
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         *
	         * 'random() decimal places not an integer: {dp}'
	         * 'random() decimal places out of range: {dp}'
	         * 'random() crypto unavailable: {crypto}'
	         */
	        BigNumber.random = (function () {
	            var pow2_53 = 0x20000000000000;

	            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	            // Check if Math.random() produces more than 32 bits of randomness.
	            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	              ? function () { return mathfloor( Math.random() * pow2_53 ); }
	              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	                  (Math.random() * 0x800000 | 0); };

	            return function (dp) {
	                var a, b, e, k, v,
	                    i = 0,
	                    c = [],
	                    rand = new BigNumber(ONE);

	                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;
	                k = mathceil( dp / LOG_BASE );

	                if (CRYPTO) {

	                    // Browsers supporting crypto.getRandomValues.
	                    if ( crypto && crypto.getRandomValues ) {

	                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );

	                        for ( ; i < k; ) {

	                            // 53 bits:
	                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	                            //                                     11111 11111111 11111111
	                            // 0x20000 is 2^21.
	                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	                            // Rejection sampling:
	                            // 0 <= v < 9007199254740992
	                            // Probability that v >= 9e15, is
	                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	                            if ( v >= 9e15 ) {
	                                b = crypto.getRandomValues( new Uint32Array(2) );
	                                a[i] = b[0];
	                                a[i + 1] = b[1];
	                            } else {

	                                // 0 <= v <= 8999999999999999
	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 2;
	                            }
	                        }
	                        i = k / 2;

	                    // Node.js supporting crypto.randomBytes.
	                    } else if ( crypto && crypto.randomBytes ) {

	                        // buffer
	                        a = crypto.randomBytes( k *= 7 );

	                        for ( ; i < k; ) {

	                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	                            // 0x100000000 is 2^32, 0x1000000 is 2^24
	                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	                            // 0 <= v < 9007199254740992
	                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +
	                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +
	                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];

	                            if ( v >= 9e15 ) {
	                                crypto.randomBytes(7).copy( a, i );
	                            } else {

	                                // 0 <= (v % 1e14) <= 99999999999999
	                                c.push( v % 1e14 );
	                                i += 7;
	                            }
	                        }
	                        i = k / 7;
	                    } else if (ERRORS) {
	                        raise( 14, 'crypto unavailable', crypto );
	                    }
	                }

	                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
	                if (!i) {

	                    for ( ; i < k; ) {
	                        v = random53bitInt();
	                        if ( v < 9e15 ) c[i++] = v % 1e14;
	                    }
	                }

	                k = c[--i];
	                dp %= LOG_BASE;

	                // Convert trailing digits to zeros according to dp.
	                if ( k && dp ) {
	                    v = POWS_TEN[LOG_BASE - dp];
	                    c[i] = mathfloor( k / v ) * v;
	                }

	                // Remove trailing elements which are zero.
	                for ( ; c[i] === 0; c.pop(), i-- );

	                // Zero?
	                if ( i < 0 ) {
	                    c = [ e = 0 ];
	                } else {

	                    // Remove leading elements which are zero and adjust exponent accordingly.
	                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);

	                    // Count the digits of the first element of c to determine leading zeros, and...
	                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);

	                    // adjust the exponent accordingly.
	                    if ( i < LOG_BASE ) e -= LOG_BASE - i;
	                }

	                rand.e = e;
	                rand.c = c;
	                return rand;
	            };
	        })();


	        // PRIVATE FUNCTIONS


	        // Convert a numeric string of baseIn to a numeric string of baseOut.
	        function convertBase( str, baseOut, baseIn, sign ) {
	            var d, e, k, r, x, xc, y,
	                i = str.indexOf( '.' ),
	                dp = DECIMAL_PLACES,
	                rm = ROUNDING_MODE;

	            if ( baseIn < 37 ) str = str.toLowerCase();

	            // Non-integer.
	            if ( i >= 0 ) {
	                k = POW_PRECISION;

	                // Unlimited precision.
	                POW_PRECISION = 0;
	                str = str.replace( '.', '' );
	                y = new BigNumber(baseIn);
	                x = y.pow( str.length - i );
	                POW_PRECISION = k;

	                // Convert str as if an integer, then restore the fraction part by dividing the
	                // result by its base raised to a power.
	                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );
	                y.e = y.c.length;
	            }

	            // Convert the number as integer.
	            xc = toBaseOut( str, baseIn, baseOut );
	            e = k = xc.length;

	            // Remove trailing zeros.
	            for ( ; xc[--k] == 0; xc.pop() );
	            if ( !xc[0] ) return '0';

	            if ( i < 0 ) {
	                --e;
	            } else {
	                x.c = xc;
	                x.e = e;

	                // sign is needed for correct rounding.
	                x.s = sign;
	                x = div( x, y, dp, rm, baseOut );
	                xc = x.c;
	                r = x.r;
	                e = x.e;
	            }

	            d = e + dp + 1;

	            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
	            i = xc[d];
	            k = baseOut / 2;
	            r = r || d < 0 || xc[d + 1] != null;

	            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	                         rm == ( x.s < 0 ? 8 : 7 ) );

	            if ( d < 1 || !xc[0] ) {

	                // 1^-dp or 0.
	                str = r ? toFixedPoint( '1', -dp ) : '0';
	            } else {
	                xc.length = d;

	                if (r) {

	                    // Rounding up may mean the previous digit has to be rounded up and so on.
	                    for ( --baseOut; ++xc[--d] > baseOut; ) {
	                        xc[d] = 0;

	                        if ( !d ) {
	                            ++e;
	                            xc.unshift(1);
	                        }
	                    }
	                }

	                // Determine trailing zeros.
	                for ( k = xc.length; !xc[--k]; );

	                // E.g. [4, 11, 15] becomes 4bf.
	                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );
	                str = toFixedPoint( str, e );
	            }

	            // The caller will add the sign.
	            return str;
	        }


	        // Perform division in the specified base. Called by div and convertBase.
	        div = (function () {

	            // Assume non-zero x and k.
	            function multiply( x, k, base ) {
	                var m, temp, xlo, xhi,
	                    carry = 0,
	                    i = x.length,
	                    klo = k % SQRT_BASE,
	                    khi = k / SQRT_BASE | 0;

	                for ( x = x.slice(); i--; ) {
	                    xlo = x[i] % SQRT_BASE;
	                    xhi = x[i] / SQRT_BASE | 0;
	                    m = khi * xlo + xhi * klo;
	                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;
	                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;
	                    x[i] = temp % base;
	                }

	                if (carry) x.unshift(carry);

	                return x;
	            }

	            function compare( a, b, aL, bL ) {
	                var i, cmp;

	                if ( aL != bL ) {
	                    cmp = aL > bL ? 1 : -1;
	                } else {

	                    for ( i = cmp = 0; i < aL; i++ ) {

	                        if ( a[i] != b[i] ) {
	                            cmp = a[i] > b[i] ? 1 : -1;
	                            break;
	                        }
	                    }
	                }
	                return cmp;
	            }

	            function subtract( a, b, aL, base ) {
	                var i = 0;

	                // Subtract b from a.
	                for ( ; aL--; ) {
	                    a[aL] -= i;
	                    i = a[aL] < b[aL] ? 1 : 0;
	                    a[aL] = i * base + a[aL] - b[aL];
	                }

	                // Remove leading zeros.
	                for ( ; !a[0] && a.length > 1; a.shift() );
	            }

	            // x: dividend, y: divisor.
	            return function ( x, y, dp, rm, base ) {
	                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	                    yL, yz,
	                    s = x.s == y.s ? 1 : -1,
	                    xc = x.c,
	                    yc = y.c;

	                // Either NaN, Infinity or 0?
	                if ( !xc || !xc[0] || !yc || !yc[0] ) {

	                    return new BigNumber(

	                      // Return NaN if either NaN, or both Infinity or 0.
	                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :

	                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	                    );
	                }

	                q = new BigNumber(s);
	                qc = q.c = [];
	                e = x.e - y.e;
	                s = dp + e + 1;

	                if ( !base ) {
	                    base = BASE;
	                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );
	                    s = s / LOG_BASE | 0;
	                }

	                // Result exponent may be one less then the current value of e.
	                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );
	                if ( yc[i] > ( xc[i] || 0 ) ) e--;

	                if ( s < 0 ) {
	                    qc.push(1);
	                    more = true;
	                } else {
	                    xL = xc.length;
	                    yL = yc.length;
	                    i = 0;
	                    s += 2;

	                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

	                    n = mathfloor( base / ( yc[0] + 1 ) );

	                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
	                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
	                    if ( n > 1 ) {
	                        yc = multiply( yc, n, base );
	                        xc = multiply( xc, n, base );
	                        yL = yc.length;
	                        xL = xc.length;
	                    }

	                    xi = yL;
	                    rem = xc.slice( 0, yL );
	                    remL = rem.length;

	                    // Add zeros to make remainder as long as divisor.
	                    for ( ; remL < yL; rem[remL++] = 0 );
	                    yz = yc.slice();
	                    yz.unshift(0);
	                    yc0 = yc[0];
	                    if ( yc[1] >= base / 2 ) yc0++;
	                    // Not necessary, but to prevent trial digit n > base, when using base 3.
	                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

	                    do {
	                        n = 0;

	                        // Compare divisor and remainder.
	                        cmp = compare( yc, rem, yL, remL );

	                        // If divisor < remainder.
	                        if ( cmp < 0 ) {

	                            // Calculate trial digit, n.

	                            rem0 = rem[0];
	                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );

	                            // n is how many times the divisor goes into the current remainder.
	                            n = mathfloor( rem0 / yc0 );

	                            //  Algorithm:
	                            //  1. product = divisor * trial digit (n)
	                            //  2. if product > remainder: product -= divisor, n--
	                            //  3. remainder -= product
	                            //  4. if product was < remainder at 2:
	                            //    5. compare new remainder and divisor
	                            //    6. If remainder > divisor: remainder -= divisor, n++

	                            if ( n > 1 ) {

	                                // n may be > base only when base is 3.
	                                if (n >= base) n = base - 1;

	                                // product = divisor * trial digit.
	                                prod = multiply( yc, n, base );
	                                prodL = prod.length;
	                                remL = rem.length;

	                                // Compare product and remainder.
	                                // If product > remainder.
	                                // Trial digit n too high.
	                                // n is 1 too high about 5% of the time, and is not known to have
	                                // ever been more than 1 too high.
	                                while ( compare( prod, rem, prodL, remL ) == 1 ) {
	                                    n--;

	                                    // Subtract divisor from product.
	                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );
	                                    prodL = prod.length;
	                                    cmp = 1;
	                                }
	                            } else {

	                                // n is 0 or 1, cmp is -1.
	                                // If n is 0, there is no need to compare yc and rem again below,
	                                // so change cmp to 1 to avoid it.
	                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                                if ( n == 0 ) {

	                                    // divisor < remainder, so n must be at least 1.
	                                    cmp = n = 1;
	                                }

	                                // product = divisor
	                                prod = yc.slice();
	                                prodL = prod.length;
	                            }

	                            if ( prodL < remL ) prod.unshift(0);

	                            // Subtract product from remainder.
	                            subtract( rem, prod, remL, base );
	                            remL = rem.length;

	                             // If product was < remainder.
	                            if ( cmp == -1 ) {

	                                // Compare divisor and new remainder.
	                                // If divisor < new remainder, subtract divisor from remainder.
	                                // Trial digit n too low.
	                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                                while ( compare( yc, rem, yL, remL ) < 1 ) {
	                                    n++;

	                                    // Subtract divisor from remainder.
	                                    subtract( rem, yL < remL ? yz : yc, remL, base );
	                                    remL = rem.length;
	                                }
	                            }
	                        } else if ( cmp === 0 ) {
	                            n++;
	                            rem = [0];
	                        } // else cmp === 1 and n will be 0

	                        // Add the next digit, n, to the result array.
	                        qc[i++] = n;

	                        // Update the remainder.
	                        if ( rem[0] ) {
	                            rem[remL++] = xc[xi] || 0;
	                        } else {
	                            rem = [ xc[xi] ];
	                            remL = 1;
	                        }
	                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );

	                    more = rem[0] != null;

	                    // Leading zero?
	                    if ( !qc[0] ) qc.shift();
	                }

	                if ( base == BASE ) {

	                    // To calculate q.e, first get the number of digits of qc[0].
	                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );
	                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );

	                // Caller is convertBase.
	                } else {
	                    q.e = e;
	                    q.r = +more;
	                }

	                return q;
	            };
	        })();


	        /*
	         * Return a string representing the value of BigNumber n in fixed-point or exponential
	         * notation rounded to the specified decimal places or significant digits.
	         *
	         * n is a BigNumber.
	         * i is the index of the last digit required (i.e. the digit that may be rounded up).
	         * rm is the rounding mode.
	         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
	         */
	        function format( n, i, rm, caller ) {
	            var c0, e, ne, len, str;

	            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )
	              ? rm | 0 : ROUNDING_MODE;

	            if ( !n.c ) return n.toString();
	            c0 = n.c[0];
	            ne = n.e;

	            if ( i == null ) {
	                str = coeffToString( n.c );
	                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
	                  ? toExponential( str, ne )
	                  : toFixedPoint( str, ne );
	            } else {
	                n = round( new BigNumber(n), i, rm );

	                // n.e may have changed if the value was rounded up.
	                e = n.e;

	                str = coeffToString( n.c );
	                len = str.length;

	                // toPrecision returns exponential notation if the number of significant digits
	                // specified is less than the number of digits necessary to represent the integer
	                // part of the value in fixed-point notation.

	                // Exponential notation.
	                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {

	                    // Append zeros?
	                    for ( ; len < i; str += '0', len++ );
	                    str = toExponential( str, e );

	                // Fixed-point notation.
	                } else {
	                    i -= ne;
	                    str = toFixedPoint( str, e );

	                    // Append zeros?
	                    if ( e + 1 > len ) {
	                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );
	                    } else {
	                        i += e - len;
	                        if ( i > 0 ) {
	                            if ( e + 1 == len ) str += '.';
	                            for ( ; i--; str += '0' );
	                        }
	                    }
	                }
	            }

	            return n.s < 0 && c0 ? '-' + str : str;
	        }


	        // Handle BigNumber.max and BigNumber.min.
	        function maxOrMin( args, method ) {
	            var m, n,
	                i = 0;

	            if ( isArray( args[0] ) ) args = args[0];
	            m = new BigNumber( args[0] );

	            for ( ; ++i < args.length; ) {
	                n = new BigNumber( args[i] );

	                // If any number is NaN, return NaN.
	                if ( !n.s ) {
	                    m = n;
	                    break;
	                } else if ( method.call( m, n ) ) {
	                    m = n;
	                }
	            }

	            return m;
	        }


	        /*
	         * Return true if n is an integer in range, otherwise throw.
	         * Use for argument validation when ERRORS is true.
	         */
	        function intValidatorWithErrors( n, min, max, caller, name ) {
	            if ( n < min || n > max || n != truncate(n) ) {
	                raise( caller, ( name || 'decimal places' ) +
	                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );
	            }

	            return true;
	        }


	        /*
	         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	         * Called by minus, plus and times.
	         */
	        function normalise( n, c, e ) {
	            var i = 1,
	                j = c.length;

	             // Remove trailing zeros.
	            for ( ; !c[--j]; c.pop() );

	            // Calculate the base 10 exponent. First get the number of digits of c[0].
	            for ( j = c[0]; j >= 10; j /= 10, i++ );

	            // Overflow?
	            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {

	                // Infinity.
	                n.c = n.e = null;

	            // Underflow?
	            } else if ( e < MIN_EXP ) {

	                // Zero.
	                n.c = [ n.e = 0 ];
	            } else {
	                n.e = e;
	                n.c = c;
	            }

	            return n;
	        }


	        // Handle values that fail the validity test in BigNumber.
	        parseNumeric = (function () {
	            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	                dotAfter = /^([^.]+)\.$/,
	                dotBefore = /^\.([^.]+)$/,
	                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	                whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	            return function ( x, str, num, b ) {
	                var base,
	                    s = num ? str : str.replace( whitespaceOrPlus, '' );

	                // No exception on ±Infinity or NaN.
	                if ( isInfinityOrNaN.test(s) ) {
	                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	                } else {
	                    if ( !num ) {

	                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	                        s = s.replace( basePrefix, function ( m, p1, p2 ) {
	                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	                            return !b || b == base ? p1 : m;
	                        });

	                        if (b) {
	                            base = b;

	                            // E.g. '1.' to '1', '.1' to '0.1'
	                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );
	                        }

	                        if ( str != s ) return new BigNumber( s, base );
	                    }

	                    // 'new BigNumber() not a number: {n}'
	                    // 'new BigNumber() not a base {b} number: {n}'
	                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );
	                    x.s = null;
	                }

	                x.c = x.e = null;
	                id = 0;
	            }
	        })();


	        // Throw a BigNumber Error.
	        function raise( caller, msg, val ) {
	            var error = new Error( [
	                'new BigNumber',     // 0
	                'cmp',               // 1
	                'config',            // 2
	                'div',               // 3
	                'divToInt',          // 4
	                'eq',                // 5
	                'gt',                // 6
	                'gte',               // 7
	                'lt',                // 8
	                'lte',               // 9
	                'minus',             // 10
	                'mod',               // 11
	                'plus',              // 12
	                'precision',         // 13
	                'random',            // 14
	                'round',             // 15
	                'shift',             // 16
	                'times',             // 17
	                'toDigits',          // 18
	                'toExponential',     // 19
	                'toFixed',           // 20
	                'toFormat',          // 21
	                'toFraction',        // 22
	                'pow',               // 23
	                'toPrecision',       // 24
	                'toString',          // 25
	                'BigNumber'          // 26
	            ][caller] + '() ' + msg + ': ' + val );

	            error.name = 'BigNumber Error';
	            id = 0;
	            throw error;
	        }


	        /*
	         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	         * If r is truthy, it is known that there are more digits after the rounding digit.
	         */
	        function round( x, sd, rm, r ) {
	            var d, i, j, k, n, ni, rd,
	                xc = x.c,
	                pows10 = POWS_TEN;

	            // if x is not Infinity or NaN...
	            if (xc) {

	                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	                // n is a base 1e14 number, the value of the element of array x.c containing rd.
	                // ni is the index of n within x.c.
	                // d is the number of digits of n.
	                // i is the index of rd within n including leading zeros.
	                // j is the actual index of rd within n (if < 0, rd is a leading zero).
	                out: {

	                    // Get the number of digits of the first element of xc.
	                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );
	                    i = sd - d;

	                    // If the rounding digit is in the first element of xc...
	                    if ( i < 0 ) {
	                        i += LOG_BASE;
	                        j = sd;
	                        n = xc[ ni = 0 ];

	                        // Get the rounding digit at index j of n.
	                        rd = n / pows10[ d - j - 1 ] % 10 | 0;
	                    } else {
	                        ni = mathceil( ( i + 1 ) / LOG_BASE );

	                        if ( ni >= xc.length ) {

	                            if (r) {

	                                // Needed by sqrt.
	                                for ( ; xc.length <= ni; xc.push(0) );
	                                n = rd = 0;
	                                d = 1;
	                                i %= LOG_BASE;
	                                j = i - LOG_BASE + 1;
	                            } else {
	                                break out;
	                            }
	                        } else {
	                            n = k = xc[ni];

	                            // Get the number of digits of n.
	                            for ( d = 1; k >= 10; k /= 10, d++ );

	                            // Get the index of rd within n.
	                            i %= LOG_BASE;

	                            // Get the index of rd within n, adjusted for leading zeros.
	                            // The number of leading zeros of n is given by LOG_BASE - d.
	                            j = i - LOG_BASE + d;

	                            // Get the rounding digit at index j of n.
	                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;
	                        }
	                    }

	                    r = r || sd < 0 ||

	                    // Are there any non-zero digits after the rounding digit?
	                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
	                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );

	                    r = rm < 4
	                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )
	                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&

	                        // Check whether the digit to the left of the rounding digit is odd.
	                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||
	                          rm == ( x.s < 0 ? 8 : 7 ) );

	                    if ( sd < 1 || !xc[0] ) {
	                        xc.length = 0;

	                        if (r) {

	                            // Convert sd to decimal places.
	                            sd -= x.e + 1;

	                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	                            xc[0] = pows10[ sd % LOG_BASE ];
	                            x.e = -sd || 0;
	                        } else {

	                            // Zero.
	                            xc[0] = x.e = 0;
	                        }

	                        return x;
	                    }

	                    // Remove excess digits.
	                    if ( i == 0 ) {
	                        xc.length = ni;
	                        k = 1;
	                        ni--;
	                    } else {
	                        xc.length = ni + 1;
	                        k = pows10[ LOG_BASE - i ];

	                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	                        // j > 0 means i > number of leading zeros of n.
	                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;
	                    }

	                    // Round up?
	                    if (r) {

	                        for ( ; ; ) {

	                            // If the digit to be rounded up is in the first element of xc...
	                            if ( ni == 0 ) {

	                                // i will be the length of xc[0] before k is added.
	                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );
	                                j = xc[0] += k;
	                                for ( k = 1; j >= 10; j /= 10, k++ );

	                                // if i != k the length has increased.
	                                if ( i != k ) {
	                                    x.e++;
	                                    if ( xc[0] == BASE ) xc[0] = 1;
	                                }

	                                break;
	                            } else {
	                                xc[ni] += k;
	                                if ( xc[ni] != BASE ) break;
	                                xc[ni--] = 0;
	                                k = 1;
	                            }
	                        }
	                    }

	                    // Remove trailing zeros.
	                    for ( i = xc.length; xc[--i] === 0; xc.pop() );
	                }

	                // Overflow? Infinity.
	                if ( x.e > MAX_EXP ) {
	                    x.c = x.e = null;

	                // Underflow? Zero.
	                } else if ( x.e < MIN_EXP ) {
	                    x.c = [ x.e = 0 ];
	                }
	            }

	            return x;
	        }


	        // PROTOTYPE/INSTANCE METHODS


	        /*
	         * Return a new BigNumber whose value is the absolute value of this BigNumber.
	         */
	        P.absoluteValue = P.abs = function () {
	            var x = new BigNumber(this);
	            if ( x.s < 0 ) x.s = 1;
	            return x;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of Infinity.
	         */
	        P.ceil = function () {
	            return round( new BigNumber(this), this.e + 1, 2 );
	        };


	        /*
	         * Return
	         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * 0 if they have the same value,
	         * or null if the value of either is NaN.
	         */
	        P.comparedTo = P.cmp = function ( y, b ) {
	            id = 1;
	            return compare( this, new BigNumber( y, b ) );
	        };


	        /*
	         * Return the number of decimal places of the value of this BigNumber, or null if the value
	         * of this BigNumber is ±Infinity or NaN.
	         */
	        P.decimalPlaces = P.dp = function () {
	            var n, v,
	                c = this.c;

	            if ( !c ) return null;
	            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;

	            // Subtract the number of trailing zeros of the last number.
	            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );
	            if ( n < 0 ) n = 0;

	            return n;
	        };


	        /*
	         *  n / 0 = I
	         *  n / N = N
	         *  n / I = 0
	         *  0 / n = 0
	         *  0 / 0 = N
	         *  0 / N = N
	         *  0 / I = 0
	         *  N / n = N
	         *  N / 0 = N
	         *  N / N = N
	         *  N / I = N
	         *  I / n = I
	         *  I / 0 = I
	         *  I / N = N
	         *  I / I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.dividedBy = P.div = function ( y, b ) {
	            id = 3;
	            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );
	        };


	        /*
	         * Return a new BigNumber whose value is the integer part of dividing the value of this
	         * BigNumber by the value of BigNumber(y, b).
	         */
	        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {
	            id = 4;
	            return div( this, new BigNumber( y, b ), 0, 1 );
	        };


	        /*
	         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.equals = P.eq = function ( y, b ) {
	            id = 5;
	            return compare( this, new BigNumber( y, b ) ) === 0;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
	         * number in the direction of -Infinity.
	         */
	        P.floor = function () {
	            return round( new BigNumber(this), this.e + 1, 3 );
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.greaterThan = P.gt = function ( y, b ) {
	            id = 6;
	            return compare( this, new BigNumber( y, b ) ) > 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is greater than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {
	            id = 7;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;

	        };


	        /*
	         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
	         */
	        P.isFinite = function () {
	            return !!this.c;
	        };


	        /*
	         * Return true if the value of this BigNumber is an integer, otherwise return false.
	         */
	        P.isInteger = P.isInt = function () {
	            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;
	        };


	        /*
	         * Return true if the value of this BigNumber is NaN, otherwise returns false.
	         */
	        P.isNaN = function () {
	            return !this.s;
	        };


	        /*
	         * Return true if the value of this BigNumber is negative, otherwise returns false.
	         */
	        P.isNegative = P.isNeg = function () {
	            return this.s < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
	         */
	        P.isZero = function () {
	            return !!this.c && this.c[0] == 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	         * otherwise returns false.
	         */
	        P.lessThan = P.lt = function ( y, b ) {
	            id = 8;
	            return compare( this, new BigNumber( y, b ) ) < 0;
	        };


	        /*
	         * Return true if the value of this BigNumber is less than or equal to the value of
	         * BigNumber(y, b), otherwise returns false.
	         */
	        P.lessThanOrEqualTo = P.lte = function ( y, b ) {
	            id = 9;
	            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;
	        };


	        /*
	         *  n - 0 = n
	         *  n - N = N
	         *  n - I = -I
	         *  0 - n = -n
	         *  0 - 0 = 0
	         *  0 - N = N
	         *  0 - I = -I
	         *  N - n = N
	         *  N - 0 = N
	         *  N - N = N
	         *  N - I = N
	         *  I - n = I
	         *  I - 0 = I
	         *  I - N = N
	         *  I - I = N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	         * BigNumber(y, b).
	         */
	        P.minus = P.sub = function ( y, b ) {
	            var i, j, t, xLTy,
	                x = this,
	                a = x.s;

	            id = 10;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	            if ( a != b ) {
	                y.s = -b;
	                return x.plus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Either Infinity?
	                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );

	                // Either zero?
	                if ( !xc[0] || !yc[0] ) {

	                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :

	                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	                      ROUNDING_MODE == 3 ? -0 : 0 );
	                }
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Determine which is the bigger number.
	            if ( a = xe - ye ) {

	                if ( xLTy = a < 0 ) {
	                    a = -a;
	                    t = xc;
	                } else {
	                    ye = xe;
	                    t = yc;
	                }

	                t.reverse();

	                // Prepend zeros to equalise exponents.
	                for ( b = a; b--; t.push(0) );
	                t.reverse();
	            } else {

	                // Exponents equal. Check digit by digit.
	                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;

	                for ( a = b = 0; b < j; b++ ) {

	                    if ( xc[b] != yc[b] ) {
	                        xLTy = xc[b] < yc[b];
	                        break;
	                    }
	                }
	            }

	            // x < y? Point xc to the array of the bigger number.
	            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	            b = ( j = yc.length ) - ( i = xc.length );

	            // Append zeros to xc if shorter.
	            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );
	            b = BASE - 1;

	            // Subtract yc from xc.
	            for ( ; j > a; ) {

	                if ( xc[--j] < yc[j] ) {
	                    for ( i = j; i && !xc[--i]; xc[i] = b );
	                    --xc[i];
	                    xc[j] += BASE;
	                }

	                xc[j] -= yc[j];
	            }

	            // Remove leading zeros and adjust exponent accordingly.
	            for ( ; xc[0] == 0; xc.shift(), --ye );

	            // Zero?
	            if ( !xc[0] ) {

	                // Following IEEE 754 (2008) 6.3,
	                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	                y.s = ROUNDING_MODE == 3 ? -1 : 1;
	                y.c = [ y.e = 0 ];
	                return y;
	            }

	            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	            // for finite x and y.
	            return normalise( y, xc, ye );
	        };


	        /*
	         *   n % 0 =  N
	         *   n % N =  N
	         *   n % I =  n
	         *   0 % n =  0
	         *  -0 % n = -0
	         *   0 % 0 =  N
	         *   0 % N =  N
	         *   0 % I =  0
	         *   N % n =  N
	         *   N % 0 =  N
	         *   N % N =  N
	         *   N % I =  N
	         *   I % n =  N
	         *   I % 0 =  N
	         *   I % N =  N
	         *   I % I =  N
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	         */
	        P.modulo = P.mod = function ( y, b ) {
	            var q, s,
	                x = this;

	            id = 11;
	            y = new BigNumber( y, b );

	            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	            if ( !x.c || !y.s || y.c && !y.c[0] ) {
	                return new BigNumber(NaN);

	            // Return x if y is Infinity or x is zero.
	            } else if ( !y.c || x.c && !x.c[0] ) {
	                return new BigNumber(x);
	            }

	            if ( MODULO_MODE == 9 ) {

	                // Euclidian division: q = sign(y) * floor(x / abs(y))
	                // r = x - qy    where  0 <= r < abs(y)
	                s = y.s;
	                y.s = 1;
	                q = div( x, y, 0, 3 );
	                y.s = s;
	                q.s *= s;
	            } else {
	                q = div( x, y, 0, MODULO_MODE );
	            }

	            return x.minus( q.times(y) );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber negated,
	         * i.e. multiplied by -1.
	         */
	        P.negated = P.neg = function () {
	            var x = new BigNumber(this);
	            x.s = -x.s || null;
	            return x;
	        };


	        /*
	         *  n + 0 = n
	         *  n + N = N
	         *  n + I = I
	         *  0 + n = n
	         *  0 + 0 = 0
	         *  0 + N = N
	         *  0 + I = I
	         *  N + n = N
	         *  N + 0 = N
	         *  N + N = N
	         *  N + I = N
	         *  I + n = I
	         *  I + 0 = I
	         *  I + N = N
	         *  I + I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	         * BigNumber(y, b).
	         */
	        P.plus = P.add = function ( y, b ) {
	            var t,
	                x = this,
	                a = x.s;

	            id = 12;
	            y = new BigNumber( y, b );
	            b = y.s;

	            // Either NaN?
	            if ( !a || !b ) return new BigNumber(NaN);

	            // Signs differ?
	             if ( a != b ) {
	                y.s = -b;
	                return x.minus(y);
	            }

	            var xe = x.e / LOG_BASE,
	                ye = y.e / LOG_BASE,
	                xc = x.c,
	                yc = y.c;

	            if ( !xe || !ye ) {

	                // Return ±Infinity if either ±Infinity.
	                if ( !xc || !yc ) return new BigNumber( a / 0 );

	                // Either zero?
	                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );
	            }

	            xe = bitFloor(xe);
	            ye = bitFloor(ye);
	            xc = xc.slice();

	            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	            if ( a = xe - ye ) {
	                if ( a > 0 ) {
	                    ye = xe;
	                    t = yc;
	                } else {
	                    a = -a;
	                    t = xc;
	                }

	                t.reverse();
	                for ( ; a--; t.push(0) );
	                t.reverse();
	            }

	            a = xc.length;
	            b = yc.length;

	            // Point xc to the longer array, and b to the shorter length.
	            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;

	            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	            for ( a = 0; b; ) {
	                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;
	                xc[b] %= BASE;
	            }

	            if (a) {
	                xc.unshift(a);
	                ++ye;
	            }

	            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	            // ye = MAX_EXP + 1 possible
	            return normalise( y, xc, ye );
	        };


	        /*
	         * Return the number of significant digits of the value of this BigNumber.
	         *
	         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	         */
	        P.precision = P.sd = function (z) {
	            var n, v,
	                x = this,
	                c = x.c;

	            // 'precision() argument not a boolean or binary digit: {z}'
	            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {
	                if (ERRORS) raise( 13, 'argument' + notBool, z );
	                if ( z != !!z ) z = null;
	            }

	            if ( !c ) return null;
	            v = c.length - 1;
	            n = v * LOG_BASE + 1;

	            if ( v = c[v] ) {

	                // Subtract the number of trailing zeros of the last element.
	                for ( ; v % 10 == 0; v /= 10, n-- );

	                // Add the number of digits of the first element.
	                for ( v = c[0]; v >= 10; v /= 10, n++ );
	            }

	            if ( z && x.e + 1 > n ) n = x.e + 1;

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
	         * omitted.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'round() decimal places out of range: {dp}'
	         * 'round() decimal places not an integer: {dp}'
	         * 'round() rounding mode not an integer: {rm}'
	         * 'round() rounding mode out of range: {rm}'
	         */
	        P.round = function ( dp, rm ) {
	            var n = new BigNumber(this);

	            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {
	                round( n, ~~dp + this.e + 1, rm == null ||
	                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );
	            }

	            return n;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	         *
	         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	         *
	         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
	         * otherwise.
	         *
	         * 'shift() argument not an integer: {k}'
	         * 'shift() argument out of range: {k}'
	         */
	        P.shift = function (k) {
	            var n = this;
	            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )

	              // k < 1e+21, or truncate(k) will produce exponential notation.
	              ? n.times( '1e' + truncate(k) )
	              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )
	                ? n.s * ( k < 0 ? 0 : 1 / 0 )
	                : n );
	        };


	        /*
	         *  sqrt(-n) =  N
	         *  sqrt( N) =  N
	         *  sqrt(-I) =  N
	         *  sqrt( I) =  I
	         *  sqrt( 0) =  0
	         *  sqrt(-0) = -0
	         *
	         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	         */
	        P.squareRoot = P.sqrt = function () {
	            var m, n, r, rep, t,
	                x = this,
	                c = x.c,
	                s = x.s,
	                e = x.e,
	                dp = DECIMAL_PLACES + 4,
	                half = new BigNumber('0.5');

	            // Negative/NaN/Infinity/zero?
	            if ( s !== 1 || !c || !c[0] ) {
	                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );
	            }

	            // Initial estimate.
	            s = Math.sqrt( +x );

	            // Math.sqrt underflow/overflow?
	            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	            if ( s == 0 || s == 1 / 0 ) {
	                n = coeffToString(c);
	                if ( ( n.length + e ) % 2 == 0 ) n += '0';
	                s = Math.sqrt(n);
	                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );

	                if ( s == 1 / 0 ) {
	                    n = '1e' + e;
	                } else {
	                    n = s.toExponential();
	                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;
	                }

	                r = new BigNumber(n);
	            } else {
	                r = new BigNumber( s + '' );
	            }

	            // Check for zero.
	            // r could be zero if MIN_EXP is changed after the this value was created.
	            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	            // coeffToString to throw.
	            if ( r.c[0] ) {
	                e = r.e;
	                s = e + dp;
	                if ( s < 3 ) s = 0;

	                // Newton-Raphson iteration.
	                for ( ; ; ) {
	                    t = r;
	                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );

	                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =
	                         coeffToString( r.c ) ).slice( 0, s ) ) {

	                        // The exponent of r may here be one less than the final result exponent,
	                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	                        // are indexed correctly.
	                        if ( r.e < e ) --s;
	                        n = n.slice( s - 3, s + 1 );

	                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	                        // iteration.
	                        if ( n == '9999' || !rep && n == '4999' ) {

	                            // On the first iteration only, check to see if rounding up gives the
	                            // exact result as the nines may infinitely repeat.
	                            if ( !rep ) {
	                                round( t, t.e + DECIMAL_PLACES + 2, 0 );

	                                if ( t.times(t).eq(x) ) {
	                                    r = t;
	                                    break;
	                                }
	                            }

	                            dp += 4;
	                            s += 4;
	                            rep = 1;
	                        } else {

	                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	                            // result. If not, then there are further digits and m will be truthy.
	                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {

	                                // Truncate to the first rounding digit.
	                                round( r, r.e + DECIMAL_PLACES + 2, 1 );
	                                m = !r.times(r).eq(x);
	                            }

	                            break;
	                        }
	                    }
	                }
	            }

	            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );
	        };


	        /*
	         *  n * 0 = 0
	         *  n * N = N
	         *  n * I = I
	         *  0 * n = 0
	         *  0 * 0 = 0
	         *  0 * N = N
	         *  0 * I = N
	         *  N * n = N
	         *  N * 0 = N
	         *  N * N = N
	         *  N * I = N
	         *  I * n = I
	         *  I * 0 = N
	         *  I * N = N
	         *  I * I = I
	         *
	         * Return a new BigNumber whose value is the value of this BigNumber times the value of
	         * BigNumber(y, b).
	         */
	        P.times = P.mul = function ( y, b ) {
	            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	                base, sqrtBase,
	                x = this,
	                xc = x.c,
	                yc = ( id = 17, y = new BigNumber( y, b ) ).c;

	            // Either NaN, ±Infinity or ±0?
	            if ( !xc || !yc || !xc[0] || !yc[0] ) {

	                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {
	                    y.c = y.e = y.s = null;
	                } else {
	                    y.s *= x.s;

	                    // Return ±Infinity if either is ±Infinity.
	                    if ( !xc || !yc ) {
	                        y.c = y.e = null;

	                    // Return ±0 if either is ±0.
	                    } else {
	                        y.c = [0];
	                        y.e = 0;
	                    }
	                }

	                return y;
	            }

	            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );
	            y.s *= x.s;
	            xcL = xc.length;
	            ycL = yc.length;

	            // Ensure xc points to longer array and xcL to its length.
	            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	            // Initialise the result array with zeros.
	            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );

	            base = BASE;
	            sqrtBase = SQRT_BASE;

	            for ( i = ycL; --i >= 0; ) {
	                c = 0;
	                ylo = yc[i] % sqrtBase;
	                yhi = yc[i] / sqrtBase | 0;

	                for ( k = xcL, j = i + k; j > i; ) {
	                    xlo = xc[--k] % sqrtBase;
	                    xhi = xc[k] / sqrtBase | 0;
	                    m = yhi * xlo + xhi * ylo;
	                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;
	                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;
	                    zc[j--] = xlo % base;
	                }

	                zc[j] = c;
	            }

	            if (c) {
	                ++e;
	            } else {
	                zc.shift();
	            }

	            return normalise( y, zc, e );
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
	         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toDigits() precision out of range: {sd}'
	         * 'toDigits() precision not an integer: {sd}'
	         * 'toDigits() rounding mode not an integer: {rm}'
	         * 'toDigits() rounding mode out of range: {rm}'
	         */
	        P.toDigits = function ( sd, rm ) {
	            var n = new BigNumber(this);
	            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;
	            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;
	            return sd ? round( n, sd, rm ) : n;
	        };


	        /*
	         * Return a string representing the value of this BigNumber in exponential notation and
	         * rounded using ROUNDING_MODE to dp fixed decimal places.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toExponential() decimal places not an integer: {dp}'
	         * 'toExponential() decimal places out of range: {dp}'
	         * 'toExponential() rounding mode not an integer: {rm}'
	         * 'toExponential() rounding mode out of range: {rm}'
	         */
	        P.toExponential = function ( dp, rm ) {
	            return format( this,
	              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounding
	         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	         *
	         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	         * but e.g. (-0.00001).toFixed(0) is '-0'.
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFixed() decimal places not an integer: {dp}'
	         * 'toFixed() decimal places out of range: {dp}'
	         * 'toFixed() rounding mode not an integer: {rm}'
	         * 'toFixed() rounding mode out of range: {rm}'
	         */
	        P.toFixed = function ( dp, rm ) {
	            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )
	              ? ~~dp + this.e + 1 : null, rm, 20 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in fixed-point notation rounded
	         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	         * of the FORMAT object (see BigNumber.config).
	         *
	         * FORMAT = {
	         *      decimalSeparator : '.',
	         *      groupSeparator : ',',
	         *      groupSize : 3,
	         *      secondaryGroupSize : 0,
	         *      fractionGroupSeparator : '\xA0',    // non-breaking space
	         *      fractionGroupSize : 0
	         * };
	         *
	         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toFormat() decimal places not an integer: {dp}'
	         * 'toFormat() decimal places out of range: {dp}'
	         * 'toFormat() rounding mode not an integer: {rm}'
	         * 'toFormat() rounding mode out of range: {rm}'
	         */
	        P.toFormat = function ( dp, rm ) {
	            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )
	              ? ~~dp + this.e + 1 : null, rm, 21 );

	            if ( this.c ) {
	                var i,
	                    arr = str.split('.'),
	                    g1 = +FORMAT.groupSize,
	                    g2 = +FORMAT.secondaryGroupSize,
	                    groupSeparator = FORMAT.groupSeparator,
	                    intPart = arr[0],
	                    fractionPart = arr[1],
	                    isNeg = this.s < 0,
	                    intDigits = isNeg ? intPart.slice(1) : intPart,
	                    len = intDigits.length;

	                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	                if ( g1 > 0 && len > 0 ) {
	                    i = len % g1 || g1;
	                    intPart = intDigits.substr( 0, i );

	                    for ( ; i < len; i += g1 ) {
	                        intPart += groupSeparator + intDigits.substr( i, g1 );
	                    }

	                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);
	                    if (isNeg) intPart = '-' + intPart;
	                }

	                str = fractionPart
	                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )
	                    ? fractionPart.replace( new RegExp( '\\d{' + g2 + '}\\B', 'g' ),
	                      '$&' + FORMAT.fractionGroupSeparator )
	                    : fractionPart )
	                  : intPart;
	            }

	            return str;
	        };


	        /*
	         * Return a string array representing the value of this BigNumber as a simple fraction with
	         * an integer numerator and an integer denominator. The denominator will be a positive
	         * non-zero value less than or equal to the specified maximum denominator. If a maximum
	         * denominator is not specified, the denominator will be the lowest value necessary to
	         * represent the number exactly.
	         *
	         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
	         *
	         * 'toFraction() max denominator not an integer: {md}'
	         * 'toFraction() max denominator out of range: {md}'
	         */
	        P.toFraction = function (md) {
	            var arr, d0, d2, e, exp, n, n0, q, s,
	                k = ERRORS,
	                x = this,
	                xc = x.c,
	                d = new BigNumber(ONE),
	                n1 = d0 = new BigNumber(ONE),
	                d1 = n0 = new BigNumber(ONE);

	            if ( md != null ) {
	                ERRORS = false;
	                n = new BigNumber(md);
	                ERRORS = k;

	                if ( !( k = n.isInt() ) || n.lt(ONE) ) {

	                    if (ERRORS) {
	                        raise( 22,
	                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );
	                    }

	                    // ERRORS is false:
	                    // If md is a finite non-integer >= 1, round it to an integer and use it.
	                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;
	                }
	            }

	            if ( !xc ) return x.toString();
	            s = coeffToString(xc);

	            // Determine initial denominator.
	            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	            e = d.e = s.length - x.e - 1;
	            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];
	            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;

	            exp = MAX_EXP;
	            MAX_EXP = 1 / 0;
	            n = new BigNumber(s);

	            // n0 = d1 = 0
	            n0.c[0] = 0;

	            for ( ; ; )  {
	                q = div( n, d, 0, 1 );
	                d2 = d0.plus( q.times(d1) );
	                if ( d2.cmp(md) == 1 ) break;
	                d0 = d1;
	                d1 = d2;
	                n1 = n0.plus( q.times( d2 = n1 ) );
	                n0 = d2;
	                d = n.minus( q.times( d2 = d ) );
	                n = d2;
	            }

	            d2 = div( md.minus(d0), d1, 0, 1 );
	            n0 = n0.plus( d2.times(n1) );
	            d0 = d0.plus( d2.times(d1) );
	            n0.s = n1.s = x.s;
	            e *= 2;

	            // Determine which fraction is closer to x, n0/d0 or n1/d1
	            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(
	                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1
	                    ? [ n1.toString(), d1.toString() ]
	                    : [ n0.toString(), d0.toString() ];

	            MAX_EXP = exp;
	            return arr;
	        };


	        /*
	         * Return the value of this BigNumber converted to a number primitive.
	         */
	        P.toNumber = function () {
	            var x = this;

	            // Ensure zero has correct sign.
	            return +x || ( x.s ? x.s * 0 : NaN );
	        };


	        /*
	         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
	         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
	         *
	         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
	         * (Performs 54 loop iterations for n of 9007199254740992.)
	         *
	         * 'pow() exponent not an integer: {n}'
	         * 'pow() exponent out of range: {n}'
	         */
	        P.toPower = P.pow = function (n) {
	            var k, y,
	                i = mathfloor( n < 0 ? -n : +n ),
	                x = this;

	            // Pass ±Infinity to Math.pow if exponent is out of range.
	            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&
	              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||
	                parseFloat(n) != n && !( n = NaN ) ) ) {
	                return new BigNumber( Math.pow( +x, n ) );
	            }

	            // Truncating each coefficient array to a length of k after each multiplication equates
	            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
	            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
	            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;
	            y = new BigNumber(ONE);

	            for ( ; ; ) {

	                if ( i % 2 ) {
	                    y = y.times(x);
	                    if ( !y.c ) break;
	                    if ( k && y.c.length > k ) y.c.length = k;
	                }

	                i = mathfloor( i / 2 );
	                if ( !i ) break;

	                x = x.times(x);
	                if ( k && x.c && x.c.length > k ) x.c.length = k;
	            }

	            if ( n < 0 ) y = ONE.div(y);
	            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;
	        };


	        /*
	         * Return a string representing the value of this BigNumber rounded to sd significant digits
	         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	         * necessary to represent the integer part of the value in fixed-point notation, then use
	         * exponential notation.
	         *
	         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	         *
	         * 'toPrecision() precision not an integer: {sd}'
	         * 'toPrecision() precision out of range: {sd}'
	         * 'toPrecision() rounding mode not an integer: {rm}'
	         * 'toPrecision() rounding mode out of range: {rm}'
	         */
	        P.toPrecision = function ( sd, rm ) {
	            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )
	              ? sd | 0 : null, rm, 24 );
	        };


	        /*
	         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	         * TO_EXP_NEG, return exponential notation.
	         *
	         * [b] {number} Integer, 2 to 64 inclusive.
	         *
	         * 'toString() base not an integer: {b}'
	         * 'toString() base out of range: {b}'
	         */
	        P.toString = function (b) {
	            var str,
	                n = this,
	                s = n.s,
	                e = n.e;

	            // Infinity or NaN?
	            if ( e === null ) {

	                if (s) {
	                    str = 'Infinity';
	                    if ( s < 0 ) str = '-' + str;
	                } else {
	                    str = 'NaN';
	                }
	            } else {
	                str = coeffToString( n.c );

	                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {
	                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	                      ? toExponential( str, e )
	                      : toFixedPoint( str, e );
	                } else {
	                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );
	                }

	                if ( s < 0 && n.c[0] ) str = '-' + str;
	            }

	            return str;
	        };


	        /*
	         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
	         * number.
	         */
	        P.truncated = P.trunc = function () {
	            return round( new BigNumber(this), this.e + 1, 1 );
	        };



	        /*
	         * Return as toString, but do not accept a base argument.
	         */
	        P.valueOf = P.toJSON = function () {
	            return this.toString();
	        };


	        // Aliases for BigDecimal methods.
	        //P.add = P.plus;         // P.add included above
	        //P.subtract = P.minus;   // P.sub included above
	        //P.multiply = P.times;   // P.mul included above
	        //P.divide = P.div;
	        //P.remainder = P.mod;
	        //P.compareTo = P.cmp;
	        //P.negate = P.neg;


	        if ( configObj != null ) BigNumber.config(configObj);

	        return BigNumber;
	    }


	    // PRIVATE HELPER FUNCTIONS


	    function bitFloor(n) {
	        var i = n | 0;
	        return n > 0 || n === i ? i : i - 1;
	    }


	    // Return a coefficient array as a string of base 10 digits.
	    function coeffToString(a) {
	        var s, z,
	            i = 1,
	            j = a.length,
	            r = a[0] + '';

	        for ( ; i < j; ) {
	            s = a[i++] + '';
	            z = LOG_BASE - s.length;
	            for ( ; z--; s = '0' + s );
	            r += s;
	        }

	        // Determine trailing zeros.
	        for ( j = r.length; r.charCodeAt(--j) === 48; );
	        return r.slice( 0, j + 1 || 1 );
	    }


	    // Compare the value of BigNumbers x and y.
	    function compare( x, y ) {
	        var a, b,
	            xc = x.c,
	            yc = y.c,
	            i = x.s,
	            j = y.s,
	            k = x.e,
	            l = y.e;

	        // Either NaN?
	        if ( !i || !j ) return null;

	        a = xc && !xc[0];
	        b = yc && !yc[0];

	        // Either zero?
	        if ( a || b ) return a ? b ? 0 : -j : i;

	        // Signs differ?
	        if ( i != j ) return i;

	        a = i < 0;
	        b = k == l;

	        // Either Infinity?
	        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;

	        // Compare exponents.
	        if ( !b ) return k > l ^ a ? 1 : -1;

	        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;

	        // Compare digit by digit.
	        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;

	        // Compare lengths.
	        return k == l ? 0 : k > l ^ a ? 1 : -1;
	    }


	    /*
	     * Return true if n is a valid number in range, otherwise false.
	     * Use for argument validation when ERRORS is false.
	     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
	     */
	    function intValidatorNoErrors( n, min, max ) {
	        return ( n = truncate(n) ) >= min && n <= max;
	    }


	    function isArray(obj) {
	        return Object.prototype.toString.call(obj) == '[object Array]';
	    }


	    /*
	     * Convert string of baseIn to an array of numbers of baseOut.
	     * Eg. convertBase('255', 10, 16) returns [15, 15].
	     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	     */
	    function toBaseOut( str, baseIn, baseOut ) {
	        var j,
	            arr = [0],
	            arrL,
	            i = 0,
	            len = str.length;

	        for ( ; i < len; ) {
	            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );
	            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );

	            for ( ; j < arr.length; j++ ) {

	                if ( arr[j] > baseOut - 1 ) {
	                    if ( arr[j + 1] == null ) arr[j + 1] = 0;
	                    arr[j + 1] += arr[j] / baseOut | 0;
	                    arr[j] %= baseOut;
	                }
	            }
	        }

	        return arr.reverse();
	    }


	    function toExponential( str, e ) {
	        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +
	          ( e < 0 ? 'e' : 'e+' ) + e;
	    }


	    function toFixedPoint( str, e ) {
	        var len, z;

	        // Negative exponent?
	        if ( e < 0 ) {

	            // Prepend zeros.
	            for ( z = '0.'; ++e; z += '0' );
	            str = z + str;

	        // Positive exponent
	        } else {
	            len = str.length;

	            // Append zeros.
	            if ( ++e > len ) {
	                for ( z = '0', e -= len; --e; z += '0' );
	                str += z;
	            } else if ( e < len ) {
	                str = str.slice( 0, e ) + '.' + str.slice(e);
	            }
	        }

	        return str;
	    }


	    function truncate(n) {
	        n = parseFloat(n);
	        return n < 0 ? mathceil(n) : mathfloor(n);
	    }


	    // EXPORT


	    BigNumber = another();

	    // AMD.
	    if ( true ) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return BigNumber; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	    // Node and other environments that support module.exports.
	    } else if ( typeof module != 'undefined' && module.exports ) {
	        module.exports = BigNumber;
	        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}

	    // Browser.
	    } else {
	        global.BigNumber = BigNumber;
	    }
	})(this);


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(51);
	var assert = __webpack_require__(75);
	var UInt160 = __webpack_require__(11).UInt160;
	var Amount = __webpack_require__(5).Amount;
	var Utils = __webpack_require__(98);

	function assertValidNumber(number, message) {
	  assert(!_.isNull(number) && !isNaN(number), message);
	}

	function assertValidLegOneOffer(legOneOffer, message) {
	  assert(legOneOffer);
	  assert.strictEqual(typeof legOneOffer, 'object', message);
	  assert.strictEqual(typeof legOneOffer.TakerPays, 'object', message);
	  assertValidNumber(legOneOffer.TakerGets, message);
	}

	function AutobridgeCalculator(currencyGets, currencyPays, legOneOffers, legTwoOffers, issuerGets, issuerPays) {
	  this._currencyGets = currencyGets;
	  this._currencyPays = currencyPays;
	  this._issuerGets = issuerGets;
	  this._issuerPays = issuerPays;
	  this.legOneOffers = _.cloneDeep(legOneOffers);
	  this.legTwoOffers = _.cloneDeep(legTwoOffers);

	  this._ownerFundsLeftover = {};
	}

	/**
	 * Calculates an ordered array of autobridged offers by quality
	 *
	 * @return {Array}
	 */

	AutobridgeCalculator.prototype.calculate = function () {
	  var legOnePointer = 0;
	  var legTwoPointer = 0;

	  var offersAutobridged = [];

	  this.clearOwnerFundsLeftover();

	  while (this.legOneOffers[legOnePointer] && this.legTwoOffers[legTwoPointer]) {
	    var legOneOffer = this.legOneOffers[legOnePointer];
	    var legTwoOffer = this.legTwoOffers[legTwoPointer];
	    var leftoverFunds = this.getLeftoverOwnerFunds(legOneOffer.Account);
	    var autobridgedOffer = undefined;

	    if (legOneOffer.Account === legTwoOffer.Account) {
	      this.unclampLegOneOwnerFunds(legOneOffer);
	    } else if (!legOneOffer.is_fully_funded && !leftoverFunds.is_zero()) {
	      this.adjustLegOneFundedAmount(legOneOffer);
	    }

	    var legOneTakerGetsFunded = Utils.getOfferTakerGetsFunded(legOneOffer);
	    var legTwoTakerPaysFunded = Utils.getOfferTakerPaysFunded(legTwoOffer);

	    if (legOneTakerGetsFunded.is_zero()) {
	      legOnePointer++;

	      continue;
	    }

	    if (legTwoTakerPaysFunded.is_zero()) {
	      legTwoPointer++;

	      continue;
	    }

	    if (legOneTakerGetsFunded.compareTo(legTwoTakerPaysFunded) > 0) {
	      autobridgedOffer = this.getAutobridgedOfferWithClampedLegOne(legOneOffer, legTwoOffer);

	      legTwoPointer++;
	    } else if (legTwoTakerPaysFunded.compareTo(legOneTakerGetsFunded) > 0) {
	      autobridgedOffer = this.getAutobridgedOfferWithClampedLegTwo(legOneOffer, legTwoOffer);

	      legOnePointer++;
	    } else {
	      autobridgedOffer = this.getAutobridgedOfferWithoutClamps(legOneOffer, legTwoOffer);

	      legOnePointer++;
	      legTwoPointer++;
	    }

	    offersAutobridged.push(autobridgedOffer);
	  }

	  return offersAutobridged;
	};

	/**
	 * In this case, the output from leg one is greater than the input to leg two.
	 * Therefore, we must effectively clamp leg one output to leg two input.
	 *
	 * @param {Object} legOneOffer
	 * @param {Object} legTwoOffer
	 *
	 * @return {Object}
	 */

	AutobridgeCalculator.prototype.getAutobridgedOfferWithClampedLegOne = function (legOneOffer, legTwoOffer) {
	  var legOneTakerGetsFunded = Utils.getOfferTakerGetsFunded(legOneOffer);
	  var legTwoTakerPaysFunded = Utils.getOfferTakerPaysFunded(legTwoOffer);
	  var legOneQuality = Utils.getOfferQuality(legOneOffer, this._currencyGets);

	  var autobridgedTakerGets = Utils.getOfferTakerGetsFunded(legTwoOffer);
	  var autobridgedTakerPays = legTwoTakerPaysFunded.multiply(legOneQuality);

	  if (legOneOffer.Account === legTwoOffer.Account) {
	    var legOneTakerGets = Utils.getOfferTakerGets(legOneOffer);
	    var updatedTakerGets = legOneTakerGets.subtract(legTwoTakerPaysFunded);

	    this.setLegOneTakerGets(legOneOffer, updatedTakerGets);

	    this.clampLegOneOwnerFunds(legOneOffer);
	  } else {
	    // Update funded amount since leg one offer was not completely consumed
	    var updatedTakerGetsFunded = legOneTakerGetsFunded.subtract(legTwoTakerPaysFunded);

	    this.setLegOneTakerGetsFunded(legOneOffer, updatedTakerGetsFunded);
	  }

	  return this.formatAutobridgedOffer(autobridgedTakerGets, autobridgedTakerPays);
	};

	/**
	 * In this case, the input from leg two is greater than the output to leg one.
	 * Therefore, we must effectively clamp leg two input to leg one output.
	 *
	 * @param {Object} legOneOffer
	 * @param {Object} legTwoOffer
	 *
	 * @return {Object}
	 */

	AutobridgeCalculator.prototype.getAutobridgedOfferWithClampedLegTwo = function (legOneOffer, legTwoOffer) {
	  var legOneTakerGetsFunded = Utils.getOfferTakerGetsFunded(legOneOffer);
	  var legTwoTakerPaysFunded = Utils.getOfferTakerPaysFunded(legTwoOffer);
	  var legTwoQuality = Utils.getOfferQuality(legTwoOffer, this._currencyGets);

	  var autobridgedTakerGets = legOneTakerGetsFunded.divide(legTwoQuality);
	  var autobridgedTakerPays = Utils.getOfferTakerPaysFunded(legOneOffer);

	  // Update funded amount since leg two offer was not completely consumed
	  legTwoOffer.taker_gets_funded = Utils.getOfferTakerGetsFunded(legTwoOffer).subtract(autobridgedTakerGets).to_text();
	  legTwoOffer.taker_pays_funded = legTwoTakerPaysFunded.subtract(legOneTakerGetsFunded).to_text();

	  return this.formatAutobridgedOffer(autobridgedTakerGets, autobridgedTakerPays);
	};

	/**
	 * In this case, the output from leg one and the input to leg two are the same.
	 * We do not need to clamp either.
	 * @param {Object} legOneOffer
	 * @param {Object} legTwoOffer
	 *
	 * @return {Object}
	 */

	AutobridgeCalculator.prototype.getAutobridgedOfferWithoutClamps = function (legOneOffer, legTwoOffer) {
	  var autobridgedTakerGets = Utils.getOfferTakerGetsFunded(legTwoOffer);
	  var autobridgedTakerPays = Utils.getOfferTakerPaysFunded(legOneOffer);

	  return this.formatAutobridgedOffer(autobridgedTakerGets, autobridgedTakerPays);
	};

	/**
	 * Clear owner funds leftovers
	 */

	AutobridgeCalculator.prototype.clearOwnerFundsLeftover = function () {
	  this._ownerFundsLeftover = {};
	};

	/**
	 * Reset owner funds leftovers for an account to 0
	 *
	 * @param {String} account
	 *
	 * @return {Amount}
	 */

	AutobridgeCalculator.prototype.resetOwnerFundsLeftover = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');

	  this._ownerFundsLeftover[account] = Utils.normalizeAmount('0');

	  return this._ownerFundsLeftover[account];
	};

	/**
	 * Retrieve leftover funds found after clamping leg one by account
	 *
	 * @param {String} account
	 *
	 * @return {Amount}
	 */

	AutobridgeCalculator.prototype.getLeftoverOwnerFunds = function (account) {
	  assert(UInt160.is_valid(account), 'Account is invalid');

	  var amount = this._ownerFundsLeftover[account];

	  if (!amount) {
	    amount = Utils.normalizeAmount('0');
	  }

	  return amount;
	};

	/**
	 * Add funds to account's leftover funds
	 *
	 * @param {String} account
	 * @param {Amount} amount
	 *
	 * @return {Amount}
	 */

	AutobridgeCalculator.prototype.addLeftoverOwnerFunds = function (account, amount) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  assert(amount instanceof Amount, 'Amount is invalid');

	  this._ownerFundsLeftover[account] = this.getLeftoverOwnerFunds(account).add(amount);

	  return this._ownerFundsLeftover[account];
	};

	/**
	 * Set account's leftover funds
	 *
	 * @param {String} account
	 * @param {Amount} amount
	 */

	AutobridgeCalculator.prototype.setLeftoverOwnerFunds = function (account, amount) {
	  assert(UInt160.is_valid(account), 'Account is invalid');
	  assert(amount instanceof Amount, 'Amount is invalid');

	  this._ownerFundsLeftover[account] = amount;
	};

	/**
	 * Format an autobridged offer and compute synthetic values (e.g. quality)
	 *
	 * @param {Amount} takerGets
	 * @param {Amount} takerPays
	 *
	 * @return {Object}
	 */

	AutobridgeCalculator.prototype.formatAutobridgedOffer = function (takerGets, takerPays) {
	  assert(takerGets instanceof Amount, 'Autobridged taker gets is invalid');
	  assert(takerPays instanceof Amount, 'Autobridged taker pays is invalid');

	  var autobridgedOffer = {};
	  var quality = takerPays.divide(takerGets);

	  autobridgedOffer.TakerGets = {
	    value: takerGets.to_text(),
	    currency: this._currencyGets.to_hex(),
	    issuer: this._issuerGets
	  };

	  autobridgedOffer.TakerPays = {
	    value: takerPays.to_text(),
	    currency: this._currencyPays.to_hex(),
	    issuer: this._issuerPays
	  };

	  autobridgedOffer.quality = quality.to_text();

	  autobridgedOffer.taker_gets_funded = autobridgedOffer.TakerGets.value;
	  autobridgedOffer.taker_pays_funded = autobridgedOffer.TakerPays.value;

	  autobridgedOffer.autobridged = true;

	  autobridgedOffer.BookDirectory = Utils.convertOfferQualityToHex(quality);

	  return autobridgedOffer;
	};

	/**
	 * Remove funds clamp on leg one offer. This is necessary when the two offers
	 * are owned by the same account. In this case, it doesn't matter if offer one
	 * is not fully funded. Leg one out goes to leg two in and since its the same
	 * account, an infinite amount can flow.
	 *
	 * @param {Object} legOneOffer - IOU:XRP offer
	 */

	AutobridgeCalculator.prototype.unclampLegOneOwnerFunds = function (legOneOffer) {
	  assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');

	  legOneOffer.initTakerGetsFunded = Utils.getOfferTakerGetsFunded(legOneOffer);

	  this.setLegOneTakerGetsFunded(legOneOffer, Utils.getOfferTakerGets(legOneOffer));
	};

	/**
	 * Apply clamp back on leg one offer after a round of autobridge calculation
	 * completes. We must reapply clamps that have been removed because we cannot
	 * guarantee that the next offer from leg two will also be from the same
	 * account.
	 *
	 * When we reapply, it could happen that the amount of TakerGets left after
	 * the autobridge calculation is less than the original funded amount. In this
	 * case, we have extra funds we can use towards unfunded offers with worse
	 * quality by the same owner.
	 *
	 * @param {Object} legOneOffer - IOU:XRP offer
	 */

	AutobridgeCalculator.prototype.clampLegOneOwnerFunds = function (legOneOffer) {
	  assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');

	  var takerGets = Utils.getOfferTakerGets(legOneOffer);

	  if (takerGets.compareTo(legOneOffer.initTakerGetsFunded) > 0) {
	    // After clamping, TakerGets is still greater than initial funded amount
	    this.setLegOneTakerGetsFunded(legOneOffer, legOneOffer.initTakerGetsFunded);
	  } else {
	    var updatedLeftover = legOneOffer.initTakerGetsFunded.subtract(takerGets);

	    this.setLegOneTakerGetsFunded(legOneOffer, takerGets);
	    this.addLeftoverOwnerFunds(legOneOffer.Account, updatedLeftover);
	  }
	};

	/**
	 * Increase leg one offer funded amount with extra funds found after applying
	 * clamp.
	 *
	 * @param {Object} legOneOffer - IOU:XRP offer
	 */

	AutobridgeCalculator.prototype.adjustLegOneFundedAmount = function (legOneOffer) {
	  assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');
	  assert(!legOneOffer.is_fully_funded, 'Leg one offer cannot be fully funded');

	  var fundedSum = Utils.getOfferTakerGetsFunded(legOneOffer).add(this.getLeftoverOwnerFunds(legOneOffer.Account));

	  if (fundedSum.compareTo(Utils.getOfferTakerGets(legOneOffer)) >= 0) {
	    // There are enough extra funds to fully fund the offer
	    var legOneTakerGets = Utils.getOfferTakerGets(legOneOffer);
	    var updatedLeftover = fundedSum.subtract(legOneTakerGets);

	    this.setLegOneTakerGetsFunded(legOneOffer, legOneTakerGets);
	    this.setLeftoverOwnerFunds(legOneOffer.Account, updatedLeftover);
	  } else {
	    // There are not enough extra funds to fully fund the offer
	    this.setLegOneTakerGetsFunded(legOneOffer, fundedSum);
	    this.resetOwnerFundsLeftover(legOneOffer.Account);
	  }
	};

	/**
	 * Set taker gets funded amount for a IOU:XRP offer. Also calculates taker
	 * pays funded using offer quality and updates is_fully_funded flag
	 *
	 * @param {Object} legOneOffer - IOU:XRP offer
	 * @param {Amount} takerGetsFunded
	 */

	AutobridgeCalculator.prototype.setLegOneTakerGetsFunded = function setLegOneTakerGetsFunded(legOneOffer, takerGetsFunded) {
	  assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');
	  assert(takerGetsFunded instanceof Amount, 'Taker gets funded is invalid');

	  legOneOffer.taker_gets_funded = takerGetsFunded.to_text();
	  legOneOffer.taker_pays_funded = takerGetsFunded.multiply(Utils.getOfferQuality(legOneOffer, this._currencyGets)).to_text();

	  if (legOneOffer.taker_gets_funded === legOneOffer.TakerGets.value) {
	    legOneOffer.is_fully_funded = true;
	  }
	};

	/**
	 * Set taker gets amount for a IOU:XRP offer. Also calculates taker pays
	 * using offer quality
	 *
	 * @param {Object} legOneOffer - IOU:XRP offer
	 * @param {Amount} takerGets
	 */

	AutobridgeCalculator.prototype.setLegOneTakerGets = function (legOneOffer, takerGets) {
	  assertValidLegOneOffer(legOneOffer, 'Leg one offer is invalid');
	  assert(takerGets instanceof Amount, 'Taker gets funded is invalid');

	  var legOneQuality = Utils.getOfferQuality(legOneOffer, this._currencyGets);

	  legOneOffer.TakerGets = takerGets.to_text();
	  legOneOffer.TakerPays = takerGets.multiply(legOneQuality);
	};

	module.exports = AutobridgeCalculator;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(51);
	var assert = __webpack_require__(75);
	var SerializedObject = __webpack_require__(15).SerializedObject;
	var Types = __webpack_require__(27);
	var Amount = __webpack_require__(5).Amount;
	var OrderBookUtils = {};

	function assertValidNumber(number, message) {
	  assert(!_.isNull(number) && !isNaN(number), message);
	}

	/**
	* Creates a new Amount from a JSON amount object using
	* passed parameters for value, currency and counterparty
	*
	* @param amount of value, currency, counterparty
	* @return JSON amount object
	*/

	function createAmount(value, currency, counterparty) {
	  var newJSON = { 'value': value, 'currency': currency, 'issuer': counterparty };
	  return Amount.from_json(newJSON);
	}

	/**
	* Gets currency for getOfferTaker(Gets/Pays)Funded
	* @param offer
	* @return currency
	*/

	function getCurrencyFromOffer(offer) {
	  return offer.TakerPays.currency || offer.TakerGets.currency;
	}

	/**
	* Gets issuer for getOfferTaker(Gets/Pays)Funded
	* @param offer
	* @return issuer
	*/

	function getIssuerFromOffer(offer) {
	  return offer.TakerPays.issuer || offer.TakerGets.issuer;
	}

	/**
	 * Casts and returns offer's taker gets funded amount as a default IOU amount
	 *
	 * @param {Object} offer
	 * @return {Amount}
	 */

	OrderBookUtils.getOfferTakerGetsFunded = function (offer) {
	  assertValidNumber(offer.taker_gets_funded, 'Taker gets funded is invalid');

	  var currency = getCurrencyFromOffer(offer);
	  var issuer = getIssuerFromOffer(offer);

	  return createAmount(offer.taker_gets_funded, currency, issuer);
	};

	/**
	 * Casts and returns offer's taker pays funded amount as a default IOU amount
	 *
	 * @param {Object} offer
	 * @return {Amount}
	 */

	OrderBookUtils.getOfferTakerPaysFunded = function (offer) {
	  assertValidNumber(offer.taker_pays_funded, 'Taker gets funded is invalid');

	  var currency = getCurrencyFromOffer(offer);
	  var issuer = getIssuerFromOffer(offer);

	  return createAmount(offer.taker_pays_funded, currency, issuer);
	};

	/**
	 * Get offer taker gets amount
	 *
	 * @param {Object} offer
	 *
	 * @return {Amount}
	 */

	OrderBookUtils.getOfferTakerGets = function (offer) {
	  assert(typeof offer, 'object', 'Offer is invalid');

	  var currency = offer.TakerPays.currency;
	  var issuer = offer.TakerPays.issuer;

	  return createAmount(offer.TakerGets, currency, issuer);
	};

	/**
	 * Retrieve offer quality
	 *
	 * @param {Object} offer
	 * @param {Currency} currencyGets
	 */

	OrderBookUtils.getOfferQuality = function (offer, currencyGets) {
	  var amount = undefined;

	  if (currencyGets.has_interest()) {
	    // XXX Should use Amount#from_quality
	    amount = Amount.from_json(offer.TakerPays).ratio_human(offer.TakerGets, {
	      reference_date: new Date()
	    });
	  } else {

	    var currency = getCurrencyFromOffer(offer);
	    var issuer = getIssuerFromOffer(offer);

	    amount = createAmount(offer.quality, currency, issuer);
	  }

	  return amount;
	};

	/**
	 * Formats an offer quality amount to a hex that can be parsed by
	 * Amount.parse_quality
	 *
	 * @param {Amount} quality
	 *
	 * @return {String}
	 */

	OrderBookUtils.convertOfferQualityToHex = function (quality) {
	  assert(quality instanceof Amount, 'Quality is not an amount');

	  var so = new SerializedObject();
	  Types.Quality.serialize(so, quality.to_text());

	  return so.to_hex();
	};

	/**
	 *
	 */

	OrderBookUtils.normalizeAmount = function (value) {

	  return Amount.from_number(value);
	};

	module.exports = OrderBookUtils;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assert = __webpack_require__(75);
	var brorand = __webpack_require__(141);
	var codec = __webpack_require__(92);

	var _require = __webpack_require__(121);

	var seedFromPhrase = _require.seedFromPhrase;
	var createAccountID = _require.createAccountID;

	var _require2 = __webpack_require__(122);

	var KeyPair = _require2.KeyPair;
	var KeyType = _require2.KeyType;

	var _require3 = __webpack_require__(123);

	var Ed25519Pair = _require3.Ed25519Pair;

	var _require4 = __webpack_require__(124);

	var K256Pair = _require4.K256Pair;
	var accountPublicFromPublicGenerator = _require4.accountPublicFromPublicGenerator;
	var decodeSeed = codec.decodeSeed;
	var encodeNodePublic = codec.encodeNodePublic;
	var decodeNodePublic = codec.decodeNodePublic;
	var encodeAccountID = codec.encodeAccountID;

	function parseSeed(seed) {
	  var type = arguments.length <= 1 || arguments[1] === undefined ? KeyType.secp256k1 : arguments[1];

	  if (typeof seed !== 'string') {
	    return { bytes: seed, type: type };
	  }
	  return decodeSeed(seed);
	}

	KeyPair.fromSeed = function (seed, type, options) {
	  if (type === undefined) type = KeyType.secp256k1;

	  if (typeof seed === 'string') {
	    var decoded = decodeSeed(seed);
	    var optionsArg = type;
	    return this.fromSeed(decoded.bytes, decoded.type, optionsArg);
	  }

	  assert(type === KeyType.secp256k1 || type === KeyType.ed25519);
	  var Pair = type === 'ed25519' ? Ed25519Pair : K256Pair;
	  return Pair.fromSeed(seed, options);
	};

	function deriveWallet(seedBytes, type) {
	  var pair = KeyPair.fromSeed(seedBytes, type);

	  return {
	    seed: pair.seed(),
	    accountID: pair.accountID(),
	    publicKey: pair.pubKeyHex()
	  };
	}

	function deriveValidator(seedBytes) {
	  var pair = K256Pair.fromSeed(seedBytes, { validator: true });
	  return {
	    seed: pair.seed(),
	    publicKey: encodeNodePublic(pair.pubKeyCanonicalBytes())
	  };
	}

	function generateWallet() {
	  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var _opts$type = opts.type;
	  var type = _opts$type === undefined ? 'secp256k1' : _opts$type;
	  var _opts$random = opts.random;
	  var random = _opts$random === undefined ? brorand : _opts$random;

	  var seedBytes = random(16);
	  return deriveWallet(seedBytes, type);
	}

	function walletFromSeed(seed, seedType) {
	  var _parseSeed = parseSeed(seed, seedType);

	  var type = _parseSeed.type;
	  var bytes = _parseSeed.bytes;

	  return deriveWallet(bytes, type);
	}

	function walletFromPhrase(phrase, type) {
	  return walletFromSeed(seedFromPhrase(phrase), type);
	}

	function generateValidatorKeys() {
	  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var _opts$random2 = opts.random;
	  var random = _opts$random2 === undefined ? brorand : _opts$random2;

	  return deriveValidator(random(16));
	}

	function nodePublicAccountID(publicKey) {
	  var generatorBytes = decodeNodePublic(publicKey);
	  var accountPublicBytes = accountPublicFromPublicGenerator(generatorBytes);
	  return encodeAccountID(createAccountID(accountPublicBytes));
	}

	function validatorKeysFromSeed(seed, seedType) {
	  var _parseSeed2 = parseSeed(seed, seedType);

	  var type = _parseSeed2.type;
	  var bytes = _parseSeed2.bytes;

	  assert(type === KeyType.secp256k1);
	  return deriveValidator(bytes);
	}

	function validatorKeysFromPhrase(phrase) {
	  return deriveValidator(seedFromPhrase(phrase));
	}

	function keyPairFromSeed(seedString, options) {
	  return KeyPair.fromSeed(seedString, options);
	}

	module.exports = {
	  KeyPair: KeyPair,
	  K256Pair: K256Pair,
	  Ed25519Pair: Ed25519Pair,
	  KeyType: KeyType,
	  seedFromPhrase: seedFromPhrase,
	  createAccountID: createAccountID,
	  keyPairFromSeed: keyPairFromSeed,
	  generateWallet: generateWallet,
	  generateValidatorKeys: generateValidatorKeys,
	  walletFromSeed: walletFromSeed,
	  walletFromPhrase: walletFromPhrase,
	  validatorKeysFromSeed: validatorKeysFromSeed,
	  validatorKeysFromPhrase: validatorKeysFromPhrase,
	  nodePublicAccountID: nodePublicAccountID
	};

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$getOwnPropertyDescriptor = __webpack_require__(125)["default"];

	exports["default"] = function get(_x, _x2, _x3) {
	  var _again = true;

	  _function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;
	    desc = parent = getter = undefined;
	    _again = false;
	    if (object === null) object = Function.prototype;

	    var desc = _Object$getOwnPropertyDescriptor(object, property);

	    if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);

	      if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;
	        _x2 = property;
	        _x3 = receiver;
	        _again = true;
	        continue _function;
	      }
	    } else if ("value" in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;

	      if (getter === undefined) {
	        return undefined;
	      }

	      return getter.call(receiver);
	    }
	  }
	};

	exports.__esModule = true;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(126)["default"];

	var _Object$setPrototypeOf = __webpack_require__(127)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var assert = __webpack_require__(75);
	var utils = __webpack_require__(68);
	var parseAmount = __webpack_require__(107);
	var Transaction = utils.core.Transaction;

	function isPartialPayment(tx) {
	  return (tx.Flags & Transaction.flags.Payment.PartialPayment) !== 0;
	}

	function isNoDirectRipple(tx) {
	  return (tx.Flags & Transaction.flags.Payment.NoRippleDirect) !== 0;
	}

	function isQualityLimited(tx) {
	  return (tx.Flags & Transaction.flags.Payment.LimitQuality) !== 0;
	}

	function parsePaymentMemos(tx) {
	  if (!Array.isArray(tx.Memos) || tx.Memos.length === 0) {
	    return undefined;
	  }
	  return tx.Memos.map(function (m) {
	    return utils.removeUndefined({
	      type: m.Memo.parsed_memo_type,
	      format: m.Memo.parsed_memo_format,
	      data: m.Memo.parsed_memo_data
	    });
	  });
	}

	function removeGenericCounterparty(amount, address) {
	  return amount.counterparty === address ? _.omit(amount, 'counterparty') : amount;
	}

	function parsePayment(tx) {
	  assert(tx.TransactionType === 'Payment');

	  var source = {
	    address: tx.Account,
	    maxAmount: removeGenericCounterparty(parseAmount(tx.SendMax || tx.Amount), tx.Account),
	    tag: tx.SourceTag
	  };

	  var destination = {
	    address: tx.Destination,
	    amount: removeGenericCounterparty(parseAmount(tx.Amount), tx.Destination),
	    tag: tx.DestinationTag
	  };

	  return utils.removeUndefined({
	    source: utils.removeUndefined(source),
	    destination: utils.removeUndefined(destination),
	    memos: parsePaymentMemos(tx),
	    invoiceID: tx.InvoiceID,
	    paths: tx.Paths ? JSON.stringify(tx.Paths) : undefined,
	    allowPartialPayment: isPartialPayment(tx) || undefined,
	    noDirectRipple: isNoDirectRipple(tx) || undefined,
	    limitQuality: isQualityLimited(tx) || undefined
	  });
	}

	module.exports = parsePayment;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var assert = __webpack_require__(75);
	var utils = __webpack_require__(68);
	var flags = utils.core.Transaction.flags.TrustSet;
	var BigNumber = __webpack_require__(96);

	function parseFlag(flagsValue, trueValue, falseValue) {
	  if (flagsValue & trueValue) {
	    return true;
	  }
	  if (flagsValue & falseValue) {
	    return false;
	  }
	  return undefined;
	}

	function parseQuality(quality) {
	  if (typeof quality === 'number') {
	    return new BigNumber(quality).shift(-9).toNumber();
	  }
	  return undefined;
	}

	function parseTrustline(tx) {
	  assert(tx.TransactionType === 'TrustSet');

	  return utils.removeUndefined({
	    limit: tx.LimitAmount.value,
	    currency: tx.LimitAmount.currency,
	    counterparty: tx.LimitAmount.issuer,
	    qualityIn: parseQuality(tx.QualityIn),
	    qualityOut: parseQuality(tx.QualityOut),
	    ripplingDisabled: parseFlag(tx.Flags, flags.SetNoRipple, flags.ClearNoRipple),
	    frozen: parseFlag(tx.Flags, flags.SetFreeze, flags.ClearFreeze),
	    authorized: parseFlag(tx.Flags, flags.SetAuth, 0)
	  });
	}

	module.exports = parseTrustline;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var assert = __webpack_require__(75);
	var utils = __webpack_require__(68);
	var parseAmount = __webpack_require__(107);
	var flags = utils.core.Transaction.flags.OfferCreate;

	function parseOrder(tx) {
	  assert(tx.TransactionType === 'OfferCreate');

	  var direction = (tx.Flags & flags.Sell) === 0 ? 'buy' : 'sell';
	  var takerGetsAmount = parseAmount(tx.TakerGets);
	  var takerPaysAmount = parseAmount(tx.TakerPays);
	  var quantity = direction === 'buy' ? takerPaysAmount : takerGetsAmount;
	  var totalPrice = direction === 'buy' ? takerGetsAmount : takerPaysAmount;

	  return utils.removeUndefined({
	    direction: direction,
	    quantity: quantity,
	    totalPrice: totalPrice,
	    passive: (tx.Flags & flags.Passive) !== 0 || undefined,
	    immediateOrCancel: (tx.Flags & flags.ImmediateOrCancel) !== 0 || undefined,
	    fillOrKill: (tx.Flags & flags.FillOrKill) !== 0 || undefined
	  });
	}

	module.exports = parseOrder;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var assert = __webpack_require__(75);

	function parseOrderCancellation(tx) {
	  assert(tx.TransactionType === 'OfferCancel');
	  return {
	    orderSequence: tx.OfferSequence
	  };
	}

	module.exports = parseOrderCancellation;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var _ = __webpack_require__(51);
	var assert = __webpack_require__(75);
	var AccountFlags = __webpack_require__(68).constants.AccountFlags;
	var parseFields = __webpack_require__(67);

	function getAccountRootModifiedNode(tx) {
	  var modifiedNodes = tx.meta.AffectedNodes.filter(function (node) {
	    return node.ModifiedNode.LedgerEntryType === 'AccountRoot';
	  });
	  assert(modifiedNodes.length === 1);
	  return modifiedNodes[0].ModifiedNode;
	}

	function parseFlags(tx) {
	  var settings = {};
	  if (tx.TransactionType !== 'AccountSet') {
	    return settings;
	  }

	  var node = getAccountRootModifiedNode(tx);
	  var oldFlags = _.get(node.PreviousFields, 'Flags');
	  var newFlags = _.get(node.FinalFields, 'Flags');

	  if (oldFlags !== undefined && newFlags !== undefined) {
	    (function () {
	      var changedFlags = oldFlags ^ newFlags;
	      var setFlags = newFlags & changedFlags;
	      var clearedFlags = oldFlags & changedFlags;
	      _.forEach(AccountFlags, function (flagValue, flagName) {
	        if (setFlags & flagValue) {
	          settings[flagName] = true;
	        } else if (clearedFlags & flagValue) {
	          settings[flagName] = false;
	        }
	      });
	    })();
	  }

	  // enableTransactionIDTracking requires a special case because it
	  // does not affect the Flags field; instead it adds/removes a field called
	  // "AccountTxnID" to/from the account root.

	  var oldField = _.get(node.PreviousFields, 'AccountTxnID');
	  var newField = _.get(node.FinalFields, 'AccountTxnID');
	  if (newField && !oldField) {
	    settings.enableTransactionIDTracking = true;
	  } else if (oldField && !newField) {
	    settings.enableTransactionIDTracking = false;
	  }

	  return settings;
	}

	function parseSettings(tx) {
	  var txType = tx.TransactionType;
	  assert(txType === 'AccountSet' || txType === 'SetRegularKey');

	  var regularKey = tx.RegularKey ? { regularKey: tx.RegularKey } : {};
	  return _.assign(regularKey, parseFlags(tx), parseFields(tx));
	}

	module.exports = parseSettings;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	
	'use strict';
	var utils = __webpack_require__(68);

	function parseAmount(amount) {
	  if (typeof amount === 'string') {
	    return {
	      currency: 'XRP',
	      value: utils.dropsToXrp(amount)
	    };
	  }
	  return {
	    currency: amount.currency,
	    value: amount.value,
	    counterparty: amount.issuer
	  };
	}

	module.exports = parseAmount;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/** @fileOverview Javascript cryptography implementation.
	 *
	 * Crush to remove comments, shorten variable names and
	 * generally reduce transmission size.
	 *
	 * @author Emily Stark
	 * @author Mike Hamburg
	 * @author Dan Boneh
	 */

	"use strict";
	/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */
	/*global document, window, escape, unescape, module, require, Uint32Array */

	/** @namespace The Stanford Javascript Crypto Library, top-level namespace. */
	var sjcl = {
	  /** @namespace Symmetric ciphers. */
	  cipher: {},

	  /** @namespace Hash functions.  Right now only SHA256 is implemented. */
	  hash: {},

	  /** @namespace Key exchange functions.  Right now only SRP is implemented. */
	  keyexchange: {},
	  
	  /** @namespace Block cipher modes of operation. */
	  mode: {},

	  /** @namespace Miscellaneous.  HMAC and PBKDF2. */
	  misc: {},
	  
	  /**
	   * @namespace Bit array encoders and decoders.
	   *
	   * @description
	   * The members of this namespace are functions which translate between
	   * SJCL's bitArrays and other objects (usually strings).  Because it
	   * isn't always clear which direction is encoding and which is decoding,
	   * the method names are "fromBits" and "toBits".
	   */
	  codec: {},
	  
	  /** @namespace Exceptions. */
	  exception: {
	    /** @constructor Ciphertext is corrupt. */
	    corrupt: function(message) {
	      this.toString = function() { return "CORRUPT: "+this.message; };
	      this.message = message;
	    },
	    
	    /** @constructor Invalid parameter. */
	    invalid: function(message) {
	      this.toString = function() { return "INVALID: "+this.message; };
	      this.message = message;
	    },
	    
	    /** @constructor Bug or missing feature in SJCL. @constructor */
	    bug: function(message) {
	      this.toString = function() { return "BUG: "+this.message; };
	      this.message = message;
	    },

	    /** @constructor Something isn't ready. */
	    notReady: function(message) {
	      this.toString = function() { return "NOT READY: "+this.message; };
	      this.message = message;
	    }
	  }
	};

	if(typeof module !== 'undefined' && module.exports){
	  module.exports = sjcl;
	}
	if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	        return sjcl;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	/** @fileOverview Arrays of bits, encoded as arrays of Numbers.
	 *
	 * @author Emily Stark
	 * @author Mike Hamburg
	 * @author Dan Boneh
	 */

	/** @namespace Arrays of bits, encoded as arrays of Numbers.
	 *
	 * @description
	 * <p>
	 * These objects are the currency accepted by SJCL's crypto functions.
	 * </p>
	 *
	 * <p>
	 * Most of our crypto primitives operate on arrays of 4-byte words internally,
	 * but many of them can take arguments that are not a multiple of 4 bytes.
	 * This library encodes arrays of bits (whose size need not be a multiple of 8
	 * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an
	 * array of words, 32 bits at a time.  Since the words are double-precision
	 * floating point numbers, they fit some extra data.  We use this (in a private,
	 * possibly-changing manner) to encode the number of bits actually  present
	 * in the last word of the array.
	 * </p>
	 *
	 * <p>
	 * Because bitwise ops clear this out-of-band data, these arrays can be passed
	 * to ciphers like AES which want arrays of words.
	 * </p>
	 */
	sjcl.bitArray = {
	  /**
	   * Array slices in units of bits.
	   * @param {bitArray} a The array to slice.
	   * @param {Number} bstart The offset to the start of the slice, in bits.
	   * @param {Number} bend The offset to the end of the slice, in bits.  If this is undefined,
	   * slice until the end of the array.
	   * @return {bitArray} The requested slice.
	   */
	  bitSlice: function (a, bstart, bend) {
	    a = sjcl.bitArray._shiftRight(a.slice(bstart/32), 32 - (bstart & 31)).slice(1);
	    return (bend === undefined) ? a : sjcl.bitArray.clamp(a, bend-bstart);
	  },

	  /**
	   * Extract a number packed into a bit array.
	   * @param {bitArray} a The array to slice.
	   * @param {Number} bstart The offset to the start of the slice, in bits.
	   * @param {Number} length The length of the number to extract.
	   * @return {Number} The requested slice.
	   */
	  extract: function(a, bstart, blength) {
	    // FIXME: this Math.floor is not necessary at all, but for some reason
	    // seems to suppress a bug in the Chromium JIT.
	    var x, sh = Math.floor((-bstart-blength) & 31);
	    if ((bstart + blength - 1 ^ bstart) & -32) {
	      // it crosses a boundary
	      x = (a[bstart/32|0] << (32 - sh)) ^ (a[bstart/32+1|0] >>> sh);
	    } else {
	      // within a single word
	      x = a[bstart/32|0] >>> sh;
	    }
	    return x & ((1<<blength) - 1);
	  },

	  /**
	   * Concatenate two bit arrays.
	   * @param {bitArray} a1 The first array.
	   * @param {bitArray} a2 The second array.
	   * @return {bitArray} The concatenation of a1 and a2.
	   */
	  concat: function (a1, a2) {
	    if (a1.length === 0 || a2.length === 0) {
	      return a1.concat(a2);
	    }
	    
	    var last = a1[a1.length-1], shift = sjcl.bitArray.getPartial(last);
	    if (shift === 32) {
	      return a1.concat(a2);
	    } else {
	      return sjcl.bitArray._shiftRight(a2, shift, last|0, a1.slice(0,a1.length-1));
	    }
	  },

	  /**
	   * Find the length of an array of bits.
	   * @param {bitArray} a The array.
	   * @return {Number} The length of a, in bits.
	   */
	  bitLength: function (a) {
	    var l = a.length, x;
	    if (l === 0) { return 0; }
	    x = a[l - 1];
	    return (l-1) * 32 + sjcl.bitArray.getPartial(x);
	  },

	  /**
	   * Truncate an array.
	   * @param {bitArray} a The array.
	   * @param {Number} len The length to truncate to, in bits.
	   * @return {bitArray} A new array, truncated to len bits.
	   */
	  clamp: function (a, len) {
	    if (a.length * 32 < len) { return a; }
	    a = a.slice(0, Math.ceil(len / 32));
	    var l = a.length;
	    len = len & 31;
	    if (l > 0 && len) {
	      a[l-1] = sjcl.bitArray.partial(len, a[l-1] & 0x80000000 >> (len-1), 1);
	    }
	    return a;
	  },

	  /**
	   * Make a partial word for a bit array.
	   * @param {Number} len The number of bits in the word.
	   * @param {Number} x The bits.
	   * @param {Number} [0] _end Pass 1 if x has already been shifted to the high side.
	   * @return {Number} The partial word.
	   */
	  partial: function (len, x, _end) {
	    if (len === 32) { return x; }
	    return (_end ? x|0 : x << (32-len)) + len * 0x10000000000;
	  },

	  /**
	   * Get the number of bits used by a partial word.
	   * @param {Number} x The partial word.
	   * @return {Number} The number of bits used by the partial word.
	   */
	  getPartial: function (x) {
	    return Math.round(x/0x10000000000) || 32;
	  },

	  /**
	   * Compare two arrays for equality in a predictable amount of time.
	   * @param {bitArray} a The first array.
	   * @param {bitArray} b The second array.
	   * @return {boolean} true if a == b; false otherwise.
	   */
	  equal: function (a, b) {
	    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b)) {
	      return false;
	    }
	    var x = 0, i;
	    for (i=0; i<a.length; i++) {
	      x |= a[i]^b[i];
	    }
	    return (x === 0);
	  },

	  /** Shift an array right.
	   * @param {bitArray} a The array to shift.
	   * @param {Number} shift The number of bits to shift.
	   * @param {Number} [carry=0] A byte to carry in
	   * @param {bitArray} [out=[]] An array to prepend to the output.
	   * @private
	   */
	  _shiftRight: function (a, shift, carry, out) {
	    var i, last2=0, shift2;
	    if (out === undefined) { out = []; }
	    
	    for (; shift >= 32; shift -= 32) {
	      out.push(carry);
	      carry = 0;
	    }
	    if (shift === 0) {
	      return out.concat(a);
	    }
	    
	    for (i=0; i<a.length; i++) {
	      out.push(carry | a[i]>>>shift);
	      carry = a[i] << (32-shift);
	    }
	    last2 = a.length ? a[a.length-1] : 0;
	    shift2 = sjcl.bitArray.getPartial(last2);
	    out.push(sjcl.bitArray.partial(shift+shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(),1));
	    return out;
	  },
	  
	  /** xor a block of 4 words together.
	   * @private
	   */
	  _xor4: function(x,y) {
	    return [x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]];
	  },

	  /** byteswap a word array inplace.
	   * (does not handle partial words)
	   * @param {sjcl.bitArray} a word array
	   * @return {sjcl.bitArray} byteswapped array
	   */
	  byteswapM: function(a) {
	    var i, v, m = 0xff00;
	    for (i = 0; i < a.length; ++i) {
	      v = a[i];
	      a[i] = (v >>> 24) | ((v >>> 8) & m) | ((v & m) << 8) | (v << 24);
	    }
	    return a;
	  }
	};
	/** @fileOverview Bit array codec implementations.
	 *
	 * @author Emily Stark
	 * @author Mike Hamburg
	 * @author Dan Boneh
	 */
	 
	/** @namespace UTF-8 strings */
	sjcl.codec.utf8String = {
	  /** Convert from a bitArray to a UTF-8 string. */
	  fromBits: function (arr) {
	    var out = "", bl = sjcl.bitArray.bitLength(arr), i, tmp;
	    for (i=0; i<bl/8; i++) {
	      if ((i&3) === 0) {
	        tmp = arr[i/4];
	      }
	      out += String.fromCharCode(tmp >>> 24);
	      tmp <<= 8;
	    }
	    return decodeURIComponent(escape(out));
	  },
	  
	  /** Convert from a UTF-8 string to a bitArray. */
	  toBits: function (str) {
	    str = unescape(encodeURIComponent(str));
	    var out = [], i, tmp=0;
	    for (i=0; i<str.length; i++) {
	      tmp = tmp << 8 | str.charCodeAt(i);
	      if ((i&3) === 3) {
	        out.push(tmp);
	        tmp = 0;
	      }
	    }
	    if (i&3) {
	      out.push(sjcl.bitArray.partial(8*(i&3), tmp));
	    }
	    return out;
	  }
	};
	/** @fileOverview Bit array codec implementations.
	 *
	 * @author Emily Stark
	 * @author Mike Hamburg
	 * @author Dan Boneh
	 */

	/** @namespace Hexadecimal */
	sjcl.codec.hex = {
	  /** Convert from a bitArray to a hex string. */
	  fromBits: function (arr) {
	    var out = "", i;
	    for (i=0; i<arr.length; i++) {
	      out += ((arr[i]|0)+0xF00000000000).toString(16).substr(4);
	    }
	    return out.substr(0, sjcl.bitArray.bitLength(arr)/4);//.replace(/(.{8})/g, "$1 ");
	  },
	  /** Convert from a hex string to a bitArray. */
	  toBits: function (str) {
	    var i, out=[], len;
	    str = str.replace(/\s|0x/g, "");
	    len = str.length;
	    str = str + "00000000";
	    for (i=0; i<str.length; i+=8) {
	      out.push(parseInt(str.substr(i,8),16)^0);
	    }
	    return sjcl.bitArray.clamp(out, len*4);
	  }
	};

	/** @fileOverview Bit array codec implementations.
	 *
	 * @author Nils Kenneweg
	 */

	/** @namespace Base32 encoding/decoding */
	sjcl.codec.base32 = {
	  /** The base32 alphabet.
	   * @private
	   */
	  _chars: "0123456789abcdefghjkmnpqrstvwxyz",

	  /* bits in an array */
	  BITS: 32,
	  /* base to encode at (2^x) */
	  BASE: 5,
	  /* bits - base */
	  REMAINING: 27,
	  
	  /** Convert from a bitArray to a base32 string. */
	  fromBits: function (arr, _noEquals) {
	    var BITS = sjcl.codec.base32.BITS, BASE = sjcl.codec.base32.BASE, REMAINING = sjcl.codec.base32.REMAINING;
	    var out = "", i, bits=0, c = sjcl.codec.base32._chars, ta=0, bl = sjcl.bitArray.bitLength(arr);

	    for (i=0; out.length * BASE <= bl; ) {
	      out += c.charAt((ta ^ arr[i]>>>bits) >>> REMAINING);
	      if (bits < BASE) {
	        ta = arr[i] << (BASE-bits);
	        bits += REMAINING;
	        i++;
	      } else {
	        ta <<= BASE;
	        bits -= BASE;
	      }
	    }

	    return out;
	  },
	  
	  /** Convert from a base32 string to a bitArray */
	  toBits: function(str) {
	    var BITS = sjcl.codec.base32.BITS, BASE = sjcl.codec.base32.BASE, REMAINING = sjcl.codec.base32.REMAINING;
	    var out = [], i, bits=0, c = sjcl.codec.base32._chars, ta=0, x;

	    for (i=0; i<str.length; i++) {
	      x = c.indexOf(str.charAt(i));
	      if (x < 0) {
	        throw new sjcl.exception.invalid("this isn't base32!");
	      }
	      if (bits > REMAINING) {
	        bits -= REMAINING;
	        out.push(ta ^ x>>>bits);
	        ta  = x << (BITS-bits);
	      } else {
	        bits += BASE;
	        ta ^= x << (BITS-bits);
	      }
	    }
	    if (bits&56) {
	      out.push(sjcl.bitArray.partial(bits&56, ta, 1));
	    }
	    return out;
	  }
	};
	/** @fileOverview Bit array codec implementations.
	 *
	 * @author Emily Stark
	 * @author Mike Hamburg
	 * @author Dan Boneh
	 */

	/** @namespace Base64 encoding/decoding */
	sjcl.codec.base64 = {
	  /** The base64 alphabet.
	   * @private
	   */
	  _chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
	  
	  /** Convert from a bitArray to a base64 string. */
	  fromBits: function (arr, _noEquals, _url) {
	    var out = "", i, bits=0, c = sjcl.codec.base64._chars, ta=0, bl = sjcl.bitArray.bitLength(arr);
	    if (_url) {
	      c = c.substr(0,62) + '-_';
	    }
	    for (i=0; out.length * 6 < bl; ) {
	      out += c.charAt((ta ^ arr[i]>>>bits) >>> 26);
	      if (bits < 6) {
	        ta = arr[i] << (6-bits);
	        bits += 26;
	        i++;
	      } else {
	        ta <<= 6;
	        bits -= 6;
	      }
	    }
	    while ((out.length & 3) && !_noEquals) { out += "="; }
	    return out;
	  },
	  
	  /** Convert from a base64 string to a bitArray */
	  toBits: function(str, _url) {
	    str = str.replace(/\s|=/g,'');
	    var out = [], i, bits=0, c = sjcl.codec.base64._chars, ta=0, x;
	    if (_url) {
	      c = c.substr(0,62) + '-_';
	    }
	    for (i=0; i<str.length; i++) {
	      x = c.indexOf(str.charAt(i));
	      if (x < 0) {
	        throw new sjcl.exception.invalid("this isn't base64!");
	      }
	      if (bits > 26) {
	        bits -= 26;
	        out.push(ta ^ x>>>bits);
	        ta  = x << (32-bits);
	      } else {
	        bits += 6;
	        ta ^= x << (32-bits);
	      }
	    }
	    if (bits&56) {
	      out.push(sjcl.bitArray.partial(bits&56, ta, 1));
	    }
	    return out;
	  }
	};

	sjcl.codec.base64url = {
	  fromBits: function (arr) { return sjcl.codec.base64.fromBits(arr,1,1); },
	  toBits: function (str) { return sjcl.codec.base64.toBits(str,1); }
	};
	/** @fileOverview Bit array codec implementations.
	 *
	 * @author Emily Stark
	 * @author Mike Hamburg
	 * @author Dan Boneh
	 */

	/** @namespace Arrays of bytes */
	sjcl.codec.bytes = {
	  /** Convert from a bitArray to an array of bytes. */
	  fromBits: function (arr) {
	    var out = [], bl = sjcl.bitArray.bitLength(arr), i, tmp;
	    for (i=0; i<bl/8; i++) {
	      if ((i&3) === 0) {
	        tmp = arr[i/4];
	      }
	      out.push(tmp >>> 24);
	      tmp <<= 8;
	    }
	    return out;
	  },
	  /** Convert from an array of bytes to a bitArray. */
	  toBits: function (bytes) {
	    var out = [], i, tmp=0;
	    for (i=0; i<bytes.length; i++) {
	      tmp = tmp << 8 | bytes[i];
	      if ((i&3) === 3) {
	        out.push(tmp);
	        tmp = 0;
	      }
	    }
	    if (i&3) {
	      out.push(sjcl.bitArray.partial(8*(i&3), tmp));
	    }
	    return out;
	  }
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	exports['date-time'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}[tT ]\d{2}:\d{2}:\d{2}(\.\d+)?([zZ]|[+-]\d{2}:\d{2})$/
	exports['date'] = /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-[0-9]{2}$/
	exports['time'] = /^\d{2}:\d{2}:\d{2}$/
	exports['email'] = /^\S+@\S+$/
	exports['ip-address'] = exports['ipv4'] = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
	exports['ipv6'] = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
	exports['uri'] = /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/
	exports['color'] = /(#?([0-9A-Fa-f]{3,6})\b)|(aqua)|(black)|(blue)|(fuchsia)|(gray)|(green)|(lime)|(maroon)|(navy)|(olive)|(orange)|(purple)|(red)|(silver)|(teal)|(white)|(yellow)|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\))/
	exports['hostname'] = /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*$/
	exports['alpha'] = /^[a-zA-Z]+$/
	exports['alphanumeric'] = /^[a-zA-Z0-9]+$/
	exports['style'] = /\s*(.+?):\s*([^;]+);?/g
	exports['phone'] = /^\+(?:[0-9] ?){6,14}[0-9]$/
	exports['utc-millisec'] = /^[0-9]+(\.?[0-9]+)?$/


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(151), __esModule: true };

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(150), __esModule: true };

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var utils = exports;
	var inherits = __webpack_require__(161);

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        var hi = c >> 8;
	        var lo = c & 0xff;
	        if (hi)
	          res.push(hi, lo);
	        else
	          res.push(lo);
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (var i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	utils.htonl = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	utils.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	utils.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	utils.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	utils.split32 = split32;

	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	utils.rotr32 = rotr32;

	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	utils.rotl32 = rotl32;

	function sum32(a, b) {
	  return (a + b) >>> 0;
	}
	utils.sum32 = sum32;

	function sum32_3(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	utils.sum32_3 = sum32_3;

	function sum32_4(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	utils.sum32_4 = sum32_4;

	function sum32_5(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	utils.sum32_5 = sum32_5;

	function assert(cond, msg) {
	  if (!cond)
	    throw new Error(msg || 'Assertion failed');
	}
	utils.assert = assert;

	utils.inherits = inherits;

	function sum64(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	exports.sum64 = sum64;

	function sum64_hi(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	};
	exports.sum64_hi = sum64_hi;

	function sum64_lo(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	};
	exports.sum64_lo = sum64_lo;

	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	};
	exports.sum64_4_hi = sum64_4_hi;

	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	};
	exports.sum64_4_lo = sum64_4_lo;

	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	};
	exports.sum64_5_hi = sum64_5_hi;

	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	};
	exports.sum64_5_lo = sum64_5_lo;

	function rotr64_hi(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	};
	exports.rotr64_hi = rotr64_hi;

	function rotr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	};
	exports.rotr64_lo = rotr64_lo;

	function shr64_hi(ah, al, num) {
	  return ah >>> num;
	};
	exports.shr64_hi = shr64_hi;

	function shr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	};
	exports.shr64_lo = shr64_lo;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(94);
	var utils = hash.utils;
	var assert = utils.assert;

	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	exports.BlockHash = BlockHash;

	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(94);
	var utils = hash.utils;
	var assert = utils.assert;

	var rotr32 = utils.rotr32;
	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_4 = utils.sum32_4;
	var sum32_5 = utils.sum32_5;
	var rotr64_hi = utils.rotr64_hi;
	var rotr64_lo = utils.rotr64_lo;
	var shr64_hi = utils.shr64_hi;
	var shr64_lo = utils.shr64_lo;
	var sum64 = utils.sum64;
	var sum64_hi = utils.sum64_hi;
	var sum64_lo = utils.sum64_lo;
	var sum64_4_hi = utils.sum64_4_hi;
	var sum64_4_lo = utils.sum64_4_lo;
	var sum64_5_hi = utils.sum64_5_hi;
	var sum64_5_lo = utils.sum64_5_lo;
	var BlockHash = hash.common.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();

	  BlockHash.call(this);
	  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash);
	exports.sha256 = SHA256;

	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;

	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32(T1, T2);
	  }

	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	  this.h[5] = sum32(this.h[5], f);
	  this.h[6] = sum32(this.h[6], g);
	  this.h[7] = sum32(this.h[7], h);
	};

	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256.call(this);
	  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, SHA256);
	exports.sha224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils.split32(this.h.slice(0, 7), 'big');
	};

	function SHA512() {
	  if (!(this instanceof SHA512))
	    return new SHA512();

	  BlockHash.call(this);
	  this.h = [ 0x6a09e667, 0xf3bcc908,
	             0xbb67ae85, 0x84caa73b,
	             0x3c6ef372, 0xfe94f82b,
	             0xa54ff53a, 0x5f1d36f1,
	             0x510e527f, 0xade682d1,
	             0x9b05688c, 0x2b3e6c1f,
	             0x1f83d9ab, 0xfb41bd6b,
	             0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils.inherits(SHA512, BlockHash);
	exports.sha512 = SHA512;

	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;

	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi(c0_hi, c0_lo,
	                      c1_hi, c1_lo,
	                      c2_hi, c2_lo,
	                      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
	                          c1_hi, c1_lo,
	                          c2_hi, c2_lo,
	                          c3_hi, c3_lo);
	  }
	};

	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  assert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
	                           c1_hi, c1_lo,
	                           c2_hi, c2_lo,
	                           c3_hi, c3_lo,
	                           c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
	                           c1_hi, c1_lo,
	                           c2_hi, c2_lo,
	                           c3_hi, c3_lo,
	                           c4_hi, c4_lo);

	    var c0_hi = s0_512_hi(ah, al);
	    var c0_lo = s0_512_lo(ah, al);
	    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
	    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};

	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  SHA512.call(this);
	  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
	             0x629a292a, 0x367cd507,
	             0x9159015a, 0x3070dd17,
	             0x152fecd8, 0xf70e5939,
	             0x67332667, 0xffc00b31,
	             0x8eb44a87, 0x68581511,
	             0xdb0c2e0d, 0x64f98fa7,
	             0x47b5481d, 0xbefa4fa4 ];
	}
	utils.inherits(SHA384, SHA512);
	exports.sha384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils.split32(this.h.slice(0, 12), 'big');
	};

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash.call(this);
	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
	             0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils.inherits(SHA1, BlockHash);
	exports.sha1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (var i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}

	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}

	function s0_256(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}

	function s1_256(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}

	function g0_256(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}

	function g1_256(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}

	function ft_1(s, x, y, z) {
	  if (s === 0)
	    return ch32(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32(x, y, z);
	}

	function ch64_hi(xh, xl, yh, yl, zh, zl) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh, zl) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(94);
	var utils = hash.utils;

	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_3 = utils.sum32_3;
	var sum32_4 = utils.sum32_4;
	var BlockHash = hash.common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash);
	exports.ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'little');
	  else
	    return utils.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var hmac = exports;

	var hash = __webpack_require__(94);
	var utils = hash.utils;
	var assert = utils.assert;

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils.toArray(key, enc));
	}
	module.exports = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (var i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (var i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	module.exports.parseBalanceChanges = __webpack_require__(144).parseBalanceChanges;
	module.exports.parseOrderbookChanges = __webpack_require__(145).parseOrderbookChanges;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/*jslint node: true, browser: true, maxlen: 120 */

	/**
	 * promisify
	 *
	 * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into
	 * an ES6-compatible Promise. User can provide their own callback function; otherwise
	 * promisify provides a callback of the form (error, result) and rejects on truthy error.
	 * If supplying your own callback function, use this.resolve() and this.reject().
	 *
	 * @param {function} original - The function to promisify
	 * @param {function} callback - Optional custom callbac function
	 * @return {function} A promisified version of 'original'
	 */

	"use strict";

	var Promise;

	// Get a promise object. This may be native, or it may be polyfilled
	Promise = __webpack_require__(146);

	// Promise Context object constructor.
	function Context(resolve, reject, custom) {
	    this.resolve = resolve;
	    this.reject = reject;
	    this.custom = custom;
	}

	// Default callback function - rejects on truthy error, otherwise resolves
	function callback(ctx, err, result) {
	    if (typeof ctx.custom === 'function') {
	        var cust = function () {
	            // Bind the callback to itself, so the resolve and reject
	            // properties that we bound are available to the callback.
	            // Then we push it onto the end of the arguments array.
	            return ctx.custom.apply(cust, arguments);
	        };
	        cust.resolve = ctx.resolve;
	        cust.reject = ctx.reject;
	        cust.call(null, err, result);
	    } else {
	        if (err) {
	            return ctx.reject(err);
	        }
	        ctx.resolve(result);
	    }
	}

	module.exports = function (original, custom) {

	    return function () {

	        // Store original context
	        var that = this,
	            args = Array.prototype.slice.call(arguments);

	        // Return the promisified function
	        return new Promise(function (resolve, reject) {

	            // Create a Context object
	            var ctx = new Context(resolve, reject, custom);

	            // Append the callback bound to the context
	            args.push(callback.bind(null, ctx));

	            // Call the function
	            original.apply(that, args);
	        });
	    };
	};


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hashjs = __webpack_require__(94);
	var Sha512 = __webpack_require__(152);

	function isVirtual(_, __, descriptor) {
	  descriptor.value = function () {
	    throw new Error('virtual method not implemented ');
	  };
	}

	function cached(_, name, descriptor) {
	  var computer = descriptor.value;
	  var key = '_' + name;
	  descriptor.value = function () {
	    var value = this[key];
	    if (value === undefined) {
	      value = this[key] = computer.call(this);
	    }
	    return value;
	  };
	}

	function toGenericArray(sequence) {
	  var generic = [];
	  for (var i = 0; i < sequence.length; i++) {
	    generic.push(sequence[i]);
	  }
	  return generic;
	}

	function bytesToHex(a) {
	  return a.map(function (byteValue) {
	    var hex = byteValue.toString(16).toUpperCase();
	    return hex.length > 1 ? hex : '0' + hex;
	  }).join('');
	}

	function createAccountID(pubKeyBytes) {
	  var hash256 = hashjs.sha256().update(pubKeyBytes).digest();
	  var hash160 = hashjs.ripemd160().update(hash256).digest();
	  return hash160;
	}

	function seedFromPhrase(phrase) {
	  return hashjs.sha512().update(phrase).digest().slice(0, 16);
	}

	module.exports = {
	  cached: cached,
	  bytesToHex: bytesToHex,
	  createAccountID: createAccountID,
	  isVirtual: isVirtual,
	  seedFromPhrase: seedFromPhrase,
	  Sha512: Sha512,
	  toGenericArray: toGenericArray
	};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createDecoratedClass = __webpack_require__(153)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var codec = __webpack_require__(92);

	var _require = __webpack_require__(121);

	var bytesToHex = _require.bytesToHex;
	var cached = _require.cached;
	var isVirtual = _require.isVirtual;
	var createAccountID = _require.createAccountID;

	var KeyType = {
	  secp256k1: 'secp256k1',
	  ed25519: 'ed25519'
	};

	var KeyPair = (function () {
	  function KeyPair(_ref) {
	    var seedBytes = _ref.seedBytes;
	    var pubBytes = _ref.pubBytes;

	    _classCallCheck(this, KeyPair);

	    this.seedBytes = seedBytes;
	    this._pubKeyCanonicalBytes = pubBytes;
	  }

	  /*
	  * @param {Array} message
	  */

	  _createDecoratedClass(KeyPair, [{
	    key: 'sign',
	    decorators: [isVirtual],
	    value: function sign() {}

	    /*
	    * @param {Array<Byte>} message
	    * @param {Array<Byte>} signature
	    */
	  }, {
	    key: 'verify',
	    decorators: [isVirtual],
	    value: function verify() {}

	    /*
	    * @return {Array<Byte>} of bytes, in canonical form, for signing
	    */
	  }, {
	    key: 'pubKeyCanonicalBytes',
	    decorators: [isVirtual],
	    value: function pubKeyCanonicalBytes() {}
	  }, {
	    key: 'pubKeyHex',
	    decorators: [cached],
	    value: function pubKeyHex() {
	      return bytesToHex(this.pubKeyCanonicalBytes());
	    }
	  }, {
	    key: 'accountBytes',
	    decorators: [cached],
	    value: function accountBytes() {
	      return createAccountID(this.pubKeyCanonicalBytes());
	    }
	  }, {
	    key: 'accountID',
	    decorators: [cached],
	    value: function accountID() {
	      return codec.encodeAccountID(this.accountBytes());
	    }
	  }, {
	    key: 'seed',
	    decorators: [cached],
	    value: function seed() {
	      return codec.encodeSeed(this.seedBytes, this.type);
	    }
	  }, {
	    key: 'signHex',
	    value: function signHex(message) {
	      return bytesToHex(this.sign(message));
	    }
	  }]);

	  return KeyPair;
	})();

	module.exports = {
	  KeyPair: KeyPair,
	  KeyType: KeyType
	};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _get = __webpack_require__(100)['default'];

	var _inherits = __webpack_require__(101)['default'];

	var _createDecoratedClass = __webpack_require__(153)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var elliptic = __webpack_require__(160);
	var parseBytes = elliptic.utils.parseBytes;

	var Ed25519 = elliptic.eddsa('ed25519');

	var _require = __webpack_require__(122);

	var KeyPair = _require.KeyPair;
	var KeyType = _require.KeyType;

	var _require2 = __webpack_require__(121);

	/*
	@param {Array} seed bytes
	 */
	var Sha512 = _require2.Sha512;
	var cached = _require2.cached;
	function deriveEdKeyPairSecret(seed) {
	  return new Sha512().add(seed).first256();
	}

	var Ed25519Pair = (function (_KeyPair) {
	  _inherits(Ed25519Pair, _KeyPair);

	  function Ed25519Pair(options) {
	    _classCallCheck(this, Ed25519Pair);

	    _get(Object.getPrototypeOf(Ed25519Pair.prototype), 'constructor', this).call(this, options);
	    this.type = KeyType.ed25519;
	  }

	  /**
	  * @param {String|Array} publicKey - public key in canonical form
	  *                                   (0xED + 32 bytes)
	  * @return {Ed25519Pair} key pair
	  */

	  _createDecoratedClass(Ed25519Pair, [{
	    key: 'sign',
	    value: function sign(message) {
	      return this.key().sign(message).toBytes();
	    }
	  }, {
	    key: 'verify',
	    value: function verify(message, signature) {
	      return this.key().verify(message, signature);
	    }
	  }, {
	    key: 'pubKeyCanonicalBytes',
	    decorators: [cached],
	    value: function pubKeyCanonicalBytes() {
	      return [0xED].concat(this.key().pubBytes());
	    }
	  }, {
	    key: 'key',
	    decorators: [cached],
	    value: function key() {
	      if (this.seedBytes) {
	        return Ed25519.keyFromSecret(deriveEdKeyPairSecret(this.seedBytes));
	      }
	      return Ed25519.keyFromPublic(this.pubKeyCanonicalBytes().slice(1));
	    }
	  }], [{
	    key: 'fromPublic',
	    value: function fromPublic(publicKey) {
	      return new Ed25519Pair({ pubBytes: parseBytes(publicKey) });
	    }

	    /**
	    * @param {Array<Number>} seedBytes - A 128 bit seed
	    * @return {Ed25519Pair} key pair
	    */
	  }, {
	    key: 'fromSeed',
	    value: function fromSeed(seedBytes) {
	      return new Ed25519Pair({ seedBytes: seedBytes });
	    }
	  }]);

	  return Ed25519Pair;
	})(KeyPair);

	module.exports = {
	  Ed25519Pair: Ed25519Pair
	};

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _get = __webpack_require__(100)['default'];

	var _inherits = __webpack_require__(101)['default'];

	var _createDecoratedClass = __webpack_require__(153)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var elliptic = __webpack_require__(160);
	var secp256k1 = elliptic.ec('secp256k1');
	var hashjs = __webpack_require__(94);

	var _require = __webpack_require__(122);

	var KeyPair = _require.KeyPair;
	var KeyType = _require.KeyType;

	var _require2 = __webpack_require__(121);

	var Sha512 = _require2.Sha512;
	var cached = _require2.cached;

	function deriveScalar(bytes, discrim) {
	  var order = secp256k1.curve.n;
	  for (var i = 0; i <= 0xFFFFFFFF; i++) {
	    // We hash the bytes to find a 256 bit number, looping until we are sure it
	    // is less than the order of the curve.
	    var hasher = new Sha512().add(bytes);
	    // If the optional discriminator index was passed in, update the hash.
	    if (discrim !== undefined) {
	      hasher.addU32(discrim);
	    }
	    hasher.addU32(i);
	    var key = hasher.first256BN();
	    if (key.cmpn(0) > 0 && key.cmp(order) < 0) {
	      return key;
	    }
	  }
	  throw new Error('impossible unicorn ;)');
	}

	/**
	* @param {Array} seed - bytes
	* @param {Object} [opts] - object
	* @param {Number} [opts.accountIndex=0] - the account number to generate
	* @param {Boolean} [opts.validator=false] - generate root key-pair,
	*                                              as used by validators.
	* @return {bn.js} - 256 bit scalar value
	*
	*/
	function deriveSecret(seed) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var root = opts.validator;
	  var order = secp256k1.curve.n;

	  // This private generator represents the `root` private key, and is what's
	  // used by validators for signing when a keypair is generated from a seed.
	  var privateGen = deriveScalar(seed);
	  if (root) {
	    // As returned by validation_create for a given seed
	    return privateGen;
	  }
	  var publicGen = secp256k1.g.mul(privateGen);
	  // A seed can generate many keypairs as a function of the seed and a uint32.
	  // Almost everyone just uses the first account, `0`.
	  var accountIndex = opts.accountIndex || 0;
	  return deriveScalar(publicGen.encodeCompressed(), accountIndex).add(privateGen).mod(order);
	}

	function accountPublicFromPublicGenerator(publicGenBytes) {
	  var rootPubPoint = secp256k1.curve.decodePoint(publicGenBytes);
	  var scalar = deriveScalar(publicGenBytes, 0);
	  var point = secp256k1.g.mul(scalar);
	  var offset = rootPubPoint.add(point);
	  return offset.encodeCompressed();
	}

	var K256Pair = (function (_KeyPair) {
	  _inherits(K256Pair, _KeyPair);

	  function K256Pair(options) {
	    _classCallCheck(this, K256Pair);

	    _get(Object.getPrototypeOf(K256Pair.prototype), 'constructor', this).call(this, options);
	    this.type = KeyType.secp256k1;
	    this.validator = options.validator;
	  }

	  _createDecoratedClass(K256Pair, [{
	    key: 'sign',

	    /*
	    @param {Array<Byte>} message (bytes)
	     */
	    value: function sign(message) {
	      return this._createSignature(message).toDER();
	    }

	    /*
	    @param {Array<Byte>} message - bytes
	    @param {Array<Byte>} signature - DER encoded signature bytes
	     */
	  }, {
	    key: 'verify',
	    value: function verify(message, signature) {
	      try {
	        return this.key().verify(this.hashMessage(message), signature);
	        /* eslint-disable no-catch-shadow */
	      } catch (e) {
	        /* eslint-enable no-catch-shadow */
	        return false;
	      }
	    }
	  }, {
	    key: 'pubKeyCanonicalBytes',
	    decorators: [cached],
	    value: function pubKeyCanonicalBytes() {
	      return this.key().getPublic().encodeCompressed();
	    }
	  }, {
	    key: '_createSignature',
	    value: function _createSignature(message) {
	      return this.key().sign(this.hashMessage(message), { canonical: true });
	    }

	    /*
	    @param {Array<Byte>} message - (bytes)
	    @return {Array<Byte>} - 256 bit hash of the message
	     */
	  }, {
	    key: 'hashMessage',
	    value: function hashMessage(message) {
	      return hashjs.sha512().update(message).digest().slice(0, 32);
	    }
	  }, {
	    key: 'key',
	    decorators: [cached],
	    value: function key() {
	      if (this.seedBytes) {
	        var options = { validator: this.validator };
	        return secp256k1.keyFromPrivate(deriveSecret(this.seedBytes, options));
	      }
	      return secp256k1.keyFromPublic(this.pubKeyCanonicalBytes());
	    }
	  }], [{
	    key: 'fromSeed',
	    value: function fromSeed(seedBytes) {
	      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	      return new K256Pair({ seedBytes: seedBytes, validator: opts.validator });
	    }
	  }]);

	  return K256Pair;
	})(KeyPair);

	module.exports = {
	  K256Pair: K256Pair,
	  accountPublicFromPublicGenerator: accountPublicFromPublicGenerator
	};

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(156), __esModule: true };

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(155), __esModule: true };

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(157), __esModule: true };

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(108)(module), (function() { return this; }())))

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    draining = true;
	    var currentQueue;
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        var i = -1;
	        while (++i < len) {
	            currentQueue[i]();
	        }
	        len = queue.length;
	    }
	    draining = false;
	}
	process.nextTick = function (fun) {
	    queue.push(fun);
	    if (!draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(158);
	exports.encode = exports.stringify = __webpack_require__(159);


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var isProperty = __webpack_require__(178)

	var gen = function(obj, prop) {
	  return isProperty(prop) ? obj+'.'+prop : obj+'['+JSON.stringify(prop)+']'
	}

	gen.valid = isProperty
	gen.property = function (prop) {
	 return isProperty(prop) ? prop : JSON.stringify(prop)
	}

	module.exports = gen


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(81)

	var INDENT_START = /[\{\[]/
	var INDENT_END = /[\}\]]/

	module.exports = function() {
	  var lines = []
	  var indent = 0

	  var push = function(str) {
	    var spaces = ''
	    while (spaces.length < indent*2) spaces += '  '
	    lines.push(spaces+str)
	  }

	  var line = function(fmt) {
	    if (!fmt) return line

	    if (INDENT_END.test(fmt.trim()[0]) && INDENT_START.test(fmt[fmt.length-1])) {
	      indent--
	      push(util.format.apply(util, arguments))
	      indent++
	      return line
	    }
	    if (INDENT_START.test(fmt[fmt.length-1])) {
	      push(util.format.apply(util, arguments))
	      indent++
	      return line
	    }
	    if (INDENT_END.test(fmt.trim()[0])) {
	      indent--
	      push(util.format.apply(util, arguments))
	      return line
	    }

	    push(util.format.apply(util, arguments))
	    return line
	  }

	  line.toString = function() {
	    return lines.join('\n')
	  }

	  line.toFunction = function(scope) {
	    var src = 'return ('+line.toString()+')'

	    var keys = Object.keys(scope || {}).map(function(key) {
	      return key
	    })

	    var vals = keys.map(function(key) {
	      return scope[key]
	    })

	    return Function.apply(null, keys.concat(src)).apply(null, vals)
	  }

	  if (arguments.length) line.apply(null, arguments)

	  return line
	}


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(177).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(135).setImmediate, __webpack_require__(135).clearImmediate))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;

	var isArray = function isArray(arr) {
		if (typeof Array.isArray === 'function') {
			return Array.isArray(arr);
		}

		return toStr.call(arr) === '[object Array]';
	};

	var isPlainObject = function isPlainObject(obj) {
		if (!obj || toStr.call(obj) !== '[object Object]') {
			return false;
		}

		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) {/**/}

		return typeof key === 'undefined' || hasOwn.call(obj, key);
	};

	module.exports = function extend() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0],
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
			target = {};
		}

		for (; i < length; ++i) {
			options = arguments[i];
			// Only deal with non-null/undefined values
			if (options != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target !== copy) {
						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && isArray(src) ? src : [];
							} else {
								clone = src && isPlainObject(src) ? src : {};
							}

							// Never move original objects, clone them
							target[name] = extend(deep, clone, copy);

						// Don't bring in undefined values
						} else if (typeof copy !== 'undefined') {
							target[name] = copy;
						}
					}
				}
			}
		}

		// Return the modified object
		return target;
	};



/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(false ? (this.base64js = {}) : exports))


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var console = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"console\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var untilde = function(str) {
	  return str.replace(/~./g, function(m) {
	    switch (m) {
	      case "~0":
	        return "~";
	      case "~1":
	        return "/";
	    }
	    throw("Invalid tilde escape: " + m);
	  });
	}

	var traverse = function(obj, pointer, value) {
	  // assert(isArray(pointer))
	  var part = untilde(pointer.shift());
	  if(typeof obj[part] === "undefined") {
	    throw("Value for pointer '" + pointer + "' not found.");
	    return;
	  }
	  if(pointer.length !== 0) { // keep traversin!
	    return traverse(obj[part], pointer, value);
	  }
	  // we're done
	  if(typeof value === "undefined") {
	    // just reading
	    return obj[part];
	  }
	  // set new value, return old value
	  var old_value = obj[part];
	  if(value === null) {
	    delete obj[part];
	  } else {
	    obj[part] = value;
	  }
	  return old_value;
	}

	var validate_input = function(obj, pointer) {
	  if(typeof obj !== "object") {
	    throw("Invalid input object.");
	  }

	  if(pointer === "") {
	    return [];
	  }

	  if(!pointer) {
	    throw("Invalid JSON pointer.");
	  }

	  pointer = pointer.split("/");
	  var first = pointer.shift();
	  if (first !== "") {
	    throw("Invalid JSON pointer.");
	  }

	  return pointer;
	}

	var get = function(obj, pointer) {
	  pointer = validate_input(obj, pointer);
	  if (pointer.length === 0) {
	    return obj;
	  }
	  return traverse(obj, pointer);
	}

	var set = function(obj, pointer, value) {
	  pointer = validate_input(obj, pointer);
	  if (pointer.length === 0) {
	    throw("Invalid JSON pointer for set.")
	  }
	  return traverse(obj, pointer, value);
	}

	exports.get = get
	exports.set = set


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = extend

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var r;

	module.exports = function rand(len) {
	  if (!r)
	    r = new Rand(null);

	  return r.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	module.exports.Rand = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	if (typeof window === 'object') {
	  if (window.crypto && window.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      window.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      window.msCrypto.getRandomValues(arr);
	      return arr;
	    };
	  } else {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker
	  try {
	    var crypto = __webpack_require__(176);

	    Rand.prototype._rand = function _rand(n) {
	      return crypto.randomBytes(n);
	    };
	  } catch (e) {
	    // Emulate crypto API using randy
	    Rand.prototype._rand = function _rand(n) {
	      var res = new Uint8Array(n);
	      for (var i = 0; i < res.length; i++)
	        res[i] = this.rand.getByte();
	      return res;
	    };
	  }
	}


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	/**
	 * Module dependencies.
	 */

	__webpack_require__(162);
	var extend = __webpack_require__(136);
	var inherits = __webpack_require__(81).inherits;
	var EventEmitter = __webpack_require__(76).EventEmitter;

	/**
	 * Module exports.
	 */

	module.exports = Agent;

	/**
	 * Base `http.Agent` implementation.
	 * No pooling/keep-alive is implemented by default.
	 *
	 * @param {Function} callback
	 * @api public
	 */

	function Agent (callback) {
	  if (!(this instanceof Agent)) return new Agent(callback);
	  if ('function' != typeof callback) throw new Error('Must pass a "callback function"');
	  EventEmitter.call(this);
	  this.callback = callback;
	}
	inherits(Agent, EventEmitter);

	/**
	 * Called by node-core's "_http_client.js" module when creating
	 * a new HTTP request with this Agent instance.
	 *
	 * @api public
	 */

	Agent.prototype.addRequest = function (req, host, port, localAddress) {
	  var opts;
	  if ('object' == typeof host) {
	    // >= v0.11.x API
	    opts = extend({}, req._options, host);
	  } else {
	    // <= v0.10.x API
	    opts = extend({}, req._options, { host: host, port: port });
	    if (null != localAddress) {
	      opts.localAddress = localAddress;
	    }
	  }

	  if (opts.host && opts.path) {
	    // if both a `host` and `path` are specified then it's most likely the
	    // result of a `url.parse()` call... we need to remove the `path` portion so
	    // that `net.connect()` doesn't attempt to open that as a unix socket file.
	    delete opts.path;
	  }

	  // set default `port` if none was explicitly specified
	  if (null == opts.port) {
	    opts.port = opts.secureEndpoint ? 443 : 80;
	  }

	  delete opts.agent;
	  delete opts.hostname;
	  delete opts._defaultAgent;
	  delete opts.defaultPort;
	  delete opts.createConnection;

	  // hint to use "Connection: close"
	  // XXX: non-documented `http` module API :(
	  req._last = true;
	  req.shouldKeepAlive = false;

	  // clean up a bit of memory since we're no longer using this
	  req._options = null;

	  // create the `net.Socket` instance
	  var sync = true;
	  this.callback(req, opts, function (err, socket) {
	    function emitErr () {
	      req.emit('error', err);
	      // For Safety. Some additional errors might fire later on
	      // and we need to make sure we don't double-fire the error event.
	      req._hadError = true;
	    }
	    if (err) {
	      if (sync) {
	        // need to defer the "error" event, when sync, because by now the `req`
	        // instance hasn't event been passed back to the user yet...
	        process.nextTick(emitErr);
	      } else {
	        emitErr();
	      }
	    } else {
	      req.onSocket(socket);
	    }
	  });
	  sync = false;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129)))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(163);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(51);
	var BigNumber = __webpack_require__(183);
	var normalizeNodes = __webpack_require__(164).normalizeNodes;
	var dropsToXRP = __webpack_require__(164).dropsToXRP;

	function parseBalance(balance) {
	  return new BigNumber(balance.value || balance);
	}

	function computeBalanceChange(node) {
	  if (node.newFields.Balance) {
	    return parseBalance(node.newFields.Balance)
	  } else if(node.previousFields.Balance && node.finalFields.Balance) {
	    return parseBalance(node.finalFields.Balance).minus(
	      parseBalance(node.previousFields.Balance));
	  } else {
	    return new BigNumber(0);
	  }
	}

	function parseXRPBalanceChange(node) {
	  var balanceChange = computeBalanceChange(node);

	  if(balanceChange.isZero()) {
	    return null;
	  }

	  return {
	    address: node.finalFields.Account || node.newFields.Account,
	    balance_change: {
	      counterparty: '',
	      currency: 'XRP',
	      value: dropsToXRP(balanceChange).toString()
	    }
	  };
	}

	function flipBalanceChange(change) {
	  var negatedBalance = (new BigNumber(change.balance_change.value)).negated();
	  return {
	    address: change.balance_change.counterparty,
	    balance_change: {
	      counterparty: change.address,
	      currency: change.balance_change.currency,
	      value: negatedBalance.toString()
	    }
	  };
	}

	function parseTrustlineBalanceChanges(node) {
	  var balanceChange = computeBalanceChange(node);

	  if(balanceChange.isZero()) {
	    return null;
	  }

	  /*
	   * A trustline can be created with a non-zero starting balance
	   * If an offer is placed to acquire an asset with no existing trustline,
	   * the trustline can be created when the ofer is taken.
	   */
	  var fields = _.isEmpty(node.newFields) ? node.finalFields : node.newFields;

	  // the balance is always from low node's perspective
	  var change = {
	    address: fields.LowLimit.issuer,
	    balance_change: {
	      counterparty: fields.HighLimit.issuer,
	      currency: fields.Balance.currency,
	      value: balanceChange.toString()
	    }
	  };
	  return [change, flipBalanceChange(change)];
	}

	function groupByAddress(balanceChanges) {
	  var grouped = _.groupBy(balanceChanges, function(change) {
	    return change.address;
	  });
	  return _.mapValues(grouped, function(group) {
	    return _.map(group, function(change) {
	      return change.balance_change;
	    });
	  });
	}

	/**
	 * Computes the complete list of every balance that changed in the ledger
	 * as a result of the given transaction.
	 */
	function parseBalanceChanges(metadata) {
	  var balanceChanges = normalizeNodes(metadata).map(function(node) {
	    if (node.entryType === 'AccountRoot') {
	      return [parseXRPBalanceChange(node)];
	    } else if (node.entryType === 'RippleState') {
	      return parseTrustlineBalanceChanges(node);
	    } else {
	      return [ ];
	    }
	  });
	  return groupByAddress(_.compact(_.flatten(balanceChanges)));
	}


	module.exports.parseBalanceChanges = parseBalanceChanges;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(51);
	var utils = __webpack_require__(164);
	var BigNumber = __webpack_require__(183);

	var lsfSell = 0x00020000;   // see "lsfSell" flag in rippled source code

	function convertOrderChange(order) {
	  const takerGets = order.taker_gets;
	  const takerPays = order.taker_pays;
	  const direction = order.sell ? 'sell' : 'buy';
	  const quantity = (direction === 'buy') ? takerPays : takerGets;
	  const totalPrice = (direction === 'buy') ? takerGets : takerPays;
	  return {
	    direction: direction,
	    quantity: quantity,
	    totalPrice: totalPrice,
	    sequence: order.sequence,
	    status: order.status
	  };
	}

	function parseOrderChange(node) {

	  function parseOrderStatus(node) {
	    // Create an Offer
	    if (node.diffType === 'CreatedNode') {
	      return 'created';
	    }

	    // Partially consume an Offer
	    if (node.diffType === 'ModifiedNode') {
	      return 'open';
	    }

	    if (node.diffType === 'DeletedNode') {
	      // A consumed order has previous fields
	      if (node.previousFields.hasOwnProperty('TakerPays')) {
	        return 'closed';
	      }

	      // A canceled order has no previous fields
	      return 'canceled';
	    }
	  }

	  function parseChangeAmount(node, type) {
	    var changeAmount;
	    var status = parseOrderStatus(node);

	    if (status === 'canceled') {
	    // Canceled orders do not have PreviousFields and FinalFields have positive values
	      changeAmount = utils.parseCurrencyAmount(node.finalFields[type]);
	      changeAmount.value = '0';
	    } else if (status === 'created') {
	      changeAmount = utils.parseCurrencyAmount(node.newFields[type]);
	    } else {
	      var finalAmount;
	      changeAmount = finalAmount = utils.parseCurrencyAmount(node.finalFields[type]);

	      if (node.previousFields[type]) {
	        var previousAmount = utils.parseCurrencyAmount(node.previousFields[type]);
	        var finalValue = new BigNumber(finalAmount.value);
	        var prevValue = previousAmount ? new BigNumber(previousAmount.value) : 0;
	        changeAmount.value = finalValue.minus(prevValue).toString();
	      } else {
	        // There is no previousField -- change must be zero
	        changeAmount.value = '0';
	      }
	    }

	    return changeAmount;
	  }

	  var orderChange = convertOrderChange({
	    taker_pays: parseChangeAmount(node, 'TakerPays'),
	    taker_gets: parseChangeAmount(node, 'TakerGets'),
	    sell: (node.finalFields.Flags & lsfSell) !== 0,
	    sequence: node.finalFields.Sequence || node.newFields.Sequence,
	    status: parseOrderStatus(node)
	  });

	  Object.defineProperty(orderChange, 'account', {
	    value: node.finalFields.Account || node.newFields.Account,
	  });

	  return orderChange;
	}

	function groupByAddress(orderChanges) {
	  return _.groupBy(orderChanges, function(change) {
	    return change.account;
	  });
	}

	/**
	 * Computes the complete list of every Offer that changed in the ledger
	 * as a result of the given transaction.
	 * Returns changes grouped by Ripple account.
	 *
	 *  @param {Object} metadata - Transaction metadata as return by ripple-lib
	 *  @returns {Object} - Orderbook changes grouped by Ripple account
	 *
	 */
	exports.parseOrderbookChanges = function parseOrderbookChanges(metadata) {
	  var nodes = utils.normalizeNodes(metadata);

	  var orderChanges = _.map(_.filter(nodes, function(node) {
	    return node.entryType === 'Offer';
	  }), parseOrderChange);

	  return groupByAddress(orderChanges);
	}




/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*jslint node: true, browser: true, maxlen: 120 */
	/*global self */

	module.exports = (function () {

	    "use strict";

	    var globalObject, hasPromiseSupport;

	    function isFunction(x) {
	        return typeof x === "function";
	    }

	    // Seek the global object
	    if (global !== undefined) {
	        globalObject = global;
	    } else if (window !== undefined && window.document) {
	        globalObject = window;
	    } else {
	        globalObject = self;
	    }

	    // Test for any native promise implementation, and if that
	    // implementation appears to conform to the specificaton.
	    // This code mostly nicked from the es6-promise module polyfill
	    // and then fooled with.
	    hasPromiseSupport = (function () {

	        var P;

	        // No promise object at all, and it's a non-starter
	        if (!globalObject.hasOwnProperty("Promise")) {
	            return false;
	        }

	        // There is a Promise object. Does it conform to the spec?
	        P = globalObject.Promise;

	        // Some of these methods are missing from
	        // Firefox/Chrome experimental implementations
	        if (!P.hasOwnProperty("resolve") || !P.hasOwnProperty("reject")) {
	            return false;
	        }

	        if (!P.hasOwnProperty("all") || !P.hasOwnProperty("race")) {
	            return false;
	        }

	        // Older version of the spec had a resolver object
	        // as the arg rather than a function
	        return (function () {

	            var resolve, p;

	            p = new globalObject.Promise(function (r) {
	                resolve = r;
	            });

	            if (p) {
	                return isFunction(resolve);
	            }

	            return false;
	        }());
	    }());

	    // Export the native Promise implementation if it
	    // looks like it matches the spec
	    if (hasPromiseSupport) {
	        return globalObject.Promise;
	    }

	    //  Otherwise, return the es6-promise polyfill by @jaffathecake.
	    return __webpack_require__(184).Promise;

	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(166);
	__webpack_require__(167);
	__webpack_require__(168);
	__webpack_require__(169);
	module.exports = __webpack_require__(170).Promise;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(172);
	module.exports = __webpack_require__(170).Object.keys;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(171);
	module.exports = __webpack_require__(170).Symbol;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(165);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(167);
	__webpack_require__(173);
	module.exports = __webpack_require__(170).Array.from;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = __webpack_require__(85)['default'];

	var _classCallCheck = __webpack_require__(86)['default'];

	var hashjs = __webpack_require__(94);
	var BigNum = __webpack_require__(93);

	module.exports = (function () {
	  function Sha512() {
	    _classCallCheck(this, Sha512);

	    this.hash = hashjs.sha512();
	  }

	  _createClass(Sha512, [{
	    key: 'add',
	    value: function add(bytes) {
	      this.hash.update(bytes);
	      return this;
	    }
	  }, {
	    key: 'addU32',
	    value: function addU32(i) {
	      return this.add([i >>> 24 & 0xFF, i >>> 16 & 0xFF, i >>> 8 & 0xFF, i & 0xFF]);
	    }
	  }, {
	    key: 'finish',
	    value: function finish() {
	      return this.hash.digest();
	    }
	  }, {
	    key: 'first256',
	    value: function first256() {
	      return this.finish().slice(0, 32);
	    }
	  }, {
	    key: 'first256BN',
	    value: function first256BN() {
	      return new BigNum(this.first256());
	    }
	  }]);

	  return Sha512;
	})();

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$defineProperty = __webpack_require__(112)["default"];

	exports["default"] = (function () {
	  function defineProperties(target, descriptors, initializers) {
	    for (var i = 0; i < descriptors.length; i++) {
	      var descriptor = descriptors[i];
	      var decorators = descriptor.decorators;
	      var key = descriptor.key;
	      delete descriptor.key;
	      delete descriptor.decorators;
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor || descriptor.initializer) descriptor.writable = true;

	      if (decorators) {
	        for (var f = 0; f < decorators.length; f++) {
	          var decorator = decorators[f];

	          if (typeof decorator === "function") {
	            descriptor = decorator(target, key, descriptor) || descriptor;
	          } else {
	            throw new TypeError("The decorator for method " + descriptor.key + " is of the invalid type " + typeof decorator);
	          }
	        }

	        if (descriptor.initializer !== undefined) {
	          initializers[key] = descriptor;
	          continue;
	        }
	      }

	      _Object$defineProperty(target, key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps, protoInitializers, staticInitializers) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps, protoInitializers);
	    if (staticProps) defineProperties(Constructor, staticProps, staticInitializers);
	    return Constructor;
	  };
	})();

	exports.__esModule = true;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var codecFactory = __webpack_require__(174);

	var ALPHABETS = {
	  bitcoin: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
	  ripple: 'rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz',
	  tipple: 'RPShNAF39wBUDnEGHJKLM4pQrsT7VWXYZ2bcdeCg65jkm8ofqi1tuvaxyz',
	  stellar: 'gsphnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCr65jkm8oFqi1tuvAxyz'
	};

	function addMethods(codecMethods, api) {
	  function addVersion(name, opts) {
	    function add(operation) {
	      var encode = operation === 'encode';
	      var func = api[operation + name] = function (arg, arg2) {
	        var params = opts;
	        if (arg2 && encode) {
	          params = { version: opts.versions[opts.versionTypes.indexOf(arg2)] };
	        }
	        return api[operation](arg, params);
	      };
	      return func;
	    }
	    var decode = add('decode');
	    add('encode');
	    api['validate' + name] = function (arg) {
	      try {
	        decode(arg);
	      } catch (e) {
	        return false;
	      }
	      return true;
	    };
	  }
	  for (var k in codecMethods) {
	    addVersion(k, codecMethods[k]);
	  }
	  return api;
	}

	function buildCodecsMap(alphabets, Codec) {
	  var codecs = {};
	  for (var _name in ALPHABETS) {
	    codecs[_name] = new Codec(ALPHABETS[_name]);
	  }if (alphabets !== ALPHABETS) {
	    for (var _name2 in alphabets) {
	      codecs[_name2] = new Codec(alphabets[_name2]);
	    }
	  }
	  return codecs;
	}

	function apiFactory(options) {
	  var _options$alphabets = options.alphabets;
	  var alphabets = _options$alphabets === undefined ? ALPHABETS : _options$alphabets;
	  var _options$codecMethods = options.codecMethods;
	  var codecMethods = _options$codecMethods === undefined ? {} : _options$codecMethods;
	  var _options$defaultAlphabet = options.defaultAlphabet;
	  var defaultAlphabet = _options$defaultAlphabet === undefined ? Object.keys(alphabets)[0] : _options$defaultAlphabet;

	  var Codec = codecFactory(options);
	  var codecs = buildCodecsMap(alphabets, Codec);

	  return addMethods(codecMethods, {
	    Codec: Codec,
	    codecs: codecs,
	    decode: function decode(string) {
	      var opts = arguments[1] === undefined ? {} : arguments[1];
	      var _opts$alphabet = opts.alphabet;
	      var alphabet = _opts$alphabet === undefined ? defaultAlphabet : _opts$alphabet;

	      return codecs[alphabet].decode(string, opts);
	    },
	    encode: function encode(bytes) {
	      var opts = arguments[1] === undefined ? {} : arguments[1];
	      var _opts$alphabet2 = opts.alphabet;
	      var alphabet = _opts$alphabet2 === undefined ? defaultAlphabet : _opts$alphabet2;

	      return codecs[alphabet].encode(bytes, opts);
	    }
	  });
	}

	module.exports = apiFactory;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(165);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(165);
	__webpack_require__(172);
	module.exports = function getOwnPropertyDescriptor(it, key){
	  return $.getDesc(it, key);
	};

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(175);
	module.exports = __webpack_require__(170).Object.setPrototypeOf;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var elliptic = exports;

	elliptic.version = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;
	elliptic.utils = __webpack_require__(180);
	elliptic.rand = __webpack_require__(141);
	elliptic.hmacDRBG = __webpack_require__(181);
	elliptic.curve = __webpack_require__(211);
	elliptic.curves = __webpack_require__(182);

	// Protocols
	elliptic.ec = __webpack_require__(212);
	elliptic.eddsa = __webpack_require__(213);


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var url = __webpack_require__(80);
	var http = __webpack_require__(229);
	var https = __webpack_require__(230);
	var semver = __webpack_require__(233);
	var inherits = __webpack_require__(81).inherits;


	// we only need to patch the `http.request()` and
	// `http.ClientRequest` on older versions of Node.js
	if (semver.lt(process.version, '0.11.8')) {
	  // subclass the native ClientRequest to include the
	  // passed in `options` object.
	  http.ClientRequest = (function (_ClientRequest) {
	    function ClientRequest (options, cb) {
	      this._options = options;
	      _ClientRequest.call(this, options, cb);
	    }
	    inherits(ClientRequest, _ClientRequest);

	    return ClientRequest;
	  })(http.ClientRequest);


	  // need to re-define the `request()` method, since on node v0.8/v0.10
	  // the closure-local ClientRequest is used, rather than the monkey
	  // patched version we have created here.
	  http.request = (function (request) {
	    return function (options, cb) {
	      if (typeof options === 'string') {
	        options = url.parse(options);
	      }
	      if (options.protocol && options.protocol !== 'http:') {
	        throw new Error('Protocol:' + options.protocol + ' not supported.');
	      }
	      return new http.ClientRequest(options, cb);
	    };
	  })(http.request);
	}


	// this currently needs to be applied to all Node.js versions
	// (v0.8.x, v0.10.x, v0.12.x), in order to determine if the `req`
	// is an HTTP or HTTPS request. There is currently no PR attempting
	// to move this property upstream.
	https.request = (function (request) {
	  return function (options, cb) {
	    if (typeof options === 'string') {
	      options = url.parse(options);
	    }
	    if (null == options.port) options.port = 443;
	    options.secureEndpoint = true;
	    return request.call(https, options, cb);
	  };
	})(https.request);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(231);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var BigNumber = __webpack_require__(183);

	// drops is a bignumber.js BigNumber
	function dropsToXRP(drops) {
	  return drops.dividedBy(1000000);
	}

	function normalizeNode(affectedNode) {
	  var diffType = Object.keys(affectedNode)[0];
	  var node = affectedNode[diffType];
	  return {
	    diffType: diffType,
	    entryType: node.LedgerEntryType,
	    ledgerIndex: node.LedgerIndex,
	    newFields: node.NewFields || {},
	    finalFields: node.FinalFields || {},
	    previousFields: node.PreviousFields || {}
	  };
	}

	function normalizeNodes(metadata) {
	  if (!metadata.AffectedNodes) {
	    return [];
	  }
	  return metadata.AffectedNodes.map(normalizeNode);
	}

	function parseCurrencyAmount(currencyAmount) {
	  if (typeof currencyAmount === 'string') {
	    return {
	      currency: 'XRP',
	      value: dropsToXRP(new BigNumber(currencyAmount)).toString()
	    };
	  }

	  return {
	    currency: currencyAmount.currency,
	    counterparty: currencyAmount.issuer,
	    value: currencyAmount.value
	  };
	}

	module.exports.dropsToXRP = dropsToXRP;
	module.exports.normalizeNodes = normalizeNodes;
	module.exports.parseCurrencyAmount = parseCurrencyAmount;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {



/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var $at  = __webpack_require__(209)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(210)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(205);
	var Iterators = __webpack_require__(206);
	Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $          = __webpack_require__(165)
	  , LIBRARY    = __webpack_require__(185)
	  , global     = __webpack_require__(186)
	  , ctx        = __webpack_require__(187)
	  , classof    = __webpack_require__(188)
	  , $def       = __webpack_require__(189)
	  , isObject   = __webpack_require__(190)
	  , anObject   = __webpack_require__(191)
	  , aFunction  = __webpack_require__(192)
	  , strictNew  = __webpack_require__(193)
	  , forOf      = __webpack_require__(194)
	  , setProto   = __webpack_require__(195).set
	  , same       = __webpack_require__(196)
	  , species    = __webpack_require__(197)
	  , SPECIES    = __webpack_require__(198)('species')
	  , RECORD     = __webpack_require__(199)('record')
	  , PROMISE    = 'Promise'
	  , process    = global.process
	  , isNode     = classof(process) == 'process'
	  , asap       = process && process.nextTick || __webpack_require__(200).set
	  , P          = global[PROMISE]
	  , Wrapper;

	function testResolve(sub){
	  var test = new P(function(){});
	  if(sub)test.constructor = Object;
	  return P.resolve(test) === test;
	}

	var useNative = function(){
	  var works = false;
	  function P2(x){
	    var self = new P(x);
	    setProto(self, P2.prototype);
	    return self;
	  }
	  try {
	    works = P && P.resolve && testResolve();
	    setProto(P2, P);
	    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
	    // actual Firefox has broken subclass support, test that
	    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
	      works = false;
	    }
	    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
	    if(works && __webpack_require__(201)){
	      var thenableThenGotten = false;
	      P.resolve($.setDesc({}, 'then', {
	        get: function(){ thenableThenGotten = true; }
	      }));
	      works = thenableThenGotten;
	    }
	  } catch(e){ works = false; }
	  return works;
	}();

	// helpers
	function isPromise(it){
	  return isObject(it) && (useNative ? classof(it) == 'Promise' : RECORD in it);
	}
	function sameConstructor(a, b){
	  // library wrapper special case
	  if(LIBRARY && a === P && b === Wrapper)return true;
	  return same(a, b);
	}
	function getConstructor(C){
	  var S = anObject(C)[SPECIES];
	  return S != undefined ? S : C;
	}
	function isThenable(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	}
	function notify(record, isReject){
	  if(record.n)return;
	  record.n = true;
	  var chain = record.c;
	  // strange IE + webpack dev server bug - use .call(global)
	  asap.call(global, function(){
	    var value = record.v
	      , ok    = record.s == 1
	      , i     = 0;
	    function run(react){
	      var cb = ok ? react.ok : react.fail
	        , ret, then;
	      try {
	        if(cb){
	          if(!ok)record.h = true;
	          ret = cb === true ? value : cb(value);
	          if(ret === react.P){
	            react.rej(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(ret)){
	            then.call(ret, react.res, react.rej);
	          } else react.res(ret);
	        } else react.rej(value);
	      } catch(err){
	        react.rej(err);
	      }
	    }
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    chain.length = 0;
	    record.n = false;
	    if(isReject)setTimeout(function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      asap.call(global, function(){
	        if(isUnhandled(record.p)){
	          if(isNode){
	            process.emit('unhandledRejection', value, record.p);
	          } else if(global.console && console.error){
	            console.error('Unhandled promise rejection', value);
	          }
	        }
	        record.a = undefined;
	      });
	    }, 1);
	  });
	}
	function isUnhandled(promise){
	  var record = promise[RECORD]
	    , chain  = record.a || record.c
	    , i      = 0
	    , react;
	  if(record.h)return false;
	  while(chain.length > i){
	    react = chain[i++];
	    if(react.fail || !isUnhandled(react.P))return false;
	  } return true;
	}
	function $reject(value){
	  var record = this;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  record.v = value;
	  record.s = 2;
	  record.a = record.c.slice();
	  notify(record, true);
	}
	function $resolve(value){
	  var record = this
	    , then;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  try {
	    if(then = isThenable(value)){
	      // strange IE + webpack dev server bug - use .call(global)
	      asap.call(global, function(){
	        var wrapper = {r: record, d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      record.v = value;
	      record.s = 1;
	      notify(record, false);
	    }
	  } catch(e){
	    $reject.call({r: record, d: false}, e); // wrap
	  }
	}

	// constructor polyfill
	if(!useNative){
	  // 25.4.3.1 Promise(executor)
	  P = function Promise(executor){
	    aFunction(executor);
	    var record = {
	      p: strictNew(this, P, PROMISE),         // <- promise
	      c: [],                                  // <- awaiting reactions
	      a: undefined,                           // <- checked in isUnhandled reactions
	      s: 0,                                   // <- state
	      d: false,                               // <- done
	      v: undefined,                           // <- value
	      h: false,                               // <- handled rejection
	      n: false                                // <- notify
	    };
	    this[RECORD] = record;
	    try {
	      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
	    } catch(err){
	      $reject.call(record, err);
	    }
	  };
	  __webpack_require__(202)(P.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var S = anObject(anObject(this).constructor)[SPECIES];
	      var react = {
	        ok:   typeof onFulfilled == 'function' ? onFulfilled : true,
	        fail: typeof onRejected == 'function'  ? onRejected  : false
	      };
	      var promise = react.P = new (S != undefined ? S : P)(function(res, rej){
	        react.res = aFunction(res);
	        react.rej = aFunction(rej);
	      });
	      var record = this[RECORD];
	      record.c.push(react);
	      if(record.a)record.a.push(react);
	      if(record.s)notify(record, false);
	      return promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	}

	// export
	$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
	__webpack_require__(203)(P, PROMISE);
	species(P);
	species(Wrapper = __webpack_require__(170)[PROMISE]);

	// statics
	$def($def.S + $def.F * !useNative, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    return new this(function(res, rej){ rej(r); });
	  }
	});
	$def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    return isPromise(x) && sameConstructor(x.constructor, this)
	      ? x : new this(function(res){ res(x); });
	  }
	});
	$def($def.S + $def.F * !(useNative && __webpack_require__(204)(function(iter){
	  P.all(iter)['catch'](function(){});
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C      = getConstructor(this)
	      , values = [];
	    return new C(function(res, rej){
	      forOf(iterable, false, values.push, values);
	      var remaining = values.length
	        , results   = Array(remaining);
	      if(remaining)$.each.call(values, function(promise, index){
	        C.resolve(promise).then(function(value){
	          results[index] = value;
	          --remaining || res(results);
	        }, rej);
	      });
	      else res(results);
	    });
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C = getConstructor(this);
	    return new C(function(res, rej){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(res, rej);
	      });
	    });
	  }
	});

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var core = module.exports = {};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var $              = __webpack_require__(165)
	  , global         = __webpack_require__(186)
	  , has            = __webpack_require__(214)
	  , SUPPORT_DESC   = __webpack_require__(201)
	  , $def           = __webpack_require__(189)
	  , $redef         = __webpack_require__(215)
	  , shared         = __webpack_require__(216)
	  , setTag         = __webpack_require__(203)
	  , uid            = __webpack_require__(199)
	  , wks            = __webpack_require__(198)
	  , keyOf          = __webpack_require__(217)
	  , $names         = __webpack_require__(208)
	  , enumKeys       = __webpack_require__(218)
	  , anObject       = __webpack_require__(191)
	  , toObject       = __webpack_require__(207)
	  , createDesc     = __webpack_require__(219)
	  , getDesc        = $.getDesc
	  , setDesc        = $.setDesc
	  , $create        = $.create
	  , getNames       = $names.get
	  , $Symbol        = global.Symbol
	  , setter         = false
	  , HIDDEN         = wks('_hidden')
	  , isEnum         = $.isEnum
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , useNative      = typeof $Symbol == 'function'
	  , ObjectProto    = Object.prototype;

	var setSymbolDesc = SUPPORT_DESC ? function(){ // fallback for old Android
	  try {
	    return $create(setDesc({}, HIDDEN, {
	      get: function(){
	        return setDesc(this, HIDDEN, {value: false})[HIDDEN];
	      }
	    }))[HIDDEN] || setDesc;
	  } catch(e){
	    return function(it, key, D){
	      var protoDesc = getDesc(ObjectProto, key);
	      if(protoDesc)delete ObjectProto[key];
	      setDesc(it, key, D);
	      if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
	    };
	  }
	}() : setDesc;

	function wrap(tag){
	  var sym = AllSymbols[tag] = $create($Symbol.prototype);
	  sym._k = tag;
	  SUPPORT_DESC && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    }
	  });
	  return sym;
	}

	function defineProperty(it, key, D){
	  if(D && has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = $create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return setDesc(it, key, D);
	}
	function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)defineProperty(it, key = keys[i++], P[key]);
	  return it;
	}
	function create(it, P){
	  return P === undefined ? $create(it) : defineProperties($create(it), P);
	}
	function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key);
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
	    ? E : true;
	}
	function getOwnPropertyDescriptor(it, key){
	  var D = getDesc(it = toObject(it), key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	}
	function getOwnPropertyNames(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
	  return result;
	}
	function getOwnPropertySymbols(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	}

	// 19.4.1.1 Symbol([description])
	if(!useNative){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments[0]));
	  };
	  $redef($Symbol.prototype, 'toString', function(){
	    return this._k;
	  });

	  $.create     = create;
	  $.isEnum     = propertyIsEnumerable;
	  $.getDesc    = getOwnPropertyDescriptor;
	  $.setDesc    = defineProperty;
	  $.setDescs   = defineProperties;
	  $.getNames   = $names.get = getOwnPropertyNames;
	  $.getSymbols = getOwnPropertySymbols;

	  if(SUPPORT_DESC && !__webpack_require__(185)){
	    $redef(ObjectProto, 'propertyIsEnumerable', propertyIsEnumerable, true);
	  }
	}

	var symbolStatics = {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	};
	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	$.each.call((
	    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
	    'species,split,toPrimitive,toStringTag,unscopables'
	  ).split(','), function(it){
	    var sym = wks(it);
	    symbolStatics[it] = useNative ? sym : wrap(sym);
	  }
	);

	setter = true;

	$def($def.G + $def.W, {Symbol: $Symbol});

	$def($def.S, 'Symbol', symbolStatics);

	$def($def.S + $def.F * !useNative, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: getOwnPropertySymbols
	});

	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setTag(global.JSON, 'JSON', true);

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(165)
	  , core     = __webpack_require__(170)
	  , $def     = __webpack_require__(189)
	  , toObject = __webpack_require__(207)
	  , isObject = __webpack_require__(190);
	$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' +
	  'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(',')
	, function(KEY, ID){
	  var fn     = (core.Object || {})[KEY] || Object[KEY]
	    , forced = 0
	    , method = {};
	  method[KEY] = ID == 0 ? function freeze(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 1 ? function seal(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 2 ? function preventExtensions(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 3 ? function isFrozen(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 4 ? function isSealed(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 5 ? function isExtensible(it){
	    return isObject(it) ? fn(it) : false;
	  } : ID == 6 ? function getOwnPropertyDescriptor(it, key){
	    return fn(toObject(it), key);
	  } : ID == 7 ? function getPrototypeOf(it){
	    return fn(toObject(it, true));
	  } : ID == 8 ? function keys(it){
	    return fn(toObject(it));
	  } : __webpack_require__(208).get;
	  try {
	    fn('z');
	  } catch(e){
	    forced = 1;
	  }
	  $def($def.S + $def.F * forced, 'Object', method);
	});

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(187)
	  , $def        = __webpack_require__(189)
	  , toObject    = __webpack_require__(207)
	  , call        = __webpack_require__(221)
	  , isArrayIter = __webpack_require__(222)
	  , toLength    = __webpack_require__(223)
	  , getIterFn   = __webpack_require__(224);
	$def($def.S + $def.F * !__webpack_require__(204)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike, true)
	      , C       = typeof this == 'function' ? this : Array
	      , mapfn   = arguments[1]
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, arguments[2], 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
	      }
	    } else {
	      for(result = new C(length = toLength(O.length)); length > index; index++){
	        result[index] = mapping ? mapfn(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var baseCodec = __webpack_require__(234);

	var _require = __webpack_require__(220);

	var seqEqual = _require.seqEqual;
	var concatArgs = _require.concatArgs;
	var isSet = _require.isSet;

	/* --------------------------------- ENCODER -------------------------------- */

	function codecFactory(injected) {

	  /*eslint-disable indent*/
	  var sha256 = injected.sha256;

	  var AddressCodec = (function () {
	    /*eslint-enable indent*/

	    function AddressCodec(alphabet) {
	      _classCallCheck(this, AddressCodec);

	      this.alphabet = alphabet;
	      this.codec = baseCodec(alphabet);
	      this.base = alphabet.length;
	    }

	    _createClass(AddressCodec, [{
	      key: 'encode',
	      value: function encode(bytes) {
	        var opts = arguments[1] === undefined ? {} : arguments[1];
	        var version = opts.version;

	        return isSet(version) ? this.encodeVersioned(bytes, version) : opts.checked ? this.encodeChecked(bytes) : this.encodeRaw(bytes);
	      }
	    }, {
	      key: 'decode',
	      value: function decode(string) {
	        var opts = arguments[1] === undefined ? {} : arguments[1];
	        var version = opts.version;
	        var versions = opts.versions;

	        return isSet(versions) ? this.decodeMultiVersioned(string, versions, opts.expectedLength, opts.versionTypes) : isSet(version) ? this.decodeVersioned(string, version) : opts.checked ? this.decodeChecked(string) : this.decodeRaw(string);
	      }
	    }, {
	      key: 'encodeRaw',
	      value: function encodeRaw(bytes) {
	        return this.codec.encode(bytes);
	      }
	    }, {
	      key: 'decodeRaw',
	      value: function decodeRaw(string) {
	        return this.codec.decode(string);
	      }
	    }, {
	      key: 'encodeChecked',
	      value: function encodeChecked(buffer) {
	        var check = sha256(sha256(buffer)).slice(0, 4);
	        return this.encodeRaw(concatArgs(buffer, check));
	      }
	    }, {
	      key: 'decodeChecked',
	      value: function decodeChecked(encoded) {
	        var buf = this.decodeRaw(encoded);
	        if (buf.length < 5) {
	          throw new Error('invalid_input_size');
	        }
	        if (!this.verifyCheckSum(buf)) {
	          throw new Error('checksum_invalid');
	        }
	        return buf.slice(0, -4);
	      }
	    }, {
	      key: 'encodeVersioned',
	      value: function encodeVersioned(bytes, version) {
	        return this.encodeChecked(concatArgs(version, bytes));
	      }
	    }, {
	      key: 'decodeVersioned',
	      value: function decodeVersioned(string, version) {
	        return this.decodeMultiVersioned(string, [version]).bytes;
	      }
	    }, {
	      key: 'decodeMultiVersioned',

	      /**
	      * @param {String} encoded - base58 checksum encoded data string
	      * @param {Array} possibleVersions - array of possible versions.
	      *                                   Each element could be a single byte or an
	      *                                   array of bytes.
	      * @param {Number} expectedLength - of decoded bytes minus checksum
	      *
	      * @param {Array} [types] - parrallel array of names matching possibleVersions
	      *
	      * @return {Object} -
	      */
	      value: function decodeMultiVersioned(encoded, possibleVersions, expectedLength, types) {
	        var withoutSum = this.decodeChecked(encoded);
	        var ret = { version: null, bytes: null };

	        if (possibleVersions.length > 1 && !expectedLength) {
	          throw new Error('must pass expectedLengthgth > 1 possibleVersions');
	        }

	        var versionLenGuess = possibleVersions[0].length || 1; // Number.length
	        var payloadLength = expectedLength || withoutSum.length - versionLenGuess;
	        var versionBytes = withoutSum.slice(0, -payloadLength);
	        var payload = withoutSum.slice(-payloadLength);

	        var foundVersion = possibleVersions.some(function (version, i) {
	          var asArray = Array.isArray(version) ? version : [version];
	          if (seqEqual(versionBytes, asArray)) {
	            ret.version = version;
	            ret.bytes = payload;
	            if (types) {
	              ret.type = types[i];
	            }
	            return true;
	          }
	        });

	        if (!foundVersion) {
	          throw new Error('version_invalid');
	        }
	        return ret;
	      }
	    }, {
	      key: 'verifyCheckSum',
	      value: function verifyCheckSum(bytes) {
	        var computed = sha256(sha256(bytes.slice(0, -4))).slice(0, 4);
	        var checksum = bytes.slice(-4);
	        return seqEqual(computed, checksum);
	      }
	    }, {
	      key: 'findPrefix',

	      /**
	      * @param {String} desiredPrefix - desired prefix when base58 encoded with
	      *                                 checksum
	      * @param {Number} payloadLength - number of bytes encoded not incl checksum
	      * @return {Array} version
	      */
	      value: function findPrefix(desiredPrefix, payloadLength) {
	        if (this.base !== 58) {
	          throw new Error('Only works for base58');
	        }
	        var totalLength = payloadLength + 4; // for checksum
	        var chars = Math.log(Math.pow(256, totalLength)) / Math.log(this.base);
	        // (x, x.8] -> x+1, (x.8, x+1) -> x+2
	        var requiredChars = Math.ceil(chars + 0.2);
	        var padding = this.alphabet[Math.floor(this.alphabet.length / 2) - 1];
	        var template = desiredPrefix + new Array(requiredChars + 1).join(padding);
	        var bytes = this.decodeRaw(template);
	        var version = bytes.slice(0, -totalLength);
	        return version;
	      }
	    }]);

	    return AddressCodec;
	  })();

	  /*eslint-disable indent*/
	  return AddressCodec;
	  /*eslint-enable indent*/
	}
	/* ------------------------------- END ENCODER ------------------------------ */

	module.exports = codecFactory;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $def = __webpack_require__(189);
	$def($def.S, 'Object', {setPrototypeOf: __webpack_require__(195).set});

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(225)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(226)

	exports.createHmac = __webpack_require__(227)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(228)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	"use strict"
	function isProperty(str) {
	  return /^[$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc][$A-Z\_a-z\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f]*$/.test(str)
	}
	module.exports = isProperty

/***/ },
/* 179 */,
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = exports;
	var bn = __webpack_require__(93);

	utils.assert = function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	};

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (!enc) {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  } else if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};

	// Represent num in a w-NAF form
	function getNAF(num, w) {
	  var naf = [];
	  var ws = 1 << (w + 1);
	  var k = num.clone();
	  while (k.cmpn(1) >= 0) {
	    var z;
	    if (k.isOdd()) {
	      var mod = k.andln(ws - 1);
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }
	    naf.push(z);

	    // Optimization, shift by word if possible
	    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
	    for (var i = 1; i < shift; i++)
	      naf.push(0);
	    k.iushrn(shift);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    []
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      var m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      var m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function lazyComputed(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function lazyComputed() {
	    return this[key] !== undefined ? this[key] :
	           this[key] = computer.apply(this, arguments);
	  };
	}
	utils.lazyComputed = lazyComputed;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	                                     bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new bn(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;



/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hash = __webpack_require__(94);
	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;
	var assert = utils.assert;

	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this.reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils.toArray(options.entropy, options.entropyEnc);
	  var nonce = utils.toArray(options.nonce, options.nonceEnc);
	  var pers = utils.toArray(options.pers, options.persEnc);
	  assert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	module.exports = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this.reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils.toBuffer(entropy, entropyEnc);
	  add = utils.toBuffer(add, addEnc);

	  assert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this.reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this.reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils.toArray(add, addEnc);
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this.reseed++;
	  return utils.encode(res, enc);
	};


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curves = exports;

	var hash = __webpack_require__(94);
	var elliptic = __webpack_require__(160);

	var assert = elliptic.utils.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new elliptic.curve.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new elliptic.curve.edwards(options);
	  else
	    this.curve = new elliptic.curve.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve
	      });
	      return curve;
	    }
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
	  ]
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
	  ]
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
	  ]
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '0',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '9'
	  ]
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658'
	  ]
	});

	var pre;
	try {
	  pre = __webpack_require__(236);
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3'
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15'
	    }
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre
	  ]
	});


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! bignumber.js v1.4.1 https://github.com/MikeMcl/bignumber.js/LICENCE */

	;(function ( global ) {
	    'use strict';

	    /*
	      bignumber.js v1.4.1
	      A JavaScript library for arbitrary-precision arithmetic.
	      https://github.com/MikeMcl/bignumber.js
	      Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>
	      MIT Expat Licence
	    */

	    /*********************************** DEFAULTS ************************************/

	    /*
	     * The default values below must be integers within the stated ranges (inclusive).
	     * Most of these values can be changed during run-time using BigNumber.config().
	     */

	    /*
	     * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP,
	     * MAX_EXP, and the argument to toFixed, toPrecision and toExponential, beyond
	     * which an exception is thrown (if ERRORS is true).
	     */
	    var MAX = 1E9,                                   // 0 to 1e+9

	        // Limit of magnitude of exponent argument to toPower.
	        MAX_POWER = 1E6,                             // 1 to 1e+6

	        // The maximum number of decimal places for operations involving division.
	        DECIMAL_PLACES = 20,                         // 0 to MAX

	        /*
	         * The rounding mode used when rounding to the above decimal places, and when
	         * using toFixed, toPrecision and toExponential, and round (default value).
	         * UP         0 Away from zero.
	         * DOWN       1 Towards zero.
	         * CEIL       2 Towards +Infinity.
	         * FLOOR      3 Towards -Infinity.
	         * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	         * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	         * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	         * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	         * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	         */
	        ROUNDING_MODE = 4,                           // 0 to 8

	        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	        // The exponent value at and beneath which toString returns exponential notation.
	        // Number type: -7
	        TO_EXP_NEG = -7,                             // 0 to -MAX

	        // The exponent value at and above which toString returns exponential notation.
	        // Number type: 21
	        TO_EXP_POS = 21,                             // 0 to MAX

	        // RANGE : [MIN_EXP, MAX_EXP]

	        // The minimum exponent value, beneath which underflow to zero occurs.
	        // Number type: -324  (5e-324)
	        MIN_EXP = -MAX,                              // -1 to -MAX

	        // The maximum exponent value, above which overflow to Infinity occurs.
	        // Number type:  308  (1.7976931348623157e+308)
	        MAX_EXP = MAX,                               // 1 to MAX

	        // Whether BigNumber Errors are ever thrown.
	        // CHANGE parseInt to parseFloat if changing ERRORS to false.
	        ERRORS = true,                               // true or false
	        parse = parseInt,                            // parseInt or parseFloat

	    /***********************************************************************************/

	        P = BigNumber.prototype,
	        DIGITS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
	        outOfRange,
	        id = 0,
	        isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	        trim = String.prototype.trim || function () {return this.replace(/^\s+|\s+$/g, '')},
	        ONE = BigNumber(1);


	    // CONSTRUCTOR


	    /*
	     * The exported function.
	     * Create and return a new instance of a BigNumber object.
	     *
	     * n {number|string|BigNumber} A numeric value.
	     * [b] {number} The base of n. Integer, 2 to 64 inclusive.
	     */
	    function BigNumber( n, b ) {
	        var e, i, isNum, digits, valid, orig,
	            x = this;

	        // Enable constructor usage without new.
	        if ( !(x instanceof BigNumber) ) {
	            return new BigNumber( n, b )
	        }

	        // Duplicate.
	        if ( n instanceof BigNumber ) {
	            id = 0;

	            // e is undefined.
	            if ( b !== e ) {
	                n += ''
	            } else {
	                x['s'] = n['s'];
	                x['e'] = n['e'];
	                x['c'] = ( n = n['c'] ) ? n.slice() : n;
	                return;
	            }
	        }

	        // If number, check if minus zero.
	        if ( typeof n != 'string' ) {
	            n = ( isNum = typeof n == 'number' ||
	                Object.prototype.toString.call(n) == '[object Number]' ) &&
	                    n === 0 && 1 / n < 0 ? '-0' : n + '';
	        }

	        orig = n;

	        if ( b === e && isValid.test(n) ) {

	            // Determine sign.
	            x['s'] = n.charAt(0) == '-' ? ( n = n.slice(1), -1 ) : 1;

	        // Either n is not a valid BigNumber or a base has been specified.
	        } else {

	            // Enable exponential notation to be used with base 10 argument.
	            // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
	            if ( b == 10 ) {

	                return setMode( n, DECIMAL_PLACES, ROUNDING_MODE );
	            }

	            n = trim.call(n).replace( /^\+(?!-)/, '' );

	            x['s'] = n.charAt(0) == '-' ? ( n = n.replace( /^-(?!-)/, '' ), -1 ) : 1;

	            if ( b != null ) {

	                if ( ( b == (b | 0) || !ERRORS ) &&
	                  !( outOfRange = !( b >= 2 && b < 65 ) ) ) {

	                    digits = '[' + DIGITS.slice( 0, b = b | 0 ) + ']+';

	                    // Before non-decimal number validity test and base conversion
	                    // remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.
	                    n = n.replace( /\.$/, '' ).replace( /^\./, '0.' );

	                    // Any number in exponential form will fail due to the e+/-.
	                    if ( valid = new RegExp(
	                      '^' + digits + '(?:\\.' + digits + ')?$', b < 37 ? 'i' : '' ).test(n) ) {

	                        if ( isNum ) {

	                            if ( n.replace( /^0\.0*|\./, '' ).length > 15 ) {

	                                // 'new BigNumber() number type has more than 15 significant digits: {n}'
	                                ifExceptionsThrow( orig, 0 );
	                            }

	                            // Prevent later check for length on converted number.
	                            isNum = !isNum;
	                        }
	                        n = convert( n, 10, b, x['s'] );

	                    } else if ( n != 'Infinity' && n != 'NaN' ) {

	                        // 'new BigNumber() not a base {b} number: {n}'
	                        ifExceptionsThrow( orig, 1, b );
	                        n = 'NaN';
	                    }
	                } else {

	                    // 'new BigNumber() base not an integer: {b}'
	                    // 'new BigNumber() base out of range: {b}'
	                    ifExceptionsThrow( b, 2 );

	                    // Ignore base.
	                    valid = isValid.test(n);
	                }
	            } else {
	                valid = isValid.test(n);
	            }

	            if ( !valid ) {

	                // Infinity/NaN
	                x['c'] = x['e'] = null;

	                // NaN
	                if ( n != 'Infinity' ) {

	                    // No exception on NaN.
	                    if ( n != 'NaN' ) {

	                        // 'new BigNumber() not a number: {n}'
	                        ifExceptionsThrow( orig, 3 );
	                    }
	                    x['s'] = null;
	                }
	                id = 0;

	                return;
	            }
	        }

	        // Decimal point?
	        if ( ( e = n.indexOf('.') ) > -1 ) {
	            n = n.replace( '.', '' );
	        }

	        // Exponential form?
	        if ( ( i = n.search( /e/i ) ) > 0 ) {

	            // Determine exponent.
	            if ( e < 0 ) {
	                e = i;
	            }
	            e += +n.slice( i + 1 );
	            n = n.substring( 0, i );

	        } else if ( e < 0 ) {

	            // Integer.
	            e = n.length;
	        }

	        // Determine leading zeros.
	        for ( i = 0; n.charAt(i) == '0'; i++ ) {
	        }

	        b = n.length;

	        // Disallow numbers with over 15 significant digits if number type.
	        if ( isNum && b > 15 && n.slice(i).length > 15 ) {

	            // 'new BigNumber() number type has more than 15 significant digits: {n}'
	            ifExceptionsThrow( orig, 0 );
	        }
	        id = 0;

	        // Overflow?
	        if ( ( e -= i + 1 ) > MAX_EXP ) {

	            // Infinity.
	            x['c'] = x['e'] = null;

	        // Zero or underflow?
	        } else if ( i == b || e < MIN_EXP ) {

	            // Zero.
	            x['c'] = [ x['e'] = 0 ];
	        } else {

	            // Determine trailing zeros.
	            for ( ; n.charAt(--b) == '0'; ) {
	            }

	            x['e'] = e;
	            x['c'] = [];

	            // Convert string to array of digits (without leading and trailing zeros).
	            for ( e = 0; i <= b; x['c'][e++] = +n.charAt(i++) ) {
	            }
	        }
	    }


	    // CONSTRUCTOR PROPERTIES/METHODS


	    BigNumber['ROUND_UP'] = 0;
	    BigNumber['ROUND_DOWN'] = 1;
	    BigNumber['ROUND_CEIL'] = 2;
	    BigNumber['ROUND_FLOOR'] = 3;
	    BigNumber['ROUND_HALF_UP'] = 4;
	    BigNumber['ROUND_HALF_DOWN'] = 5;
	    BigNumber['ROUND_HALF_EVEN'] = 6;
	    BigNumber['ROUND_HALF_CEIL'] = 7;
	    BigNumber['ROUND_HALF_FLOOR'] = 8;


	    /*
	     * Configure infrequently-changing library-wide settings.
	     *
	     * Accept an object or an argument list, with one or many of the following
	     * properties or parameters respectively:
	     * [ DECIMAL_PLACES [, ROUNDING_MODE [, EXPONENTIAL_AT [, RANGE [, ERRORS ]]]]]
	     *
	     * E.g.
	     * BigNumber.config(20, 4) is equivalent to
	     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	     * Ignore properties/parameters set to null or undefined.
	     *
	     * Return an object with the properties current values.
	     */
	    BigNumber['config'] = function () {
	        var v, p,
	            i = 0,
	            r = {},
	            a = arguments,
	            o = a[0],
	            c = 'config',
	            inRange = function ( n, lo, hi ) {
	              return !( ( outOfRange = n < lo || n > hi ) ||
	                parse(n) != n && n !== 0 );
	            },
	            has = o && typeof o == 'object'
	              ? function () {if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null}
	              : function () {if ( a.length > i ) return ( v = a[i++] ) != null};

	        // [DECIMAL_PLACES] {number} Integer, 0 to MAX inclusive.
	        if ( has( p = 'DECIMAL_PLACES' ) ) {

	            if ( inRange( v, 0, MAX ) ) {
	                DECIMAL_PLACES = v | 0;
	            } else {

	                // 'config() DECIMAL_PLACES not an integer: {v}'
	                // 'config() DECIMAL_PLACES out of range: {v}'
	                ifExceptionsThrow( v, p, c );
	            }
	        }
	        r[p] = DECIMAL_PLACES;

	        // [ROUNDING_MODE] {number} Integer, 0 to 8 inclusive.
	        if ( has( p = 'ROUNDING_MODE' ) ) {

	            if ( inRange( v, 0, 8 ) ) {
	                ROUNDING_MODE = v | 0;
	            } else {

	                // 'config() ROUNDING_MODE not an integer: {v}'
	                // 'config() ROUNDING_MODE out of range: {v}'
	                ifExceptionsThrow( v, p, c );
	            }
	        }
	        r[p] = ROUNDING_MODE;

	        /*
	         * [EXPONENTIAL_AT] {number|number[]} Integer, -MAX to MAX inclusive or
	         * [ integer -MAX to 0 inclusive, 0 to MAX inclusive ].
	         */
	        if ( has( p = 'EXPONENTIAL_AT' ) ) {

	            if ( inRange( v, -MAX, MAX ) ) {
	                TO_EXP_NEG = -( TO_EXP_POS = ~~( v < 0 ? -v : +v ) );
	            } else if ( !outOfRange && v && inRange( v[0], -MAX, 0 ) &&
	              inRange( v[1], 0, MAX ) ) {
	                TO_EXP_NEG = ~~v[0];
	                TO_EXP_POS = ~~v[1];
	            } else {

	                // 'config() EXPONENTIAL_AT not an integer or not [integer, integer]: {v}'
	                // 'config() EXPONENTIAL_AT out of range or not [negative, positive: {v}'
	                ifExceptionsThrow( v, p, c, 1 );
	            }
	        }
	        r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

	        /*
	         * [RANGE][ {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	         * [ integer -MAX to -1 inclusive, integer 1 to MAX inclusive ].
	         */
	        if ( has( p = 'RANGE' ) ) {

	            if ( inRange( v, -MAX, MAX ) && ~~v ) {
	                MIN_EXP = -( MAX_EXP = ~~( v < 0 ? -v : +v ) );
	            } else if ( !outOfRange && v && inRange( v[0], -MAX, -1 ) &&
	              inRange( v[1], 1, MAX ) ) {
	                MIN_EXP = ~~v[0], MAX_EXP = ~~v[1];
	            } else {

	                // 'config() RANGE not a non-zero integer or not [integer, integer]: {v}'
	                // 'config() RANGE out of range or not [negative, positive: {v}'
	                ifExceptionsThrow( v, p, c, 1, 1 );
	            }
	        }
	        r[p] = [ MIN_EXP, MAX_EXP ];

	        // [ERRORS] {boolean|number} true, false, 1 or 0.
	        if ( has( p = 'ERRORS' ) ) {

	            if ( v === !!v || v === 1 || v === 0 ) {
	                parse = ( outOfRange = id = 0, ERRORS = !!v )
	                  ? parseInt
	                  : parseFloat;
	            } else {

	                // 'config() ERRORS not a boolean or binary digit: {v}'
	                ifExceptionsThrow( v, p, c, 0, 0, 1 );
	            }
	        }
	        r[p] = ERRORS;

	        return r;
	    };


	    // PRIVATE FUNCTIONS


	    // Assemble error messages. Throw BigNumber Errors.
	    function ifExceptionsThrow( arg, i, j, isArray, isRange, isErrors) {

	        if ( ERRORS ) {
	            var error,
	                method = ['new BigNumber', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt',
	                     'lte', 'minus', 'mod', 'plus', 'times', 'toFr'
	                    ][ id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0 ] + '()',
	                message = outOfRange ? ' out of range' : ' not a' +
	                  ( isRange ? ' non-zero' : 'n' ) + ' integer';

	            message = ( [
	                method + ' number type has more than 15 significant digits',
	                method + ' not a base ' + j + ' number',
	                method + ' base' + message,
	                method + ' not a number' ][i] ||
	                  j + '() ' + i + ( isErrors
	                    ? ' not a boolean or binary digit'
	                    : message + ( isArray
	                      ? ' or not [' + ( outOfRange
	                        ? ' negative, positive'
	                        : ' integer, integer' ) + ' ]'
	                      : '' ) ) ) + ': ' + arg;

	            outOfRange = id = 0;
	            error = new Error(message);
	            error['name'] = 'BigNumber Error';

	            throw error;
	        }
	    }


	    /*
	     * Convert a numeric string of baseIn to a numeric string of baseOut.
	     */
	    function convert( nStr, baseOut, baseIn, sign ) {
	        var e, dvs, dvd, nArr, fracArr, fracBN;

	        // Convert string of base bIn to an array of numbers of baseOut.
	        // Eg. strToArr('255', 10) where baseOut is 16, returns [15, 15].
	        // Eg. strToArr('ff', 16)  where baseOut is 10, returns [2, 5, 5].
	        function strToArr( str, bIn ) {
	            var j,
	                i = 0,
	                strL = str.length,
	                arrL,
	                arr = [0];

	            for ( bIn = bIn || baseIn; i < strL; i++ ) {

	                for ( arrL = arr.length, j = 0; j < arrL; arr[j] *= bIn, j++ ) {
	                }

	                for ( arr[0] += DIGITS.indexOf( str.charAt(i) ), j = 0;
	                      j < arr.length;
	                      j++ ) {

	                    if ( arr[j] > baseOut - 1 ) {

	                        if ( arr[j + 1] == null ) {
	                            arr[j + 1] = 0;
	                        }
	                        arr[j + 1] += arr[j] / baseOut ^ 0;
	                        arr[j] %= baseOut;
	                    }
	                }
	            }

	            return arr.reverse();
	        }

	        // Convert array to string.
	        // E.g. arrToStr( [9, 10, 11] ) becomes '9ab' (in bases above 11).
	        function arrToStr( arr ) {
	            var i = 0,
	                arrL = arr.length,
	                str = '';

	            for ( ; i < arrL; str += DIGITS.charAt( arr[i++] ) ) {
	            }

	            return str;
	        }

	        if ( baseIn < 37 ) {
	            nStr = nStr.toLowerCase();
	        }

	        /*
	         * If non-integer convert integer part and fraction part separately.
	         * Convert the fraction part as if it is an integer than use division to
	         * reduce it down again to a value less than one.
	         */
	        if ( ( e = nStr.indexOf( '.' ) ) > -1 ) {

	            /*
	             * Calculate the power to which to raise the base to get the number
	             * to divide the fraction part by after it has been converted as an
	             * integer to the required base.
	             */
	            e = nStr.length - e - 1;

	            // Use toFixed to avoid possible exponential notation.
	            dvs = strToArr( new BigNumber(baseIn)['pow'](e)['toF'](), 10 );

	            nArr = nStr.split('.');

	            // Convert the base of the fraction part (as integer).
	            dvd = strToArr( nArr[1] );

	            // Convert the base of the integer part.
	            nArr = strToArr( nArr[0] );

	            // Result will be a BigNumber with a value less than 1.
	            fracBN = divide( dvd, dvs, dvd.length - dvs.length, sign, baseOut,
	              // Is least significant digit of integer part an odd number?
	              nArr[nArr.length - 1] & 1 );

	            fracArr = fracBN['c'];

	            // e can be <= 0  ( if e == 0, fracArr is [0] or [1] ).
	            if ( e = fracBN['e'] ) {

	                // Append zeros according to the exponent of the result.
	                for ( ; ++e; fracArr.unshift(0) ) {
	                }

	                // Append the fraction part to the converted integer part.
	                nStr = arrToStr(nArr) + '.' + arrToStr(fracArr);

	            // fracArr is [1].
	            // Fraction digits rounded up, so increment last digit of integer part.
	            } else if ( fracArr[0] ) {

	                if ( nArr[ e = nArr.length - 1 ] < baseOut - 1 ) {
	                    ++nArr[e];
	                    nStr = arrToStr(nArr);
	                } else {
	                    nStr = new BigNumber( arrToStr(nArr),
	                      baseOut )['plus'](ONE)['toS'](baseOut);
	                }

	            // fracArr is [0]. No fraction digits.
	            } else {
	                nStr = arrToStr(nArr);
	            }
	        } else {

	            // Simple integer. Convert base.
	            nStr = arrToStr( strToArr(nStr) );
	        }

	        return nStr;
	    }


	    // Perform division in the specified base. Called by div and convert.
	    function divide( dvd, dvs, exp, s, base, isOdd ) {
	        var dvsL, dvsT, next, cmp, remI,
	            dvsZ = dvs.slice(),
	            dvdI = dvsL = dvs.length,
	            dvdL = dvd.length,
	            rem = dvd.slice( 0, dvsL ),
	            remL = rem.length,
	            quo = new BigNumber(ONE),
	            qc = quo['c'] = [],
	            qi = 0,
	            dig = DECIMAL_PLACES + ( quo['e'] = exp ) + 1;

	        quo['s'] = s;
	        s = dig < 0 ? 0 : dig;

	        // Add zeros to make remainder as long as divisor.
	        for ( ; remL++ < dvsL; rem.push(0) ) {
	        }

	        // Create version of divisor with leading zero.
	        dvsZ.unshift(0);

	        do {

	            // 'next' is how many times the divisor goes into the current remainder.
	            for ( next = 0; next < base; next++ ) {

	                // Compare divisor and remainder.
	                if ( dvsL != ( remL = rem.length ) ) {
	                    cmp = dvsL > remL ? 1 : -1;
	                } else {
	                    for ( remI = -1, cmp = 0; ++remI < dvsL; ) {

	                        if ( dvs[remI] != rem[remI] ) {
	                            cmp = dvs[remI] > rem[remI] ? 1 : -1;
	                            break;
	                        }
	                    }
	                }

	                // Subtract divisor from remainder (if divisor < remainder).
	                if ( cmp < 0 ) {

	                    // Remainder cannot be more than one digit longer than divisor.
	                    // Equalise lengths using divisor with extra leading zero?
	                    for ( dvsT = remL == dvsL ? dvs : dvsZ; remL; ) {

	                        if ( rem[--remL] < dvsT[remL] ) {

	                            for ( remI = remL;
	                              remI && !rem[--remI];
	                                rem[remI] = base - 1 ) {
	                            }
	                            --rem[remI];
	                            rem[remL] += base;
	                        }
	                        rem[remL] -= dvsT[remL];
	                    }
	                    for ( ; !rem[0]; rem.shift() ) {
	                    }
	                } else {
	                    break;
	                }
	            }

	            // Add the 'next' digit to the result array.
	            qc[qi++] = cmp ? next : ++next;

	            // Update the remainder.
	            rem[0] && cmp
	              ? ( rem[remL] = dvd[dvdI] || 0 )
	              : ( rem = [ dvd[dvdI] ] );

	        } while ( ( dvdI++ < dvdL || rem[0] != null ) && s-- );

	        // Leading zero? Do not remove if result is simply zero (qi == 1).
	        if ( !qc[0] && qi != 1 ) {

	            // There can't be more than one zero.
	            --quo['e'];
	            qc.shift();
	        }

	        // Round?
	        if ( qi > dig ) {
	            rnd( quo, DECIMAL_PLACES, base, isOdd, rem[0] != null );
	        }

	        // Overflow?
	        if ( quo['e'] > MAX_EXP ) {

	            // Infinity.
	            quo['c'] = quo['e'] = null;

	        // Underflow?
	        } else if ( quo['e'] < MIN_EXP ) {

	            // Zero.
	            quo['c'] = [quo['e'] = 0];
	        }

	        return quo;
	    }


	    /*
	     * Return a string representing the value of BigNumber n in normal or
	     * exponential notation rounded to the specified decimal places or
	     * significant digits.
	     * Called by toString, toExponential (exp 1), toFixed, and toPrecision (exp 2).
	     * d is the index (with the value in normal notation) of the digit that may be
	     * rounded up.
	     */
	    function format( n, d, exp ) {

	        // Initially, i is the number of decimal places required.
	        var i = d - (n = new BigNumber(n))['e'],
	            c = n['c'];

	        // +-Infinity or NaN?
	        if ( !c ) {
	            return n['toS']();
	        }

	        // Round?
	        if ( c.length > ++d ) {
	            rnd( n, i, 10 );
	        }

	        // Recalculate d if toFixed as n['e'] may have changed if value rounded up.
	        i = c[0] == 0 ? i + 1 : exp ? d : n['e'] + i + 1;

	        // Append zeros?
	        for ( ; c.length < i; c.push(0) ) {
	        }
	        i = n['e'];

	        /*
	         * toPrecision returns exponential notation if the number of significant
	         * digits specified is less than the number of digits necessary to
	         * represent the integer part of the value in normal notation.
	         */
	        return exp == 1 || exp == 2 && ( --d < i || i <= TO_EXP_NEG )

	          // Exponential notation.
	          ? ( n['s'] < 0 && c[0] ? '-' : '' ) + ( c.length > 1
	            ? ( c.splice( 1, 0, '.' ), c.join('') )
	            : c[0] ) + ( i < 0 ? 'e' : 'e+' ) + i

	          // Normal notation.
	          : n['toS']();
	    }


	    // Round if necessary.
	    // Called by divide, format, setMode and sqrt.
	    function rnd( x, dp, base, isOdd, r ) {
	        var xc = x['c'],
	            isNeg = x['s'] < 0,
	            half = base / 2,
	            i = x['e'] + dp + 1,

	            // 'next' is the digit after the digit that may be rounded up.
	            next = xc[i],

	            /*
	             * 'more' is whether there are digits after 'next'.
	             * E.g.
	             * 0.005 (e = -3) to be rounded to 0 decimal places (dp = 0) gives i = -2
	             * The 'next' digit is zero, and there ARE 'more' digits after it.
	             * 0.5 (e = -1) dp = 0 gives i = 0
	             * The 'next' digit is 5 and there are no 'more' digits after it.
	             */
	            more = r || i < 0 || xc[i + 1] != null;

	        r = ROUNDING_MODE < 4
	          ? ( next != null || more ) &&
	            ( ROUNDING_MODE == 0 ||
	               ROUNDING_MODE == 2 && !isNeg ||
	                 ROUNDING_MODE == 3 && isNeg )
	          : next > half || next == half &&
	            ( ROUNDING_MODE == 4 || more ||

	              /*
	               * isOdd is used in base conversion and refers to the least significant
	               * digit of the integer part of the value to be converted. The fraction
	               * part is rounded by this method separately from the integer part.
	               */
	              ROUNDING_MODE == 6 && ( xc[i - 1] & 1 || !dp && isOdd ) ||
	                ROUNDING_MODE == 7 && !isNeg ||
	                  ROUNDING_MODE == 8 && isNeg );

	        if ( i < 1 || !xc[0] ) {
	            xc.length = 0;
	            xc.push(0);

	            if ( r ) {

	                // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	                xc[0] = 1;
	                x['e'] = -dp;
	            } else {

	                // Zero.
	                x['e'] = 0;
	            }

	            return x;
	        }

	        // Remove any digits after the required decimal places.
	        xc.length = i--;

	        // Round up?
	        if ( r ) {

	            // Rounding up may mean the previous digit has to be rounded up and so on.
	            for ( --base; ++xc[i] > base; ) {
	                xc[i] = 0;

	                if ( !i-- ) {
	                    ++x['e'];
	                    xc.unshift(1);
	                }
	            }
	        }

	        // Remove trailing zeros.
	        for ( i = xc.length; !xc[--i]; xc.pop() ) {
	        }

	        return x;
	    }


	    // Round after setting the appropriate rounding mode.
	    // Handles ceil, floor and round.
	    function setMode( x, dp, rm ) {
	        var r = ROUNDING_MODE;

	        ROUNDING_MODE = rm;
	        x = new BigNumber(x);
	        x['c'] && rnd( x, dp, 10 );
	        ROUNDING_MODE = r;

	        return x;
	    }


	    // PROTOTYPE/INSTANCE METHODS


	    /*
	     * Return a new BigNumber whose value is the absolute value of this BigNumber.
	     */
	    P['abs'] = P['absoluteValue'] = function () {
	        var x = new BigNumber(this);

	        if ( x['s'] < 0 ) {
	            x['s'] = 1;
	        }

	        return x;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber
	     * rounded to a whole number in the direction of Infinity.
	     */
	    P['ceil'] = function () {
	        return setMode( this, 0, 2 );
	    };


	    /*
	     * Return
	     * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	     * 0 if they have the same value,
	     * or null if the value of either is NaN.
	     */
	    P['comparedTo'] = P['cmp'] = function ( y, b ) {
	        var a,
	            x = this,
	            xc = x['c'],
	            yc = ( id = -id, y = new BigNumber( y, b ) )['c'],
	            i = x['s'],
	            j = y['s'],
	            k = x['e'],
	            l = y['e'];

	        // Either NaN?
	        if ( !i || !j ) {
	            return null;
	        }

	        a = xc && !xc[0], b = yc && !yc[0];

	        // Either zero?
	        if ( a || b ) {
	            return a ? b ? 0 : -j : i;
	        }

	        // Signs differ?
	        if ( i != j ) {
	            return i;
	        }

	        // Either Infinity?
	        if ( a = i < 0, b = k == l, !xc || !yc ) {
	            return b ? 0 : !xc ^ a ? 1 : -1;
	        }

	        // Compare exponents.
	        if ( !b ) {
	            return k > l ^ a ? 1 : -1;
	        }

	        // Compare digit by digit.
	        for ( i = -1,
	              j = ( k = xc.length ) < ( l = yc.length ) ? k : l;
	              ++i < j; ) {

	            if ( xc[i] != yc[i] ) {
	                return xc[i] > yc[i] ^ a ? 1 : -1;
	            }
	        }
	        // Compare lengths.
	        return k == l ? 0 : k > l ^ a ? 1 : -1;
	    };


	    /*
	     *  n / 0 = I
	     *  n / N = N
	     *  n / I = 0
	     *  0 / n = 0
	     *  0 / 0 = N
	     *  0 / N = N
	     *  0 / I = 0
	     *  N / n = N
	     *  N / 0 = N
	     *  N / N = N
	     *  N / I = N
	     *  I / n = I
	     *  I / 0 = I
	     *  I / N = N
	     *  I / I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber
	     * divided by the value of BigNumber(y, b), rounded according to
	     * DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P['dividedBy'] = P['div'] = function ( y, b ) {
	        var xc = this['c'],
	            xe = this['e'],
	            xs = this['s'],
	            yc = ( id = 2, y = new BigNumber( y, b ) )['c'],
	            ye = y['e'],
	            ys = y['s'],
	            s = xs == ys ? 1 : -1;

	        // Either NaN/Infinity/0?
	        return !xe && ( !xc || !xc[0] ) || !ye && ( !yc || !yc[0] )

	          // Either NaN?
	          ? new BigNumber( !xs || !ys ||

	            // Both 0 or both Infinity?
	            ( xc ? yc && xc[0] == yc[0] : !yc )

	              // Return NaN.
	              ? NaN

	              // x is 0 or y is Infinity?
	              : xc && xc[0] == 0 || !yc

	                // Return +-0.
	                ? s * 0

	                // y is 0. Return +-Infinity.
	                : s / 0 )

	          : divide( xc, yc, xe - ye, s, 10 );
	    };


	    /*
	     * Return true if the value of this BigNumber is equal to the value of
	     * BigNumber(n, b), otherwise returns false.
	     */
	    P['equals'] = P['eq'] = function ( n, b ) {
	        id = 3;
	        return this['cmp']( n, b ) === 0;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber
	     * rounded to a whole number in the direction of -Infinity.
	     */
	    P['floor'] = function () {
	        return setMode( this, 0, 3 );
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than the value of
	     * BigNumber(n, b), otherwise returns false.
	     */
	    P['greaterThan'] = P['gt'] = function ( n, b ) {
	        id = 4;
	        return this['cmp']( n, b ) > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than or equal to
	     * the value of BigNumber(n, b), otherwise returns false.
	     */
	    P['greaterThanOrEqualTo'] = P['gte'] = function ( n, b ) {
	        id = 5;
	        return ( b = this['cmp']( n, b ) ) == 1 || b === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is a finite number, otherwise
	     * returns false.
	     */
	    P['isFinite'] = P['isF'] = function () {
	        return !!this['c'];
	    };


	    /*
	     * Return true if the value of this BigNumber is NaN, otherwise returns
	     * false.
	     */
	    P['isNaN'] = function () {
	        return !this['s'];
	    };


	    /*
	     * Return true if the value of this BigNumber is negative, otherwise
	     * returns false.
	     */
	    P['isNegative'] = P['isNeg'] = function () {
	        return this['s'] < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is 0 or -0, otherwise returns
	     * false.
	     */
	    P['isZero'] = P['isZ'] = function () {
	        return !!this['c'] && this['c'][0] == 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than the value of
	     * BigNumber(n, b), otherwise returns false.
	     */
	    P['lessThan'] = P['lt'] = function ( n, b ) {
	        id = 6;
	        return this['cmp']( n, b ) < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than or equal to the
	     * value of BigNumber(n, b), otherwise returns false.
	     */
	    P['lessThanOrEqualTo'] = P['lte'] = function ( n, b ) {
	        id = 7;
	        return ( b = this['cmp']( n, b ) ) == -1 || b === 0;
	    };


	    /*
	     *  n - 0 = n
	     *  n - N = N
	     *  n - I = -I
	     *  0 - n = -n
	     *  0 - 0 = 0
	     *  0 - N = N
	     *  0 - I = -I
	     *  N - n = N
	     *  N - 0 = N
	     *  N - N = N
	     *  N - I = N
	     *  I - n = I
	     *  I - 0 = I
	     *  I - N = N
	     *  I - I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber minus
	     * the value of BigNumber(y, b).
	     */
	    P['minus'] = function ( y, b ) {
	        var d, i, j, xLTy,
	            x = this,
	            a = x['s'];

	        b = ( id = 8, y = new BigNumber( y, b ) )['s'];

	        // Either NaN?
	        if ( !a || !b ) {
	            return new BigNumber(NaN);
	        }

	        // Signs differ?
	        if ( a != b ) {
	            return y['s'] = -b, x['plus'](y);
	        }

	        var xc = x['c'],
	            xe = x['e'],
	            yc = y['c'],
	            ye = y['e'];

	        if ( !xe || !ye ) {

	            // Either Infinity?
	            if ( !xc || !yc ) {
	                return xc ? ( y['s'] = -b, y ) : new BigNumber( yc ? x : NaN );
	            }

	            // Either zero?
	            if ( !xc[0] || !yc[0] ) {

	                // y is non-zero?
	                return yc[0]
	                  ? ( y['s'] = -b, y )

	                  // x is non-zero?
	                  : new BigNumber( xc[0]
	                    ? x

	                    // Both are zero.
	                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	                    : ROUNDING_MODE == 3 ? -0 : 0 );
	            }
	        }

	        // Determine which is the bigger number.
	        // Prepend zeros to equalise exponents.
	        if ( xc = xc.slice(), a = xe - ye ) {
	            d = ( xLTy = a < 0 ) ? ( a = -a, xc ) : ( ye = xe, yc );

	            for ( d.reverse(), b = a; b--; d.push(0) ) {
	            }
	            d.reverse();
	        } else {

	            // Exponents equal. Check digit by digit.
	            j = ( ( xLTy = xc.length < yc.length ) ? xc : yc ).length;

	            for ( a = b = 0; b < j; b++ ) {

	                if ( xc[b] != yc[b] ) {
	                    xLTy = xc[b] < yc[b];
	                    break;
	                }
	            }
	        }

	        // x < y? Point xc to the array of the bigger number.
	        if ( xLTy ) {
	            d = xc, xc = yc, yc = d;
	            y['s'] = -y['s'];
	        }

	        /*
	         * Append zeros to xc if shorter. No need to add zeros to yc if shorter
	         * as subtraction only needs to start at yc.length.
	         */
	        if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {

	            for ( ; b--; xc[j++] = 0 ) {
	            }
	        }

	        // Subtract yc from xc.
	        for ( b = yc.length; b > a; ){

	            if ( xc[--b] < yc[b] ) {

	                for ( i = b; i && !xc[--i]; xc[i] = 9 ) {
	                }
	                --xc[i];
	                xc[b] += 10;
	            }
	            xc[b] -= yc[b];
	        }

	        // Remove trailing zeros.
	        for ( ; xc[--j] == 0; xc.pop() ) {
	        }

	        // Remove leading zeros and adjust exponent accordingly.
	        for ( ; xc[0] == 0; xc.shift(), --ye ) {
	        }

	        /*
	         * No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	         * when neither x or y are Infinity.
	         */

	        // Underflow?
	        if ( ye < MIN_EXP || !xc[0] ) {

	            /*
	             * Following IEEE 754 (2008) 6.3,
	             * n - n = +0  but  n - n = -0 when rounding towards -Infinity.
	             */
	            if ( !xc[0] ) {
	                y['s'] = ROUNDING_MODE == 3 ? -1 : 1;
	            }

	            // Result is zero.
	            xc = [ye = 0];
	        }

	        return y['c'] = xc, y['e'] = ye, y;
	    };


	    /*
	     *   n % 0 =  N
	     *   n % N =  N
	     *   0 % n =  0
	     *  -0 % n = -0
	     *   0 % 0 =  N
	     *   0 % N =  N
	     *   N % n =  N
	     *   N % 0 =  N
	     *   N % N =  N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber modulo
	     * the value of BigNumber(y, b).
	     */
	    P['modulo'] = P['mod'] = function ( y, b ) {
	        var x = this,
	            xc = x['c'],
	            yc = ( id = 9, y = new BigNumber( y, b ) )['c'],
	            i = x['s'],
	            j = y['s'];

	        // Is x or y NaN, or y zero?
	        b = !i || !j || yc && !yc[0];

	        if ( b || xc && !xc[0] ) {
	            return new BigNumber( b ? NaN : x );
	        }

	        x['s'] = y['s'] = 1;
	        b = y['cmp'](x) == 1;
	        x['s'] = i, y['s'] = j;

	        return b
	          ? new BigNumber(x)
	          : ( i = DECIMAL_PLACES, j = ROUNDING_MODE,
	            DECIMAL_PLACES = 0, ROUNDING_MODE = 1,
	              x = x['div'](y),
	                DECIMAL_PLACES = i, ROUNDING_MODE = j,
	                  this['minus']( x['times'](y) ) );
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber
	     * negated, i.e. multiplied by -1.
	     */
	    P['negated'] = P['neg'] = function () {
	        var x = new BigNumber(this);

	        return x['s'] = -x['s'] || null, x;
	    };


	    /*
	     *  n + 0 = n
	     *  n + N = N
	     *  n + I = I
	     *  0 + n = n
	     *  0 + 0 = 0
	     *  0 + N = N
	     *  0 + I = I
	     *  N + n = N
	     *  N + 0 = N
	     *  N + N = N
	     *  N + I = N
	     *  I + n = I
	     *  I + 0 = I
	     *  I + N = N
	     *  I + I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber plus
	     * the value of BigNumber(y, b).
	     */
	    P['plus'] = function ( y, b ) {
	        var d,
	            x = this,
	            a = x['s'];

	        b = ( id = 10, y = new BigNumber( y, b ) )['s'];

	        // Either NaN?
	        if ( !a || !b ) {
	            return new BigNumber(NaN);
	        }

	        // Signs differ?
	        if ( a != b ) {
	            return y['s'] = -b, x['minus'](y);
	        }

	        var xe = x['e'],
	            xc = x['c'],
	            ye = y['e'],
	            yc = y['c'];

	        if ( !xe || !ye ) {

	            // Either Infinity?
	            if ( !xc || !yc ) {

	                // Return +-Infinity.
	                return new BigNumber( a / 0 );
	            }

	            // Either zero?
	            if ( !xc[0] || !yc[0] ) {

	                // y is non-zero?
	                return yc[0]
	                  ? y

	                  // x is non-zero?
	                  : new BigNumber( xc[0]
	                    ? x

	                    // Both are zero. Return zero.
	                    : a * 0 );
	            }
	        }

	        // Prepend zeros to equalise exponents.
	        // Note: Faster to use reverse then do unshifts.
	        if ( xc = xc.slice(), a = xe - ye ) {
	            d = a > 0 ? ( ye = xe, yc ) : ( a = -a, xc );

	            for ( d.reverse(); a--; d.push(0) ) {
	            }
	            d.reverse();
	        }

	        // Point xc to the longer array.
	        if ( xc.length - yc.length < 0 ) {
	            d = yc, yc = xc, xc = d;
	        }

	        /*
	         * Only start adding at yc.length - 1 as the
	         * further digits of xc can be left as they are.
	         */
	        for ( a = yc.length, b = 0; a;
	             b = ( xc[--a] = xc[a] + yc[a] + b ) / 10 ^ 0, xc[a] %= 10 ) {
	        }

	        // No need to check for zero, as +x + +y != 0 && -x + -y != 0

	        if ( b ) {
	            xc.unshift(b);

	            // Overflow? (MAX_EXP + 1 possible)
	            if ( ++ye > MAX_EXP ) {

	                // Infinity.
	                xc = ye = null;
	            }
	        }

	         // Remove trailing zeros.
	        for ( a = xc.length; xc[--a] == 0; xc.pop() ) {
	        }

	        return y['c'] = xc, y['e'] = ye, y;
	    };


	    /*
	     * Return a BigNumber whose value is the value of this BigNumber raised to
	     * the power e. If e is negative round according to DECIMAL_PLACES and
	     * ROUNDING_MODE.
	     *
	     * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.
	     */
	    P['toPower'] = P['pow'] = function ( e ) {

	        // e to integer, avoiding NaN or Infinity becoming 0.
	        var i = e * 0 == 0 ? e | 0 : e,
	            x = new BigNumber(this),
	            y = new BigNumber(ONE);

	        // Use Math.pow?
	        // Pass +-Infinity for out of range exponents.
	        if ( ( ( ( outOfRange = e < -MAX_POWER || e > MAX_POWER ) &&
	          (i = e * 1 / 0) ) ||

	             /*
	              * Any exponent that fails the parse becomes NaN.
	              *
	              * Include 'e !== 0' because on Opera -0 == parseFloat(-0) is false,
	              * despite -0 === parseFloat(-0) && -0 == parseFloat('-0') is true.
	              */
	             parse(e) != e && e !== 0 && !(i = NaN) ) &&

	              // 'pow() exponent not an integer: {e}'
	              // 'pow() exponent out of range: {e}'
	              !ifExceptionsThrow( e, 'exponent', 'pow' ) ||

	                // Pass zero to Math.pow, as any value to the power zero is 1.
	                !i ) {

	            // i is +-Infinity, NaN or 0.
	            return new BigNumber( Math.pow( x['toS'](), i ) );
	        }

	        for ( i = i < 0 ? -i : i; ; ) {

	            if ( i & 1 ) {
	                y = y['times'](x);
	            }
	            i >>= 1;

	            if ( !i ) {
	                break;
	            }
	            x = x['times'](x);
	        }

	        return e < 0 ? ONE['div'](y) : y;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber
	     * rounded to a maximum of dp decimal places using rounding mode rm, or to
	     * 0 and ROUNDING_MODE respectively if omitted.
	     *
	     * [dp] {number} Integer, 0 to MAX inclusive.
	     * [rm] {number} Integer, 0 to 8 inclusive.
	     */
	    P['round'] = function ( dp, rm ) {

	        dp = dp == null || ( ( ( outOfRange = dp < 0 || dp > MAX ) ||
	          parse(dp) != dp ) &&

	            // 'round() decimal places out of range: {dp}'
	            // 'round() decimal places not an integer: {dp}'
	            !ifExceptionsThrow( dp, 'decimal places', 'round' ) )
	              ? 0
	              : dp | 0;

	        rm = rm == null || ( ( ( outOfRange = rm < 0 || rm > 8 ) ||

	          // Include '&& rm !== 0' because with Opera -0 == parseFloat(-0) is false.
	          parse(rm) != rm && rm !== 0 ) &&

	            // 'round() mode not an integer: {rm}'
	            // 'round() mode out of range: {rm}'
	            !ifExceptionsThrow( rm, 'mode', 'round' ) )
	              ? ROUNDING_MODE
	              : rm | 0;

	        return setMode( this, dp, rm );
	    };


	    /*
	     *  sqrt(-n) =  N
	     *  sqrt( N) =  N
	     *  sqrt(-I) =  N
	     *  sqrt( I) =  I
	     *  sqrt( 0) =  0
	     *  sqrt(-0) = -0
	     *
	     * Return a new BigNumber whose value is the square root of the value of
	     * this BigNumber, rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P['squareRoot'] = P['sqrt'] = function () {
	        var n, r, re, t,
	            x = this,
	            c = x['c'],
	            s = x['s'],
	            e = x['e'],
	            dp = DECIMAL_PLACES,
	            rm = ROUNDING_MODE,
	            half = new BigNumber('0.5');

	        // Negative/NaN/Infinity/zero?
	        if ( s !== 1 || !c || !c[0] ) {

	            return new BigNumber( !s || s < 0 && ( !c || c[0] )
	              ? NaN
	              : c ? x : 1 / 0 );
	        }

	        // Initial estimate.
	        s = Math.sqrt( x['toS']() );
	        ROUNDING_MODE = 1;

	        /*
	          Math.sqrt underflow/overflow?
	          Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	         */
	        if ( s == 0 || s == 1 / 0 ) {
	            n = c.join('');

	            if ( !( n.length + e & 1 ) ) {
	                n += '0';
	            }
	            r = new BigNumber( Math.sqrt(n) + '' );

	            // r may still not be finite.
	            if ( !r['c'] ) {
	                r['c'] = [1];
	            }
	            r['e'] = ( ( ( e + 1 ) / 2 ) | 0 ) - ( e < 0 || e & 1 );
	        } else {
	            r = new BigNumber( n = s.toString() );
	        }
	        re = r['e'];
	        s = re + ( DECIMAL_PLACES += 4 );

	        if ( s < 3 ) {
	            s = 0;
	        }
	        e = s;

	        // Newton-Raphson iteration.
	        for ( ; ; ) {
	            t = r;
	            r = half['times']( t['plus']( x['div'](t) ) );

	            if ( t['c'].slice( 0, s ).join('') === r['c'].slice( 0, s ).join('') ) {
	                c = r['c'];

	                /*
	                  The exponent of r may here be one less than the final result
	                  exponent (re), e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust
	                  s so the rounding digits are indexed correctly.
	                 */
	                s = s - ( n && r['e'] < re );

	                /*
	                  The 4th rounding digit may be in error by -1 so if the 4 rounding
	                  digits are 9999 or 4999 (i.e. approaching a rounding boundary)
	                  continue the iteration.
	                 */
	                if ( c[s] == 9 && c[s - 1] == 9 && c[s - 2] == 9 &&
	                        ( c[s - 3] == 9 || n && c[s - 3] == 4 ) ) {

	                    /*
	                      If 9999 on first run through, check to see if rounding up
	                      gives the exact result as the nines may infinitely repeat.
	                     */
	                    if ( n && c[s - 3] == 9 ) {
	                        t = r['round']( dp, 0 );

	                        if ( t['times'](t)['eq'](x) ) {
	                            ROUNDING_MODE = rm;
	                            DECIMAL_PLACES = dp;

	                            return t;
	                        }
	                    }
	                    DECIMAL_PLACES += 4;
	                    s += 4;
	                    n = '';
	                } else {

	                    /*
	                      If the rounding digits are null, 0000 or 5000, check for an
	                      exact result. If not, then there are further digits so
	                      increment the 1st rounding digit to ensure correct rounding.
	                     */
	                    if ( !c[e] && !c[e - 1] && !c[e - 2] &&
	                            ( !c[e - 3] || c[e - 3] == 5 ) ) {

	                        // Truncate to the first rounding digit.
	                        if ( c.length > e - 2 ) {
	                            c.length = e - 2;
	                        }

	                        if ( !r['times'](r)['eq'](x) ) {

	                            while ( c.length < e - 3 ) {
	                                c.push(0);
	                            }
	                            c[e - 3]++;
	                        }
	                    }
	                    ROUNDING_MODE = rm;
	                    rnd( r, DECIMAL_PLACES = dp, 10 );

	                    return r;
	                }
	            }
	        }
	    };


	    /*
	     *  n * 0 = 0
	     *  n * N = N
	     *  n * I = I
	     *  0 * n = 0
	     *  0 * 0 = 0
	     *  0 * N = N
	     *  0 * I = N
	     *  N * n = N
	     *  N * 0 = N
	     *  N * N = N
	     *  N * I = N
	     *  I * n = I
	     *  I * 0 = N
	     *  I * N = N
	     *  I * I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber times
	     * the value of BigNumber(y, b).
	     */
	    P['times'] = function ( y, b ) {
	        var c,
	            x = this,
	            xc = x['c'],
	            yc = ( id = 11, y = new BigNumber( y, b ) )['c'],
	            i = x['e'],
	            j = y['e'],
	            a = x['s'];

	        y['s'] = a == ( b = y['s'] ) ? 1 : -1;

	        // Either NaN/Infinity/0?
	        if ( !i && ( !xc || !xc[0] ) || !j && ( !yc || !yc[0] ) ) {

	            // Either NaN?
	            return new BigNumber( !a || !b ||

	              // x is 0 and y is Infinity  or  y is 0 and x is Infinity?
	              xc && !xc[0] && !yc || yc && !yc[0] && !xc

	                // Return NaN.
	                ? NaN

	                // Either Infinity?
	                : !xc || !yc

	                  // Return +-Infinity.
	                  ? y['s'] / 0

	                  // x or y is 0. Return +-0.
	                  : y['s'] * 0 );
	        }
	        y['e'] = i + j;

	        if ( ( a = xc.length ) < ( b = yc.length ) ) {
	            c = xc, xc = yc, yc = c, j = a, a = b, b = j;
	        }

	        for ( j = a + b, c = []; j--; c.push(0) ) {
	        }

	        // Multiply!
	        for ( i = b - 1; i > -1; i-- ) {

	            for ( b = 0, j = a + i;
	                  j > i;
	                  b = c[j] + yc[i] * xc[j - i - 1] + b,
	                  c[j--] = b % 10 | 0,
	                  b = b / 10 | 0 ) {
	            }

	            if ( b ) {
	                c[j] = ( c[j] + b ) % 10;
	            }
	        }

	        b && ++y['e'];

	        // Remove any leading zero.
	        !c[0] && c.shift();

	        // Remove trailing zeros.
	        for ( j = c.length; !c[--j]; c.pop() ) {
	        }

	        // No zero check needed as only x * 0 == 0 etc.

	        // Overflow?
	        y['c'] = y['e'] > MAX_EXP

	          // Infinity.
	          ? ( y['e'] = null )

	          // Underflow?
	          : y['e'] < MIN_EXP

	            // Zero.
	            ? [ y['e'] = 0 ]

	            // Neither.
	            : c;

	        return y;
	    };


	    /*
	     * Return a string representing the value of this BigNumber in exponential
	     * notation to dp fixed decimal places and rounded using ROUNDING_MODE if
	     * necessary.
	     *
	     * [dp] {number} Integer, 0 to MAX inclusive.
	     */
	    P['toExponential'] = P['toE'] = function ( dp ) {

	        return format( this,
	          ( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||

	            /*
	             * Include '&& dp !== 0' because with Opera -0 == parseFloat(-0) is
	             * false, despite -0 == parseFloat('-0') && 0 == -0 being true.
	             */
	            parse(dp) != dp && dp !== 0 ) &&

	              // 'toE() decimal places not an integer: {dp}'
	              // 'toE() decimal places out of range: {dp}'
	              !ifExceptionsThrow( dp, 'decimal places', 'toE' ) ) && this['c']
	                ? this['c'].length - 1
	                : dp | 0, 1 );
	    };


	    /*
	     * Return a string representing the value of this BigNumber in normal
	     * notation to dp fixed decimal places and rounded using ROUNDING_MODE if
	     * necessary.
	     *
	     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	     * but e.g. (-0.00001).toFixed(0) is '-0'.
	     *
	     * [dp] {number} Integer, 0 to MAX inclusive.
	     */
	    P['toFixed'] = P['toF'] = function ( dp ) {
	        var n, str, d,
	            x = this;

	        if ( !( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||
	            parse(dp) != dp && dp !== 0 ) &&

	            // 'toF() decimal places not an integer: {dp}'
	            // 'toF() decimal places out of range: {dp}'
	            !ifExceptionsThrow( dp, 'decimal places', 'toF' ) ) ) {
	              d = x['e'] + ( dp | 0 );
	        }

	        n = TO_EXP_NEG, dp = TO_EXP_POS;
	        TO_EXP_NEG = -( TO_EXP_POS = 1 / 0 );

	        // Note: str is initially undefined.
	        if ( d == str ) {
	            str = x['toS']();
	        } else {
	            str = format( x, d );

	            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
	            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	            if ( x['s'] < 0 && x['c'] ) {

	                // As e.g. -0 toFixed(3), will wrongly be returned as -0.000 from toString.
	                if ( !x['c'][0] ) {
	                    str = str.replace(/^-/, '');

	                // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
	                } else if ( str.indexOf('-') < 0 ) {
	                    str = '-' + str;
	                }
	            }
	        }
	        TO_EXP_NEG = n, TO_EXP_POS = dp;

	        return str;
	    };


	    /*
	     * Return a string array representing the value of this BigNumber as a
	     * simple fraction with an integer numerator and an integer denominator.
	     * The denominator will be a positive non-zero value less than or equal to
	     * the specified maximum denominator. If a maximum denominator is not
	     * specified, the denominator will be the lowest value necessary to
	     * represent the number exactly.
	     *
	     * [maxD] {number|string|BigNumber} Integer >= 1 and < Infinity.
	     */
	    P['toFraction'] = P['toFr'] = function ( maxD ) {
	        var q, frac, n0, d0, d2, n, e,
	            n1 = d0 = new BigNumber(ONE),
	            d1 = n0 = new BigNumber('0'),
	            x = this,
	            xc = x['c'],
	            exp = MAX_EXP,
	            dp = DECIMAL_PLACES,
	            rm = ROUNDING_MODE,
	            d = new BigNumber(ONE);

	        // NaN, Infinity.
	        if ( !xc ) {
	            return x['toS']();
	        }

	        e = d['e'] = xc.length - x['e'] - 1;

	        // If max denominator is undefined or null...
	        if ( maxD == null ||

	             // or NaN...
	             ( !( id = 12, n = new BigNumber(maxD) )['s'] ||

	               // or less than 1, or Infinity...
	               ( outOfRange = n['cmp'](n1) < 0 || !n['c'] ) ||

	                 // or not an integer...
	                 ( ERRORS && n['e'] < n['c'].length - 1 ) ) &&

	                   // 'toFr() max denominator not an integer: {maxD}'
	                   // 'toFr() max denominator out of range: {maxD}'
	                   !ifExceptionsThrow( maxD, 'max denominator', 'toFr' ) ||

	                     // or greater than the maxD needed to specify the value exactly...
	                     ( maxD = n )['cmp'](d) > 0 ) {

	            // d is e.g. 10, 100, 1000, 10000... , n1 is 1.
	            maxD = e > 0 ? d : n1;
	        }

	        MAX_EXP = 1 / 0;
	        n = new BigNumber( xc.join('') );

	        for ( DECIMAL_PLACES = 0, ROUNDING_MODE = 1; ; )  {
	            q = n['div'](d);
	            d2 = d0['plus']( q['times'](d1) );

	            if ( d2['cmp'](maxD) == 1 ) {
	                break;
	            }

	            d0 = d1, d1 = d2;

	            n1 = n0['plus']( q['times']( d2 = n1 ) );
	            n0 = d2;

	            d = n['minus']( q['times']( d2 = d ) );
	            n = d2;
	        }

	        d2 = maxD['minus'](d0)['div'](d1);
	        n0 = n0['plus']( d2['times'](n1) );
	        d0 = d0['plus']( d2['times'](d1) );

	        n0['s'] = n1['s'] = x['s'];

	        DECIMAL_PLACES = e * 2;
	        ROUNDING_MODE = rm;

	        // Determine which fraction is closer to x, n0 / d0 or n1 / d1?
	        frac = n1['div'](d1)['minus'](x)['abs']()['cmp'](
	          n0['div'](d0)['minus'](x)['abs']() ) < 1
	          ? [ n1['toS'](), d1['toS']() ]
	          : [ n0['toS'](), d0['toS']() ];

	        return MAX_EXP = exp, DECIMAL_PLACES = dp, frac;
	    };


	    /*
	     * Return a string representing the value of this BigNumber to sd significant
	     * digits and rounded using ROUNDING_MODE if necessary.
	     * If sd is less than the number of digits necessary to represent the integer
	     * part of the value in normal notation, then use exponential notation.
	     *
	     * sd {number} Integer, 1 to MAX inclusive.
	     */
	    P['toPrecision'] = P['toP'] = function ( sd ) {

	        /*
	         * ERRORS true: Throw if sd not undefined, null or an integer in range.
	         * ERRORS false: Ignore sd if not a number or not in range.
	         * Truncate non-integers.
	         */
	        return sd == null || ( ( ( outOfRange = sd < 1 || sd > MAX ) ||
	          parse(sd) != sd ) &&

	            // 'toP() precision not an integer: {sd}'
	            // 'toP() precision out of range: {sd}'
	            !ifExceptionsThrow( sd, 'precision', 'toP' ) )
	              ? this['toS']()
	              : format( this, --sd | 0, 2 );
	    };


	    /*
	     * Return a string representing the value of this BigNumber in base b, or
	     * base 10 if b is omitted. If a base is specified, including base 10,
	     * round according to DECIMAL_PLACES and ROUNDING_MODE.
	     * If a base is not specified, and this BigNumber has a positive exponent
	     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal
	     * to or less than TO_EXP_NEG, return exponential notation.
	     *
	     * [b] {number} Integer, 2 to 64 inclusive.
	     */
	    P['toString'] = P['toS'] = function ( b ) {
	        var u, str, strL,
	            x = this,
	            xe = x['e'];

	        // Infinity or NaN?
	        if ( xe === null ) {
	            str = x['s'] ? 'Infinity' : 'NaN';

	        // Exponential format?
	        } else if ( b === u && ( xe <= TO_EXP_NEG || xe >= TO_EXP_POS ) ) {
	            return format( x, x['c'].length - 1, 1 );
	        } else {
	            str = x['c'].join('');

	            // Negative exponent?
	            if ( xe < 0 ) {

	                // Prepend zeros.
	                for ( ; ++xe; str = '0' + str ) {
	                }
	                str = '0.' + str;

	            // Positive exponent?
	            } else if ( strL = str.length, xe > 0 ) {

	                if ( ++xe > strL ) {

	                    // Append zeros.
	                    for ( xe -= strL; xe-- ; str += '0' ) {
	                    }
	                } else if ( xe < strL ) {
	                    str = str.slice( 0, xe ) + '.' + str.slice(xe);
	                }

	            // Exponent zero.
	            } else {
	                if ( u = str.charAt(0), strL > 1 ) {
	                    str = u + '.' + str.slice(1);

	                // Avoid '-0'
	                } else if ( u == '0' ) {
	                    return u;
	                }
	            }

	            if ( b != null ) {

	                if ( !( outOfRange = !( b >= 2 && b < 65 ) ) &&
	                  ( b == (b | 0) || !ERRORS ) ) {
	                    str = convert( str, b | 0, 10, x['s'] );

	                    // Avoid '-0'
	                    if ( str == '0' ) {
	                        return str;
	                    }
	                } else {

	                    // 'toS() base not an integer: {b}'
	                    // 'toS() base out of range: {b}'
	                    ifExceptionsThrow( b, 'base', 'toS' );
	                }
	            }

	        }

	        return x['s'] < 0 ? '-' + str : str;
	    };


	    /*
	     * Return the value of this BigNumber converted to a number primitive.
	     *
	     */
	    P['toNumber'] = P['toN'] = function () {
	        var x = this;

	        // Ensure zero has correct sign.
	        return +x || ( x['s'] ? 0 * x['s'] : NaN );
	    };


	    /*
	     * Return as toString, but do not accept a base argument.
	     */
	    P['valueOf'] = function () {
	        return this['toS']();
	    };


	    // Add aliases for BigDecimal methods.
	    //P['add'] = P['plus'];
	    //P['subtract'] = P['minus'];
	    //P['multiply'] = P['times'];
	    //P['divide'] = P['div'];
	    //P['remainder'] = P['mod'];
	    //P['compareTo'] = P['cmp'];
	    //P['negate'] = P['neg'];


	    // EXPORT


	    // Node and other CommonJS-like environments that support module.exports.
	    if ( typeof module !== 'undefined' && module.exports ) {
	        module.exports = BigNumber;

	    //AMD.
	    } else if ( true ) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return BigNumber;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	    //Browser.
	    } else {
	        global['BigNumber'] = BigNumber;
	    }

	})( this );


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   2.3.0
	 */

	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }

	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }

	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }

	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }

	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$toString = {}.toString;
	    var lib$es6$promise$asap$$vertxNext;
	    var lib$es6$promise$asap$$customSchedulerFn;

	    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        if (lib$es6$promise$asap$$customSchedulerFn) {
	          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
	        } else {
	          lib$es6$promise$asap$$scheduleFlush();
	        }
	      }
	    }

	    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
	      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
	    }

	    function lib$es6$promise$asap$$setAsap(asapFn) {
	      lib$es6$promise$asap$$asap = asapFn;
	    }

	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';

	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      var nextTick = process.nextTick;
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // setImmediate should be used instead instead
	      var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
	      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
	        nextTick = setImmediate;
	      }
	      return function() {
	        nextTick(lib$es6$promise$asap$$flush);
	      };
	    }

	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }

	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });

	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }

	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }

	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }

	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];

	        callback(arg);

	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }

	      lib$es6$promise$asap$$len = 0;
	    }

	    function lib$es6$promise$asap$$attemptVertex() {
	      try {
	        var r = require;
	        var vertx = __webpack_require__(232);
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }

	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }

	    function lib$es6$promise$$internal$$noop() {}

	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;

	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$selfFullfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }

	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }

	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }

	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$asap(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;

	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));

	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }

	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }

	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }

	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }

	      lib$es6$promise$$internal$$publish(promise);
	    }

	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;

	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
	      }
	    }

	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;

	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
	    }

	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;

	      parent._onerror = null;

	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
	      }
	    }

	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;

	      if (subscribers.length === 0) { return; }

	      var child, callback, detail = promise._result;

	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];

	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }

	      promise._subscribers.length = 0;
	    }

	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }

	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;

	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }

	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }

	      } else {
	        value = detail;
	        succeeded = true;
	      }

	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }

	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      var enumerator = this;

	      enumerator._instanceConstructor = Constructor;
	      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (enumerator._validateInput(input)) {
	        enumerator._input     = input;
	        enumerator.length     = input.length;
	        enumerator._remaining = input.length;

	        enumerator._init();

	        if (enumerator.length === 0) {
	          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	        } else {
	          enumerator.length = enumerator.length || 0;
	          enumerator._enumerate();
	          if (enumerator._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
	      }
	    }

	    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return lib$es6$promise$utils$$isArray(input);
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };

	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var enumerator = this;

	      var length  = enumerator.length;
	      var promise = enumerator.promise;
	      var input   = enumerator._input;

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        enumerator._eachEntry(input[i], i);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var enumerator = this;
	      var c = enumerator._instanceConstructor;

	      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
	          entry._onerror = null;
	          enumerator._settledAt(entry._state, i, entry._result);
	        } else {
	          enumerator._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        enumerator._remaining--;
	        enumerator._result[i] = entry;
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var enumerator = this;
	      var promise = enumerator.promise;

	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        enumerator._remaining--;

	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          enumerator._result[i] = value;
	        }
	      }

	      if (enumerator._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;

	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }

	      var length = entries.length;

	      function onFulfillment(value) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      }

	      function onRejection(reason) {
	        lib$es6$promise$$internal$$reject(promise, reason);
	      }

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }

	      return promise;
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

	    var lib$es6$promise$promise$$counter = 0;

	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }

	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }

	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise's eventual value or the reason
	      why the promise cannot be fulfilled.

	      Terminology
	      -----------

	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.

	      A promise can be in one of three states: pending, fulfilled, or rejected.

	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.

	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.


	      Basic Usage:
	      ------------

	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);

	        // on failure
	        reject(reason);
	      });

	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Advanced Usage:
	      ---------------

	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.

	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();

	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();

	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }

	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Unlike callbacks, promises are great composable primitives.

	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON

	        return values;
	      });
	      ```

	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this._id = lib$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];

	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        if (!lib$es6$promise$utils$$isFunction(resolver)) {
	          lib$es6$promise$promise$$needsResolver();
	        }

	        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
	          lib$es6$promise$promise$$needsNew();
	        }

	        lib$es6$promise$$internal$$initializePromise(this, resolver);
	      }
	    }

	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
	    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
	    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
	    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,

	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.

	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```

	      Chaining
	      --------

	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.

	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });

	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```

	      Assimilation
	      ------------

	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```

	      If the assimliated promise rejects, then the downstream promise will also reject.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```

	      Simple Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var result;

	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```

	      Advanced Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var author, books;

	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js

	      function foundBooks(books) {

	      }

	      function failure(reason) {

	      }

	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;

	        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
	          return this;
	        }

	        var child = new this.constructor(lib$es6$promise$$internal$$noop);
	        var result = parent._result;

	        if (state) {
	          var callback = arguments[state - 1];
	          lib$es6$promise$asap$$asap(function(){
	            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }

	        return child;
	      },

	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.

	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }

	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }

	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;

	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }

	      var P = local.Promise;

	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }

	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };

	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(237)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }

	    lib$es6$promise$polyfill$$default();
	}).call(this);

	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129), __webpack_require__(135).setImmediate, (function() { return this; }()), __webpack_require__(108)(module)))

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = true;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var global = typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	module.exports = global;
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	// Optional / simple context binding
	var aFunction = __webpack_require__(192);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(~length && that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  } return function(/* ...args */){
	      return fn.apply(that, arguments);
	    };
	};

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(238)
	  , TAG = __webpack_require__(198)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(186)
	  , core      = __webpack_require__(170)
	  , PROTOTYPE = 'prototype';
	function ctx(fn, that){
	  return function(){
	    return fn.apply(that, arguments);
	  };
	}
	// type bitmap
	$def.F = 1;  // forced
	$def.G = 2;  // global
	$def.S = 4;  // static
	$def.P = 8;  // proto
	$def.B = 16; // bind
	$def.W = 32; // wrap
	function $def(type, name, source){
	  var key, own, out, exp
	    , isGlobal = type & $def.G
	    , isProto  = type & $def.P
	    , target   = isGlobal ? global : type & $def.S
	        ? global[name] : (global[name] || {})[PROTOTYPE]
	    , exports  = isGlobal ? core : core[name] || (core[name] = {});
	  if(isGlobal)source = name;
	  for(key in source){
	    // contains in native
	    own = !(type & $def.F) && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    if(isGlobal && typeof target[key] != 'function')exp = source[key];
	    // bind timers to global for call from export context
	    else if(type & $def.B && own)exp = ctx(out, global);
	    // wrap global constructors for prevent change them in library
	    else if(type & $def.W && target[key] == out)!function(C){
	      exp = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      exp[PROTOTYPE] = C[PROTOTYPE];
	    }(out);
	    else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export
	    exports[key] = exp;
	    if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	}
	module.exports = $def;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	// http://jsperf.com/core-js-isobject
	module.exports = function(it){
	  return it !== null && (typeof it == 'object' || typeof it == 'function');
	};

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(190);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(it, Constructor, name){
	  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
	  return it;
	};

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(187)
	  , call        = __webpack_require__(221)
	  , isArrayIter = __webpack_require__(222)
	  , anObject    = __webpack_require__(191)
	  , toLength    = __webpack_require__(223)
	  , getIterFn   = __webpack_require__(224);
	module.exports = function(iterable, entries, fn, that){
	  var iterFn = getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    call(iterator, f, step.value, entries);
	  }
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(165).getDesc
	  , isObject = __webpack_require__(190)
	  , anObject = __webpack_require__(191);
	function check(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	}
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
	    ? function(buggy, set){
	        try {
	          set = __webpack_require__(187)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	          set({}, []);
	        } catch(e){ buggy = true; }
	        return function setPrototypeOf(O, proto){
	          check(O, proto);
	          if(buggy)O.__proto__ = proto;
	          else set(O, proto);
	          return O;
	        };
	      }()
	    : undefined),
	  check: check
	};

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var $       = __webpack_require__(165)
	  , SPECIES = __webpack_require__(198)('species');
	module.exports = function(C){
	  if(__webpack_require__(201) && !(SPECIES in C))$.setDesc(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var store  = __webpack_require__(216)('wks')
	  , Symbol = __webpack_require__(186).Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || __webpack_require__(199))('Symbol.' + name));
	};

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx                = __webpack_require__(187)
	  , invoke             = __webpack_require__(239)
	  , html               = __webpack_require__(240)
	  , cel                = __webpack_require__(241)
	  , global             = __webpack_require__(186)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	function run(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	}
	function listner(event){
	  run.call(event.data);
	}
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(238)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Modern browsers, skip implementation for WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id, '*');
	    };
	    global.addEventListener('message', listner, false);
	  // WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listner;
	    defer = ctx(port.postMessage, port, 1);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !!function(){
	  try {
	    return Object.defineProperty({}, 'a', {get: function(){ return 2; }}).a == 2;
	  } catch(e){ /* empty */ }
	}();

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var $redef = __webpack_require__(215);
	module.exports = function(target, src){
	  for(var key in src)$redef(target, key, src[key]);
	  return target;
	};

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var has  = __webpack_require__(214)
	  , hide = __webpack_require__(242)
	  , TAG  = __webpack_require__(198)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))hide(it, TAG, tag);
	};

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var SYMBOL_ITERATOR = __webpack_require__(198)('iterator')
	  , SAFE_CLOSING    = false;
	try {
	  var riter = [7][SYMBOL_ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	module.exports = function(exec){
	  if(!SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[SYMBOL_ITERATOR]();
	    iter.next = function(){ safe = true; };
	    arr[SYMBOL_ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var setUnscope = __webpack_require__(245)
	  , step       = __webpack_require__(246)
	  , Iterators  = __webpack_require__(206)
	  , toObject   = __webpack_require__(207);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	__webpack_require__(210)(Array, 'Array', function(iterated, kind){
	  this._t = toObject(iterated); // target
	  this._i = 0;                  // next index
	  this._k = kind;               // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	setUnscope('keys');
	setUnscope('values');
	setUnscope('entries');

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {};

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var ES5Object = __webpack_require__(243)
	  , defined   = __webpack_require__(244);
	module.exports = function(it, realString){
	  return (realString ? Object : ES5Object)(defined(it));
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toString = {}.toString
	  , toObject = __webpack_require__(207)
	  , getNames = __webpack_require__(165).getNames;

	var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	function getWindowNames(it){
	  try {
	    return getNames(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	}

	module.exports.get = function getOwnPropertyNames(it){
	  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
	  return getNames(toObject(it));
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	// true  -> String#at
	// false -> String#codePointAt
	var toInteger = __webpack_require__(255)
	  , defined   = __webpack_require__(244);
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l
	      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	        ? TO_STRING ? s.charAt(i) : a
	        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY         = __webpack_require__(185)
	  , $def            = __webpack_require__(189)
	  , $redef          = __webpack_require__(215)
	  , hide            = __webpack_require__(242)
	  , has             = __webpack_require__(214)
	  , SYMBOL_ITERATOR = __webpack_require__(198)('iterator')
	  , Iterators       = __webpack_require__(206)
	  , FF_ITERATOR     = '@@iterator'
	  , KEYS            = 'keys'
	  , VALUES          = 'values';
	function returnThis(){ return this; }
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
	  __webpack_require__(256)(Constructor, NAME, next);
	  function createMethod(kind){
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  }
	  var TAG      = NAME + ' Iterator'
	    , proto    = Base.prototype
	    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , _default = _native || createMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if(_native){
	    var IteratorPrototype = __webpack_require__(165).getProto(_default.call(new Base));
	    // Set @@toStringTag to native iterators
	    __webpack_require__(203)(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);
	  }
	  // Define iterator
	  if(!LIBRARY || FORCE)hide(proto, SYMBOL_ITERATOR, _default);
	  // Plug for library
	  Iterators[NAME] = _default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      keys:    IS_SET            ? _default : createMethod(KEYS),
	      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),
	      entries: DEFAULT != VALUES ? _default : createMethod('entries')
	    };
	    if(FORCE)for(key in methods){
	      if(!(key in proto))$redef(proto, key, methods[key]);
	    } else $def($def.P + $def.F * __webpack_require__(257), NAME, methods);
	  }
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curve = exports;

	curve.base = __webpack_require__(247);
	curve.short = __webpack_require__(248);
	curve.mont = __webpack_require__(249);
	curve.edwards = __webpack_require__(250);


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bn = __webpack_require__(93);
	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;
	var assert = utils.assert;

	var KeyPair = __webpack_require__(253);
	var Signature = __webpack_require__(254);

	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

	    options = elliptic.curves[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof elliptic.curves.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	module.exports = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new KeyPair(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new elliptic.hmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
	    nonce: this.n.toArray()
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new bn(2));
	  do {
	    var priv = new bn(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  } while (true);
	};

	EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new bn(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray();
	  for (var i = bkey.length; i < 21; i++)
	    bkey.unshift(0);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray();
	  for (var i = nonce.length; i < bytes; i++)
	    nonce.unshift(0);

	  // Instantiate Hmac_DRBG
	  var drbg = new elliptic.hmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new bn(1));
	  do {
	    var k = new bn(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0)
	      s = this.n.sub(s);

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
	  } while (true);
	};

	EC.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new bn(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);

	  var p = this.g.mulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  return p.getX().umod(this.n).cmp(r) === 0;
	};

	EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature(signature, enc);

	  var n = this.n;
	  var e = new bn(msg);
	  var r = signature.r;
	  var s = signature.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  r = this.curve.pointFromX(r, isYOdd);
	  var eNeg = e.neg().umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  var rInv = signature.r.invm(n);
	  return r.mul(s).add(this.g.mul(eNeg)).mul(rInv);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature(signature, enc);
	  if (signature.recoveryParam !== null)
	    return signature.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime = this.recoverPubKey(e, signature, i);

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var hash = __webpack_require__(94);
	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var KeyPair = __webpack_require__(251);
	var Signature = __webpack_require__(252);

	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  var curve = elliptic.curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash.sha512;
	}

	module.exports = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	               .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature)
	    return sig;
	  return new Signature(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(242);

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(186)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(165)
	  , toObject = __webpack_require__(207);
	module.exports = function(object, el){
	  var O      = toObject(object)
	    , keys   = $.getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(165);
	module.exports = function(it){
	  var keys       = $.getKeys(it)
	    , isEnum     = $.isEnum
	    , getSymbols = $.getSymbols;
	  if(getSymbols)for(var symbols = getSymbols(it), i = 0, key; symbols.length > i; ){
	    if(isEnum.call(it, key = symbols[i++]))keys.push(key);
	  }
	  return keys;
	};

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function seqEqual(arr1, arr2) {
	  if (arr1.length !== arr2.length) {
	    return false;
	  }

	  for (var i = 0; i < arr1.length; i++) {
	    if (arr1[i] !== arr2[i]) {
	      return false;
	    }
	  }
	  return true;
	}

	function isSequence(val) {
	  return val.length !== undefined;
	}

	/**
	* Concatenates all `arguments` into a single array. Each argument can be either
	* a single element or a sequence, which has a `length` property and supports
	* element retrieval via sequence[ix].
	*
	* > concatArgs(1, [2, 3], new Buffer([4,5]), new Uint8Array([6, 7]));
	*  [1,2,3,4,5,6,7]
	*
	* @return {Array} - concatenated arguments
	*/
	function concatArgs() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var ret = [];
	  args.forEach(function (arg) {
	    if (isSequence(arg)) {
	      for (var j = 0; j < arg.length; j++) {
	        ret.push(arg[j]);
	      }
	    } else {
	      ret.push(arg);
	    }
	  });
	  return ret;
	}

	function isSet(o) {
	  return o !== null && o !== undefined;
	}

	module.exports = {
	  seqEqual: seqEqual,
	  concatArgs: concatArgs,
	  isSet: isSet
	};

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(191);
	function close(iterator){
	  var ret = iterator['return'];
	  if(ret !== undefined)anObject(ret.call(iterator));
	}
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  } catch(e){
	    close(iterator);
	    throw e;
	  }
	};

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var Iterators = __webpack_require__(206)
	  , ITERATOR  = __webpack_require__(198)('iterator');
	module.exports = function(it){
	  return ('Array' in Iterators ? Iterators.Array : Array.prototype[ITERATOR]) === it;
	};

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(255)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(186)
	  , classof   = __webpack_require__(188)
	  , ITERATOR  = __webpack_require__(198)('iterator')
	  , Iterators = __webpack_require__(206);
	module.exports = __webpack_require__(170).getIteratorMethod = function(it){
	  var Symbol = global.Symbol;
	  if(it != undefined){
	    return it[Symbol && Symbol.iterator || '@@iterator']
	      || it[ITERATOR]
	      || Iterators[classof(it)];
	  }
	};

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(235)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(79).Buffer))

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(260)

	var md5 = toConstructor(__webpack_require__(258))
	var rmd160 = toConstructor(__webpack_require__(262))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(226)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}

	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(261)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var http = module.exports;
	var EventEmitter = __webpack_require__(76).EventEmitter;
	var Request = __webpack_require__(259);
	var url = __webpack_require__(80)

	http.request = function (params, cb) {
	    if (typeof params === 'string') {
	        params = url.parse(params)
	    }
	    if (!params) params = {};
	    if (!params.host && !params.port) {
	        params.port = parseInt(window.location.port, 10);
	    }
	    if (!params.host && params.hostname) {
	        params.host = params.hostname;
	    }

	    if (!params.protocol) {
	        if (params.scheme) {
	            params.protocol = params.scheme + ':';
	        } else {
	            params.protocol = window.location.protocol;
	        }
	    }

	    if (!params.host) {
	        params.host = window.location.hostname || window.location.host;
	    }
	    if (/:/.test(params.host)) {
	        if (!params.port) {
	            params.port = params.host.split(':')[1];
	        }
	        params.host = params.host.split(':')[0];
	    }
	    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
	    
	    var req = new Request(new xhrHttp, params);
	    if (cb) req.on('response', cb);
	    return req;
	};

	http.get = function (params, cb) {
	    params.method = 'GET';
	    var req = http.request(params, cb);
	    req.end();
	    return req;
	};

	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;

	var xhrHttp = (function () {
	    if (typeof window === 'undefined') {
	        throw new Error('no window object present');
	    }
	    else if (window.XMLHttpRequest) {
	        return window.XMLHttpRequest;
	    }
	    else if (window.ActiveXObject) {
	        var axs = [
	            'Msxml2.XMLHTTP.6.0',
	            'Msxml2.XMLHTTP.3.0',
	            'Microsoft.XMLHTTP'
	        ];
	        for (var i = 0; i < axs.length; i++) {
	            try {
	                var ax = new(window.ActiveXObject)(axs[i]);
	                return function () {
	                    if (ax) {
	                        var ax_ = ax;
	                        ax = null;
	                        return ax_;
	                    }
	                    else {
	                        return new(window.ActiveXObject)(axs[i]);
	                    }
	                };
	            }
	            catch (e) {}
	        }
	        throw new Error('ajax not supported in this browser')
	    }
	    else {
	        throw new Error('ajax not supported in this browser');
	    }
	})();

	http.STATUS_CODES = {
	    100 : 'Continue',
	    101 : 'Switching Protocols',
	    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
	    200 : 'OK',
	    201 : 'Created',
	    202 : 'Accepted',
	    203 : 'Non-Authoritative Information',
	    204 : 'No Content',
	    205 : 'Reset Content',
	    206 : 'Partial Content',
	    207 : 'Multi-Status',               // RFC 4918
	    300 : 'Multiple Choices',
	    301 : 'Moved Permanently',
	    302 : 'Moved Temporarily',
	    303 : 'See Other',
	    304 : 'Not Modified',
	    305 : 'Use Proxy',
	    307 : 'Temporary Redirect',
	    400 : 'Bad Request',
	    401 : 'Unauthorized',
	    402 : 'Payment Required',
	    403 : 'Forbidden',
	    404 : 'Not Found',
	    405 : 'Method Not Allowed',
	    406 : 'Not Acceptable',
	    407 : 'Proxy Authentication Required',
	    408 : 'Request Time-out',
	    409 : 'Conflict',
	    410 : 'Gone',
	    411 : 'Length Required',
	    412 : 'Precondition Failed',
	    413 : 'Request Entity Too Large',
	    414 : 'Request-URI Too Large',
	    415 : 'Unsupported Media Type',
	    416 : 'Requested Range Not Satisfiable',
	    417 : 'Expectation Failed',
	    418 : 'I\'m a teapot',              // RFC 2324
	    422 : 'Unprocessable Entity',       // RFC 4918
	    423 : 'Locked',                     // RFC 4918
	    424 : 'Failed Dependency',          // RFC 4918
	    425 : 'Unordered Collection',       // RFC 4918
	    426 : 'Upgrade Required',           // RFC 2817
	    428 : 'Precondition Required',      // RFC 6585
	    429 : 'Too Many Requests',          // RFC 6585
	    431 : 'Request Header Fields Too Large',// RFC 6585
	    500 : 'Internal Server Error',
	    501 : 'Not Implemented',
	    502 : 'Bad Gateway',
	    503 : 'Service Unavailable',
	    504 : 'Gateway Time-out',
	    505 : 'HTTP Version Not Supported',
	    506 : 'Variant Also Negotiates',    // RFC 2295
	    507 : 'Insufficient Storage',       // RFC 4918
	    509 : 'Bandwidth Limit Exceeded',
	    510 : 'Not Extended',               // RFC 2774
	    511 : 'Network Authentication Required' // RFC 6585
	};

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(229);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;;(function(exports) {

	// export the class if we are in a Node-like system.
	if (typeof module === 'object' && module.exports === exports)
	  exports = module.exports = SemVer;

	// The debug function is excluded entirely from the minified version.

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


	// ## Main Version
	// Three dot-separated numeric identifiers.

	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')';

	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
	                            '|' + src[NONNUMERICIDENTIFIER] + ')';

	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
	             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] +
	                src[PRERELEASE] + '?' +
	                src[BUILD] + '?';

	src[FULL] = '^' + FULLPLAIN + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
	                 src[PRERELEASELOOSE] + '?' +
	                 src[BUILD] + '?';

	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';

	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[PRERELEASE] + ')?' +
	                   src[BUILD] + '?' +
	                   ')?)?';

	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[PRERELEASELOOSE] + ')?' +
	                        src[BUILD] + '?' +
	                        ')?)?';

	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';

	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';

	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
	                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';


	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[XRANGEPLAIN] + ')' +
	                   '\\s*$';

	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  ;
	  if (!re[i])
	    re[i] = new RegExp(src[i]);
	}

	exports.parse = parse;
	function parse(version, loose) {
	  if (version instanceof SemVer)
	    return version;

	  if (typeof version !== 'string')
	    return null;

	  if (version.length > MAX_LENGTH)
	    return null;

	  var r = loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version))
	    return null;

	  try {
	    return new SemVer(version, loose);
	  } catch (er) {
	    return null;
	  }
	}

	exports.valid = valid;
	function valid(version, loose) {
	  var v = parse(version, loose);
	  return v ? v.version : null;
	}


	exports.clean = clean;
	function clean(version, loose) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
	  return s ? s.version : null;
	}

	exports.SemVer = SemVer;

	function SemVer(version, loose) {
	  if (version instanceof SemVer) {
	    if (version.loose === loose)
	      return version;
	    else
	      version = version.version;
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version);
	  }

	  if (version.length > MAX_LENGTH)
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

	  if (!(this instanceof SemVer))
	    return new SemVer(version, loose);

	  ;
	  this.loose = loose;
	  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);

	  if (!m)
	    throw new TypeError('Invalid Version: ' + version);

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
	    throw new TypeError('Invalid major version')

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
	    throw new TypeError('Invalid minor version')

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
	    throw new TypeError('Invalid patch version')

	  // numberify any prerelease numeric ids
	  if (!m[4])
	    this.prerelease = [];
	  else
	    this.prerelease = m[4].split('.').map(function(id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id
	        if (num >= 0 && num < MAX_SAFE_INTEGER)
	          return num
	      }
	      return id;
	    });

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function() {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length)
	    this.version += '-' + this.prerelease.join('.');
	  return this.version;
	};

	SemVer.prototype.inspect = function() {
	  return '<SemVer "' + this + '">';
	};

	SemVer.prototype.toString = function() {
	  return this.version;
	};

	SemVer.prototype.compare = function(other) {
	  ;
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return this.compareMain(other) || this.comparePre(other);
	};

	SemVer.prototype.compareMain = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch);
	};

	SemVer.prototype.comparePre = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length)
	    return -1;
	  else if (!this.prerelease.length && other.prerelease.length)
	    return 1;
	  else if (!this.prerelease.length && !other.prerelease.length)
	    return 0;

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    ;
	    if (a === undefined && b === undefined)
	      return 0;
	    else if (b === undefined)
	      return 1;
	    else if (a === undefined)
	      return -1;
	    else if (a === b)
	      continue;
	    else
	      return compareIdentifiers(a, b);
	  } while (++i);
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function(release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break;
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break;
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0)
	        this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
	        this.major++;
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0)
	        this.minor++;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0)
	        this.patch++;
	      this.prerelease = [];
	      break;
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0)
	        this.prerelease = [0];
	      else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) // didn't increment anything
	          this.prerelease.push(0);
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1]))
	            this.prerelease = [identifier, 0];
	        } else
	          this.prerelease = [identifier, 0];
	      }
	      break;

	    default:
	      throw new Error('invalid increment argument: ' + release);
	  }
	  this.format();
	  return this;
	};

	exports.inc = inc;
	function inc(version, release, loose, identifier) {
	  if (typeof(loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version;
	  } catch (er) {
	    return null;
	  }
	}

	exports.diff = diff;
	function diff(version1, version2) {
	  if (eq(version1, version2)) {
	    return null;
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    if (v1.prerelease.length || v2.prerelease.length) {
	      for (var key in v1) {
	        if (key === 'major' || key === 'minor' || key === 'patch') {
	          if (v1[key] !== v2[key]) {
	            return 'pre'+key;
	          }
	        }
	      }
	      return 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return key;
	        }
	      }
	    }
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers(a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return (anum && !bnum) ? -1 :
	         (bnum && !anum) ? 1 :
	         a < b ? -1 :
	         a > b ? 1 :
	         0;
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers(a, b) {
	  return compareIdentifiers(b, a);
	}

	exports.major = major;
	function major(a, loose) {
	  return new SemVer(a, loose).major;
	}

	exports.minor = minor;
	function minor(a, loose) {
	  return new SemVer(a, loose).minor;
	}

	exports.patch = patch;
	function patch(a, loose) {
	  return new SemVer(a, loose).patch;
	}

	exports.compare = compare;
	function compare(a, b, loose) {
	  return new SemVer(a, loose).compare(b);
	}

	exports.compareLoose = compareLoose;
	function compareLoose(a, b) {
	  return compare(a, b, true);
	}

	exports.rcompare = rcompare;
	function rcompare(a, b, loose) {
	  return compare(b, a, loose);
	}

	exports.sort = sort;
	function sort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.compare(a, b, loose);
	  });
	}

	exports.rsort = rsort;
	function rsort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.rcompare(a, b, loose);
	  });
	}

	exports.gt = gt;
	function gt(a, b, loose) {
	  return compare(a, b, loose) > 0;
	}

	exports.lt = lt;
	function lt(a, b, loose) {
	  return compare(a, b, loose) < 0;
	}

	exports.eq = eq;
	function eq(a, b, loose) {
	  return compare(a, b, loose) === 0;
	}

	exports.neq = neq;
	function neq(a, b, loose) {
	  return compare(a, b, loose) !== 0;
	}

	exports.gte = gte;
	function gte(a, b, loose) {
	  return compare(a, b, loose) >= 0;
	}

	exports.lte = lte;
	function lte(a, b, loose) {
	  return compare(a, b, loose) <= 0;
	}

	exports.cmp = cmp;
	function cmp(a, op, b, loose) {
	  var ret;
	  switch (op) {
	    case '===':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a === b;
	      break;
	    case '!==':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a !== b;
	      break;
	    case '': case '=': case '==': ret = eq(a, b, loose); break;
	    case '!=': ret = neq(a, b, loose); break;
	    case '>': ret = gt(a, b, loose); break;
	    case '>=': ret = gte(a, b, loose); break;
	    case '<': ret = lt(a, b, loose); break;
	    case '<=': ret = lte(a, b, loose); break;
	    default: throw new TypeError('Invalid operator: ' + op);
	  }
	  return ret;
	}

	exports.Comparator = Comparator;
	function Comparator(comp, loose) {
	  if (comp instanceof Comparator) {
	    if (comp.loose === loose)
	      return comp;
	    else
	      comp = comp.value;
	  }

	  if (!(this instanceof Comparator))
	    return new Comparator(comp, loose);

	  ;
	  this.loose = loose;
	  this.parse(comp);

	  if (this.semver === ANY)
	    this.value = '';
	  else
	    this.value = this.operator + this.semver.version;

	  ;
	}

	var ANY = {};
	Comparator.prototype.parse = function(comp) {
	  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);

	  if (!m)
	    throw new TypeError('Invalid comparator: ' + comp);

	  this.operator = m[1];
	  if (this.operator === '=')
	    this.operator = '';

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2])
	    this.semver = ANY;
	  else
	    this.semver = new SemVer(m[2], this.loose);
	};

	Comparator.prototype.inspect = function() {
	  return '<SemVer Comparator "' + this + '">';
	};

	Comparator.prototype.toString = function() {
	  return this.value;
	};

	Comparator.prototype.test = function(version) {
	  ;

	  if (this.semver === ANY)
	    return true;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  return cmp(version, this.operator, this.semver, this.loose);
	};


	exports.Range = Range;
	function Range(range, loose) {
	  if ((range instanceof Range) && range.loose === loose)
	    return range;

	  if (!(this instanceof Range))
	    return new Range(range, loose);

	  this.loose = loose;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
	    return this.parseRange(range.trim());
	  }, this).filter(function(c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length;
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range);
	  }

	  this.format();
	}

	Range.prototype.inspect = function() {
	  return '<SemVer Range "' + this.range + '">';
	};

	Range.prototype.format = function() {
	  this.range = this.set.map(function(comps) {
	    return comps.join(' ').trim();
	  }).join('||').trim();
	  return this.range;
	};

	Range.prototype.toString = function() {
	  return this.range;
	};

	Range.prototype.parseRange = function(range) {
	  var loose = this.loose;
	  range = range.trim();
	  ;
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  ;
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  ;

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function(comp) {
	    return parseComparator(comp, loose);
	  }).join(' ').split(/\s+/);
	  if (this.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function(comp) {
	      return !!comp.match(compRe);
	    });
	  }
	  set = set.map(function(comp) {
	    return new Comparator(comp, loose);
	  });

	  return set;
	};

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators(range, loose) {
	  return new Range(range, loose).set.map(function(comp) {
	    return comp.map(function(c) {
	      return c.value;
	    }).join(' ').trim().split(' ');
	  });
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator(comp, loose) {
	  ;
	  comp = replaceCarets(comp, loose);
	  ;
	  comp = replaceTildes(comp, loose);
	  ;
	  comp = replaceXRanges(comp, loose);
	  ;
	  comp = replaceStars(comp, loose);
	  ;
	  return comp;
	}

	function isX(id) {
	  return !id || id.toLowerCase() === 'x' || id === '*';
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceTilde(comp, loose);
	  }).join(' ');
	}

	function replaceTilde(comp, loose) {
	  var r = loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    ;
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p))
	      // ~1.2 == >=1.2.0- <1.3.0-
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    else if (pr) {
	      ;
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      ret = '>=' + M + '.' + m + '.' + p + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';

	    ;
	    return ret;
	  });
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceCaret(comp, loose);
	  }).join(' ');
	}

	function replaceCaret(comp, loose) {
	  ;
	  var r = loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    ;
	    var ret;

	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p)) {
	      if (M === '0')
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      else
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	    } else if (pr) {
	      ;
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p + pr +
	              ' <' + (+M + 1) + '.0.0';
	    } else {
	      ;
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	    }

	    ;
	    return ret;
	  });
	}

	function replaceXRanges(comp, loose) {
	  ;
	  return comp.split(/\s+/).map(function(comp) {
	    return replaceXRange(comp, loose);
	  }).join(' ');
	}

	function replaceXRange(comp, loose) {
	  comp = comp.trim();
	  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
	    ;
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX)
	      gtlt = '';

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // replace X with 0
	      if (xm)
	        m = 0;
	      if (xp)
	        p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else if (xp) {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<'
	        if (xm)
	          M = +M + 1
	        else
	          m = +m + 1
	      }

	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }

	    ;

	    return ret;
	  });
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars(comp, loose) {
	  ;
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[STAR], '');
	}

	// This function is passed to string.replace(re[HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace($0,
	                       from, fM, fm, fp, fpr, fb,
	                       to, tM, tm, tp, tpr, tb) {

	  if (isX(fM))
	    from = '';
	  else if (isX(fm))
	    from = '>=' + fM + '.0.0';
	  else if (isX(fp))
	    from = '>=' + fM + '.' + fm + '.0';
	  else
	    from = '>=' + from;

	  if (isX(tM))
	    to = '';
	  else if (isX(tm))
	    to = '<' + (+tM + 1) + '.0.0';
	  else if (isX(tp))
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  else if (tpr)
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  else
	    to = '<=' + to;

	  return (from + ' ' + to).trim();
	}


	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function(version) {
	  if (!version)
	    return false;

	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version))
	      return true;
	  }
	  return false;
	};

	function testSet(set, version) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version))
	      return false;
	  }

	  if (version.prerelease.length) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (var i = 0; i < set.length; i++) {
	      ;
	      if (set[i].semver === ANY)
	        continue;

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch)
	          return true;
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false;
	  }

	  return true;
	}

	exports.satisfies = satisfies;
	function satisfies(version, range, loose) {
	  try {
	    range = new Range(range, loose);
	  } catch (er) {
	    return false;
	  }
	  return range.test(version);
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying(versions, range, loose) {
	  return versions.filter(function(version) {
	    return satisfies(version, range, loose);
	  }).sort(function(a, b) {
	    return rcompare(a, b, loose);
	  })[0] || null;
	}

	exports.validRange = validRange;
	function validRange(range, loose) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, loose).range || '*';
	  } catch (er) {
	    return null;
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr(version, range, loose) {
	  return outside(version, range, '<', loose);
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr(version, range, loose) {
	  return outside(version, range, '>', loose);
	}

	exports.outside = outside;
	function outside(version, range, hilo, loose) {
	  version = new SemVer(version, loose);
	  range = new Range(range, loose);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break;
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break;
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"');
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, loose)) {
	    return false;
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function(comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0')
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, loose)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, loose)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false;
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false;
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false;
	    }
	  }
	  return true;
	}

	// Use the define() function if we're in AMD land
	if (true)
	  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (exports), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	})(
	  true ? exports :
	  typeof define === 'function' && define.amd ? {} :
	  semver = {}
	);


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// base* encoding
	// Credits to https://github.com/cryptocoinjs/bs58

	module.exports = function base (ALPHABET) {
	  var ALPHABET_MAP = {}
	  var BASE = ALPHABET.length
	  var LEADER = ALPHABET.charAt(0)

	  // pre-compute lookup table
	  for (var i = 0; i < ALPHABET.length; i++) {
	    ALPHABET_MAP[ALPHABET.charAt(i)] = i
	  }

	  function encode (buffer) {
	    if (buffer.length === 0) return ''

	    var i, j
	    var digits = [0]

	    for (i = 0; i < buffer.length; i++) {
	      for (j = 0; j < digits.length; j++) digits[j] <<= 8

	      digits[0] += buffer[i]

	      var carry = 0
	      for (j = 0; j < digits.length; ++j) {
	        digits[j] += carry

	        carry = (digits[j] / BASE) | 0
	        digits[j] %= BASE
	      }

	      while (carry) {
	        digits.push(carry % BASE)

	        carry = (carry / BASE) | 0
	      }
	    }

	    // deal with leading zeros
	    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {
	      digits.push(0)
	    }

	    return digits.reverse().map(function (digit) {
	      return ALPHABET[digit]
	    }).join('')
	  }

	  function decode (string) {
	    if (string.length === 0) return []

	    var i, j
	    var bytes = [0]

	    for (i = 0; i < string.length; i++) {
	      var c = string[i]
	      if (!(c in ALPHABET_MAP)) throw new Error('Non-base' + BASE + ' character')

	      for (j = 0; j < bytes.length; j++) bytes[j] *= BASE
	      bytes[0] += ALPHABET_MAP[c]

	      var carry = 0
	      for (j = 0; j < bytes.length; ++j) {
	        bytes[j] += carry

	        carry = bytes[j] >> 8
	        bytes[j] &= 0xff
	      }

	      while (carry) {
	        bytes.push(carry & 0xff)

	        carry >>= 8
	      }
	    }

	    // deal with leading zeros
	    for (i = 0; string[i] === LEADER && i < string.length - 1; i++) {
	      bytes.push(0)
	    }

	    return bytes.reverse()
	  }

	  return {
	    encode: encode,
	    decode: decode
	  }
	}


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  doubles: {
	    step: 4,
	    points: [
	      [
	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
	      ],
	      [
	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
	      ],
	      [
	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
	      ],
	      [
	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
	      ],
	      [
	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
	      ],
	      [
	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
	      ],
	      [
	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
	      ],
	      [
	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
	      ],
	      [
	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
	      ],
	      [
	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
	      ],
	      [
	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
	      ],
	      [
	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
	      ],
	      [
	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
	      ],
	      [
	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
	      ],
	      [
	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
	      ],
	      [
	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
	      ],
	      [
	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
	      ],
	      [
	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
	      ],
	      [
	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
	      ],
	      [
	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
	      ],
	      [
	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
	      ],
	      [
	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
	      ],
	      [
	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
	      ],
	      [
	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
	      ],
	      [
	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
	      ],
	      [
	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
	      ],
	      [
	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
	      ],
	      [
	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
	      ],
	      [
	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
	      ],
	      [
	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
	      ],
	      [
	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
	      ],
	      [
	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
	      ],
	      [
	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
	      ],
	      [
	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
	      ],
	      [
	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
	      ],
	      [
	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
	      ],
	      [
	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
	      ],
	      [
	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
	      ],
	      [
	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
	      ],
	      [
	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
	      ],
	      [
	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
	      ],
	      [
	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
	      ],
	      [
	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
	      ],
	      [
	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
	      ],
	      [
	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
	      ],
	      [
	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
	      ],
	      [
	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
	      ],
	      [
	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
	      ],
	      [
	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
	      ],
	      [
	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
	      ],
	      [
	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
	      ],
	      [
	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
	      ],
	      [
	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
	      ],
	      [
	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
	      ],
	      [
	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
	      ],
	      [
	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
	      ],
	      [
	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
	      ],
	      [
	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
	      ],
	      [
	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
	      ],
	      [
	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
	      ],
	      [
	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
	      ],
	      [
	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
	      ],
	      [
	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
	      ],
	      [
	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
	      ],
	      [
	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
	      ]
	    ]
	  },
	  naf: {
	    wnd: 7,
	    points: [
	      [
	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
	      ],
	      [
	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
	      ],
	      [
	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
	      ],
	      [
	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
	      ],
	      [
	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
	      ],
	      [
	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
	      ],
	      [
	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
	      ],
	      [
	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
	      ],
	      [
	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
	      ],
	      [
	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
	      ],
	      [
	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
	      ],
	      [
	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
	      ],
	      [
	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
	      ],
	      [
	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
	      ],
	      [
	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
	      ],
	      [
	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
	      ],
	      [
	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
	      ],
	      [
	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
	      ],
	      [
	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
	      ],
	      [
	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
	      ],
	      [
	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
	      ],
	      [
	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
	      ],
	      [
	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
	      ],
	      [
	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
	      ],
	      [
	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
	      ],
	      [
	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
	      ],
	      [
	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
	      ],
	      [
	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
	      ],
	      [
	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
	      ],
	      [
	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
	      ],
	      [
	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
	      ],
	      [
	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
	      ],
	      [
	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
	      ],
	      [
	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
	      ],
	      [
	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
	      ],
	      [
	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
	      ],
	      [
	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
	      ],
	      [
	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
	      ],
	      [
	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
	      ],
	      [
	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
	      ],
	      [
	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
	      ],
	      [
	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
	      ],
	      [
	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
	      ],
	      [
	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
	      ],
	      [
	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
	      ],
	      [
	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
	      ],
	      [
	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
	      ],
	      [
	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
	      ],
	      [
	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
	      ],
	      [
	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
	      ],
	      [
	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
	      ],
	      [
	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
	      ],
	      [
	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
	      ],
	      [
	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
	      ],
	      [
	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
	      ],
	      [
	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
	      ],
	      [
	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
	      ],
	      [
	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
	      ],
	      [
	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
	      ],
	      [
	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
	      ],
	      [
	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
	      ],
	      [
	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
	      ],
	      [
	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
	      ],
	      [
	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
	      ],
	      [
	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
	      ],
	      [
	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
	      ],
	      [
	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
	      ],
	      [
	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
	      ],
	      [
	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
	      ],
	      [
	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
	      ],
	      [
	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
	      ],
	      [
	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
	      ],
	      [
	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
	      ],
	      [
	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
	      ],
	      [
	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
	      ],
	      [
	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
	      ],
	      [
	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
	      ],
	      [
	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
	      ],
	      [
	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
	      ],
	      [
	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
	      ],
	      [
	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
	      ],
	      [
	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
	      ],
	      [
	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
	      ],
	      [
	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
	      ],
	      [
	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
	      ],
	      [
	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
	      ],
	      [
	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
	      ],
	      [
	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
	      ],
	      [
	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
	      ],
	      [
	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
	      ],
	      [
	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
	      ],
	      [
	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
	      ],
	      [
	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
	      ],
	      [
	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
	      ],
	      [
	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
	      ],
	      [
	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
	      ],
	      [
	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
	      ],
	      [
	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
	      ],
	      [
	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
	      ],
	      [
	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
	      ],
	      [
	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
	      ],
	      [
	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
	      ],
	      [
	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
	      ],
	      [
	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
	      ],
	      [
	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
	      ],
	      [
	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
	      ],
	      [
	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
	      ],
	      [
	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
	      ],
	      [
	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
	      ],
	      [
	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
	      ],
	      [
	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
	      ],
	      [
	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
	      ],
	      [
	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
	      ],
	      [
	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
	      ],
	      [
	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
	      ],
	      [
	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
	      ],
	      [
	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
	      ],
	      [
	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
	      ],
	      [
	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
	      ],
	      [
	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
	      ],
	      [
	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
	      ],
	      [
	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
	      ],
	      [
	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
	      ],
	      [
	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
	      ],
	      [
	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
	      ],
	      [
	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
	      ],
	      [
	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
	      ]
	    ]
	  }
	};


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// Fast apply
	// http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	    case 5: return un ? fn(args[0], args[1], args[2], args[3], args[4])
	                      : fn.call(that, args[0], args[1], args[2], args[3], args[4]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(186).document && document.documentElement;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(190)
	  , document = __webpack_require__(186).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	var $          = __webpack_require__(165)
	  , createDesc = __webpack_require__(219);
	module.exports = __webpack_require__(201) ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for not array-like ES3 strings
	var cof     = __webpack_require__(238)
	  , $Object = Object;
	module.exports = 0 in $Object('z') ? $Object : function(it){
	  return cof(it) == 'String' ? it.split('') : $Object(it);
	};

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bn = __webpack_require__(93);
	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;
	var getNAF = utils.getNAF;
	var getJSF = utils.getJSF;
	var assert = utils.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new bn(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

	  // Useful for many curves
	  this.zero = new bn(0).toRed(this.red);
	  this.one = new bn(1).toRed(this.red);
	  this.two = new bn(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new bn(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);
	}
	module.exports = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  for (var j = 0; j < naf.length; j += doubles.step) {
	    var nafW = 0;
	    for (var k = j + doubles.step - 1; k >= j; k--)
	      nafW = (nafW << 1) + naf[k];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (var j = 0; j < repr.length; j++) {
	      var nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var k = 0; i >= 0 && naf[i] === 0; i--)
	      k++;
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	                                                       points,
	                                                       coeffs,
	                                                       len) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  for (var i = 0; i < len; i++) {
	    var p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (var i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a]);
	      naf[b] = getNAF(coeffs[b], wndWidth[b]);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b] /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (var j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (var i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (var j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (var j = 0; j < len; j++) {
	      var z = tmp[j];
	      var p;
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (var i = 0; i < len; i++)
	    wnd[i] = null;
	  return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils.toArray(bytes, enc);

	  var len = this.p.byteLength();
	  if (bytes[0] === 0x04 && bytes.length - 1 === 2 * len) {
	    return this.point(bytes.slice(1, 1 + len),
	                      bytes.slice(1 + len, 1 + 2 * len));
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curve = __webpack_require__(211);
	var elliptic = __webpack_require__(160);
	var bn = __webpack_require__(93);
	var inherits = __webpack_require__(265);
	var Base = curve.base;

	var assert = elliptic.utils.assert;

	function ShortCurve(conf) {
	  Base.call(this, 'short', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits(ShortCurve, Base);
	module.exports = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new bn(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new bn(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new bn(vec.a, 16),
	        b: new bn(vec.b, 16)
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : bn.mont(num);
	  var tinv = new bn(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new bn(1);
	  var y1 = new bn(0);
	  var x2 = new bn(0);
	  var y2 = new bn(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.sign) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.sign) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 }
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs) {
	  var npoints = this._endoWnafT1;
	  var ncoeffs = this._endoWnafT2;
	  for (var i = 0; i < points.length; i++) {
	    var split = this._endoSplit(coeffs[i]);
	    var p = points[i];
	    var beta = p._getBeta();

	    if (split.k1.sign) {
	      split.k1.sign = !split.k1.sign;
	      p = p.neg(true);
	    }
	    if (split.k2.sign) {
	      split.k2.sign = !split.k2.sign;
	      beta = beta.neg(true);
	    }

	    npoints[i * 2] = p;
	    npoints[i * 2 + 1] = beta;
	    ncoeffs[i * 2] = split.k1;
	    ncoeffs[i * 2 + 1] = split.k2;
	  }
	  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

	  // Clean-up references to points and coefficients
	  for (var j = 0; j < i * 2; j++) {
	    npoints[j] = null;
	    ncoeffs[j] = null;
	  }
	  return res;
	};

	function Point(curve, x, y, isRed) {
	  Base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits(Point, Base.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};

	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul)
	      }
	    };
	  }
	  return beta;
	};

	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1)
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1)
	    }
	  } ];
	};

	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point))
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point))
	    }
	  };
	  return res;
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point.prototype.mul = function mul(k) {
	  k = new bn(k, 16);

	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate)
	      }
	    };
	  }
	  return res;
	};

	Point.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  Base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new bn(0);
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = new bn(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits(JPoint, Base.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (var i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (var i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new bn(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curve = __webpack_require__(211);
	var bn = __webpack_require__(93);
	var inherits = __webpack_require__(265);
	var Base = curve.base;

	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;

	function MontCurve(conf) {
	  Base.call(this, 'mont', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.i4 = new bn(4).toRed(this.red).redInvm();
	  this.two = new bn(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits(MontCurve, Base);
	module.exports = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point(curve, x, z) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new bn(x, 16);
	    this.z = new bn(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits(Point, Base.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	Point.prototype.precompute = function precompute() {
	  // No-op
	};

	Point.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1] || curve.one);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var curve = __webpack_require__(211);
	var elliptic = __webpack_require__(160);
	var bn = __webpack_require__(93);
	var inherits = __webpack_require__(265);
	var Base = curve.base;

	var assert = elliptic.utils.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  Base.call(this, 'edwards', conf);

	  this.a = new bn(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new bn(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new bn(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits(EdwardsCurve, Base);
	module.exports = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y = rhs.redMul(lhs.redInvm()).redSqrt();
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new bn(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - 1) / (d y^2 + 1)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.one);
	  var rhs = y2.redMul(this.d).redAdd(this.one);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = z ? new bn(z, 16) : this.curve.one;
	    this.t = t && new bn(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits(Point, Base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	         this.y.cmp(this.z) === 0;
	};

	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // E = a * C
	    var e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      var h = this.z.redSqr();
	      // J = F - 2 * H
	      var j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    var e = c.redAdd(d);
	    // H = (c * Z1)^2
	    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
	    // J = E - 2 * H
	    var j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	                          this.y,
	                          this.z,
	                          this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var lazyComputed = utils.lazyComputed;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes(params.pub);
	}

	KeyPair.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair)
	    return pub;
	  return new KeyPair(eddsa, { pub: pub });
	};

	KeyPair.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair)
	    return secret;
	  return new KeyPair(eddsa, { secret: secret });
	};

	KeyPair.prototype.secret = function secret() {
	  return this._secret;
	};

	lazyComputed(KeyPair, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	lazyComputed(KeyPair, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	lazyComputed(KeyPair, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	lazyComputed(KeyPair, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	lazyComputed(KeyPair, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	lazyComputed(KeyPair, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair.prototype.sign = function sign(message) {
	  assert(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair.prototype.getSecret = function getSecret(enc) {
	  assert(this._secret, 'KeyPair is public only');
	  return utils.encode(this.secret(), enc);
	};

	KeyPair.prototype.getPublic = function getPublic(enc) {
	  return utils.encode(this.pubBytes(), enc);
	};

	module.exports = KeyPair;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bn = __webpack_require__(93);
	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;
	var assert = utils.assert;
	var lazyComputed = utils.lazyComputed;
	var parseBytes = utils.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength)
	    };
	  }

	  assert(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof bn)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	lazyComputed(Signature, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	lazyComputed(Signature, 'R', function S() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	lazyComputed(Signature, 'Rencoded', function S() {
	  return this.eddsa.encodePoint(this.R());
	});

	lazyComputed(Signature, 'Sencoded', function S() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature.prototype.toHex = function toHex() {
	  return utils.encode(this.toBytes(), 'hex').toUpperCase();
	};

	module.exports = Signature;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bn = __webpack_require__(93);

	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	module.exports = KeyPair;

	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair)
	    return pub;

	  return new KeyPair(ec, {
	    pub: pub,
	    pubEnc: enc
	  });
	};

	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair)
	    return priv;

	  return new KeyPair(ec, {
	    priv: priv,
	    privEnc: enc
	  });
	};

	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new bn(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bn = __webpack_require__(93);

	var elliptic = __webpack_require__(160);
	var utils = elliptic.utils;
	var assert = utils.assert;

	function Signature(options, enc) {
	  if (options instanceof Signature)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert(options.r && options.s, 'Signature without r or s');
	  this.r = new bn(options.r, 16);
	  this.s = new bn(options.s, 16);
	  if (options.recoveryParam !== null)
	    this.recoveryParam = options.recoveryParam;
	  else
	    this.recoveryParam = null;
	}
	module.exports = Signature;

	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils.toArray(data, enc);
	  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
	    return false;
	  var total = data[1];
	  if (1 + total > data.length)
	    return false;
	  var rlen = data[3];
	  // Short length notation
	  if (rlen >= 0x80)
	    return false;
	  if (4 + rlen + 2 >= data.length)
	    return false;
	  if (data[4 + rlen] !== 0x02)
	    return false;
	  var slen = data[5 + rlen];
	  // Short length notation
	  if (slen >= 0x80)
	    return false;
	  if (4 + rlen + 2 + slen > data.length)
	    return false;

	  this.r = new bn(data.slice(4, 4 + rlen));
	  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));
	  this.recoveryParam = null;

	  return true;
	};

	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  var total = r.length + s.length + 4;
	  var res = [ 0x30, total, 0x02, r.length ];
	  res = res.concat(r, [ 0x02, s.length ], s);
	  return utils.encode(res, enc);
	};


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(165)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(242)(IteratorPrototype, __webpack_require__(198)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: __webpack_require__(219)(1,next)});
	  __webpack_require__(203)(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	// Safari has buggy iterators w/o `next`
	module.exports = 'keys' in [] && !('next' in [].keys());

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(263);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(270);
	var Response = __webpack_require__(264);
	var Base64 = __webpack_require__(271);
	var inherits = __webpack_require__(272);

	var Request = module.exports = function (xhr, params) {
	    var self = this;
	    self.writable = true;
	    self.xhr = xhr;
	    self.body = [];
	    
	    self.uri = (params.protocol || 'http:') + '//'
	        + params.host
	        + (params.port ? ':' + params.port : '')
	        + (params.path || '/')
	    ;
	    
	    if (typeof params.withCredentials === 'undefined') {
	        params.withCredentials = true;
	    }

	    try { xhr.withCredentials = params.withCredentials }
	    catch (e) {}
	    
	    if (params.responseType) try { xhr.responseType = params.responseType }
	    catch (e) {}
	    
	    xhr.open(
	        params.method || 'GET',
	        self.uri,
	        true
	    );

	    xhr.onerror = function(event) {
	        self.emit('error', new Error('Network error'));
	    };

	    self._headers = {};
	    
	    if (params.headers) {
	        var keys = objectKeys(params.headers);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	        }
	    }
	    
	    if (params.auth) {
	        //basic auth
	        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
	    }

	    var res = new Response;
	    res.on('close', function () {
	        self.emit('close');
	    });
	    
	    res.on('ready', function () {
	        self.emit('response', res);
	    });

	    res.on('error', function (err) {
	        self.emit('error', err);
	    });
	    
	    xhr.onreadystatechange = function () {
	        // Fix for IE9 bug
	        // SCRIPT575: Could not complete the operation due to error c00c023f
	        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	        if (xhr.__aborted) return;
	        res.handle(xhr);
	    };
	};

	inherits(Request, Stream);

	Request.prototype.setHeader = function (key, value) {
	    this._headers[key.toLowerCase()] = value
	};

	Request.prototype.getHeader = function (key) {
	    return this._headers[key.toLowerCase()]
	};

	Request.prototype.removeHeader = function (key) {
	    delete this._headers[key.toLowerCase()]
	};

	Request.prototype.write = function (s) {
	    this.body.push(s);
	};

	Request.prototype.destroy = function (s) {
	    this.xhr.__aborted = true;
	    this.xhr.abort();
	    this.emit('close');
	};

	Request.prototype.end = function (s) {
	    if (s !== undefined) this.body.push(s);

	    var keys = objectKeys(this._headers);
	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var value = this._headers[key];
	        if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	                this.xhr.setRequestHeader(key, value[j]);
	            }
	        }
	        else this.xhr.setRequestHeader(key, value)
	    }

	    if (this.body.length === 0) {
	        this.xhr.send('');
	    }
	    else if (typeof this.body[0] === 'string') {
	        this.xhr.send(this.body.join(''));
	    }
	    else if (isArray(this.body[0])) {
	        var body = [];
	        for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	        }
	        this.xhr.send(body);
	    }
	    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	        var len = 0;
	        for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	        }
	        var body = new(this.body[0].constructor)(len);
	        var k = 0;
	        
	        for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	                body[k++] = b[j];
	            }
	        }
	        this.xhr.send(body);
	    }
	    else if (isXHR2Compatible(this.body[0])) {
	        this.xhr.send(this.body[0]);
	    }
	    else {
	        var body = '';
	        for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	        }
	        this.xhr.send(body);
	    }
	};

	// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	Request.unsafeHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "cookie",
	    "cookie2",
	    "content-transfer-encoding",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "user-agent",
	    "via"
	];

	Request.prototype.isSafeRequestHeader = function (headerName) {
	    if (!headerName) return false;
	    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	};

	var objectKeys = Object.keys || function (obj) {
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    return keys;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

	var indexOf = function (xs, x) {
	    if (xs.indexOf) return xs.indexOf(x);
	    for (var i = 0; i < xs.length; i++) {
	        if (xs[i] === x) return i;
	    }
	    return -1;
	};

	var isXHR2Compatible = function (obj) {
	    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
	    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
	    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
	};


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(79).Buffer
	var Hash   = __webpack_require__(266)(Buffer)

	exports.sha1 = __webpack_require__(267)(Buffer, Hash)
	exports.sha256 = __webpack_require__(268)(Buffer, Hash)
	exports.sha512 = __webpack_require__(269)(Buffer, Hash)


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}


	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(270);
	var util = __webpack_require__(81);

	var Response = module.exports = function (res) {
	    this.offset = 0;
	    this.readable = true;
	};

	util.inherits(Response, Stream);

	var capable = {
	    streaming : true,
	    status2 : true
	};

	function parseHeaders (res) {
	    var lines = res.getAllResponseHeaders().split(/\r?\n/);
	    var headers = {};
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i];
	        if (line === '') continue;
	        
	        var m = line.match(/^([^:]+):\s*(.*)/);
	        if (m) {
	            var key = m[1].toLowerCase(), value = m[2];
	            
	            if (headers[key] !== undefined) {
	            
	                if (isArray(headers[key])) {
	                    headers[key].push(value);
	                }
	                else {
	                    headers[key] = [ headers[key], value ];
	                }
	            }
	            else {
	                headers[key] = value;
	            }
	        }
	        else {
	            headers[line] = true;
	        }
	    }
	    return headers;
	}

	Response.prototype.getResponse = function (xhr) {
	    var respType = String(xhr.responseType).toLowerCase();
	    if (respType === 'blob') return xhr.responseBlob || xhr.response;
	    if (respType === 'arraybuffer') return xhr.response;
	    return xhr.responseText;
	}

	Response.prototype.getHeader = function (key) {
	    return this.headers[key.toLowerCase()];
	};

	Response.prototype.handle = function (res) {
	    if (res.readyState === 2 && capable.status2) {
	        try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	        }
	        catch (err) {
	            capable.status2 = false;
	        }
	        
	        if (capable.status2) {
	            this.emit('ready');
	        }
	    }
	    else if (capable.streaming && res.readyState === 3) {
	        try {
	            if (!this.statusCode) {
	                this.statusCode = res.status;
	                this.headers = parseHeaders(res);
	                this.emit('ready');
	            }
	        }
	        catch (err) {}
	        
	        try {
	            this._emitData(res);
	        }
	        catch (err) {
	            capable.streaming = false;
	        }
	    }
	    else if (res.readyState === 4) {
	        if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit('ready');
	        }
	        this._emitData(res);
	        
	        if (res.error) {
	            this.emit('error', this.getResponse(res));
	        }
	        else this.emit('end');
	        
	        this.emit('close');
	    }
	};

	Response.prototype._emitData = function (res) {
	    var respBody = this.getResponse(res);
	    if (respBody.toString().match(/ArrayBuffer/)) {
	        this.emit('data', new Uint8Array(respBody, this.offset));
	        this.offset = respBody.byteLength;
	        return;
	    }
	    if (respBody.length > this.offset) {
	        this.emit('data', respBody.slice(this.offset));
	        this.offset = respBody.length;
	    }
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(81).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(81).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(81).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(76).EventEmitter;
	var inherits = __webpack_require__(278);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(273);
	Stream.Writable = __webpack_require__(274);
	Stream.Duplex = __webpack_require__(275);
	Stream.Transform = __webpack_require__(276);
	Stream.PassThrough = __webpack_require__(277);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {

	  var object = true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });

	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '');
	    if (input.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });

	}());


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(279);
	exports.Stream = __webpack_require__(270);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(280);
	exports.Duplex = __webpack_require__(281);
	exports.Transform = __webpack_require__(282);
	exports.PassThrough = __webpack_require__(283);


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(280)


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(281)


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(282)


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(283)


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(285);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(79).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(76).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(270);

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(287);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(284);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(281);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(286).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(281);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(286).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129)))

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(79).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(287);
	/*</replacement>*/

	var Stream = __webpack_require__(270);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(281);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(281);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129)))

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(287);
	/*</replacement>*/

	var Readable = __webpack_require__(279);
	var Writable = __webpack_require__(280);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(129)))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(281);

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(287);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(282);

	/*<replacement>*/
	var util = __webpack_require__(288);
	util.inherits = __webpack_require__(287);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(79).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(79).Buffer))

/***/ }
/******/ ])